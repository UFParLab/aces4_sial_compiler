package sial.code_gen;

import java.io.IOException;
import java.io.PrintStream;

import sial.io.SIADataInput;
import sial.io.SIADataOutput;
import sial.io.*;

/** This class holds the internal representation of an SIO file
 * and provides methods to write and read from file, get a string representation, etc.
 *
 * Naming scheme for SipTable and all of its componets:
 * 	  write(SIADataOutput output)  writes object to the output stream.
 *    X readX(SIADataInput input) a static method that reads the input and uses it to initialize a new object of class X. The new object 
 *       is returned.
 *   toString()  returns a String representation of the object (either SipTable or on of its component). This method applies to an object created
 *    by the compile
 *    
 *   toStringFromInputFile  returns a String representation of the object. This applies to an instance that has been initialized with data read
 *   from a .siox file.
 *   
 *   Format of .siox file
 *   <siox> ::= <Header> <IntConstantTable> <IndexTable> <ArrayTable> <OpTable> <ScalarTable>  <SpecialTable> <StringLitTable> 
 *   
 *   The definitions of each non-terminal can be found in the corresponding class. <IntConstantTable> is
 *   currently implemented in ScalarTable
 */
public class SipTable {
	Header header;
	private IndexTable indexTable;
	private ArrayTable arrayTable;
	private OpTable opTable;
	private ScalarTable scalarTable; //contains constants
	private SpecialInstructionTable specialInstructionTable;
	private StringLiteralTable stringLiteralTable;
	
	protected SipTable(Header header, IndexTable indexTable, ArrayTable arrayTable,
			OpTable opTable, ScalarTable scalarTable, SpecialInstructionTable specialInstructionTable,
			StringLiteralTable stringLiteralTable) {
		super();
		this.header = header;
		this.setIndexTable(indexTable);
		this.setArrayTable(arrayTable);
		this.setOpTable(opTable);
		this.setScalarTable(scalarTable);
		this.setSpecialInstructionTable(specialInstructionTable);
		this.setStringLiteralTable(stringLiteralTable);
	}

	public SipTable() {
		header = new Header();
		setScalarTable(new ScalarTable());
		setIndexTable(new IndexTable());
		setArrayTable(new ArrayTable());
		setOpTable(new OpTable());
		setSpecialInstructionTable(new SpecialInstructionTable());
		setStringLiteralTable(new StringLiteralTable());
	}

/** Writes this SipTable to the given output stream.
 * 
 * @param output an SIADataOuput stream usually encapsulating a file
 * @throws IOException
 */
	public void write(SIADataOutput output) throws IOException{
		header.write(output);
		scalarTable.writeConstants(output);  //TODO change this to intTable.write(output);
		indexTable.write(output);
		arrayTable.write(output);
		opTable.write(output);
		scalarTable.write(output);
		specialInstructionTable.write(output);
		stringLiteralTable.write(output);
	}
	
	/** Reads data from the given SIAInputStream and uses it to initialize a new SipTable instance.  This can read data
	 * written by the write method.  
	 * 
	 * @param input and SIADataInput object usually representing a .siox file
	 * @return a new SipTable instance initialized with data from the file.
	 * @throws IOException
	 */
	public static SipTable readSipTable(SIADataInput input) throws IOException{
		boolean  verbose = false;
		Header header = Header.readHeader(input);
		if (verbose) System.out.println("reading index table");
		IndexTable indexTable = IndexTable.readIndexTable(input);
		if (verbose) System.out.println("reading array table");
		ArrayTable arrayTable = ArrayTable.readArrayTable(input);
		if (verbose) System.out.println("reading optable");
		OpTable opTable = OpTable.readOpTable(input); 
		if (verbose) System.out.println("reading scalarTable");
		ScalarTable scalarTable = ScalarTable.readScalarTable(input); 
		if (verbose) System.out.println("reading constants");  //TODO change to be about int table
		scalarTable.readConstants(input);
		if (verbose) System.out.println("reading special instructions");
		SpecialInstructionTable specialInstructionTable = SpecialInstructionTable.readSpecialInstructionTable(input);
		if (verbose) System.out.println("reading string literals");
		StringLiteralTable stringLiteralTable = StringLiteralTable.readStringLiteralTable(input);
//		if (verbose) System.out.println("reading index symbols");
//		indexTable.readSymbols(input);
//		if (verbose) System.out.println("reading array symbols");
//		arrayTable.readSymbols(input);
		return new SipTable(header, indexTable, arrayTable, opTable, scalarTable, specialInstructionTable, stringLiteralTable);
	}	
	
	/** Creates a String reperesentaion of the .siox file used to initialize this SipTable object.  
	 * This is needed because SipTables initialized from .siox files s are slighlty different from those 
	 * generated by the compiler.
	 * 
	 * @return A String representing the contents of the .siox file used to initialize this SipTable object
	 */
	public String toStringFromInputFile(){
		StringBuilder sb = new StringBuilder();
		sb.append("header: ");
		sb.append( header != null ? header.toString() : "header==null");
		sb.append("\nindex table:\n");
		sb.append(indexTable != null ? indexTable.toString(): "indexTable==null");
		sb.append("\narray table:\n");
		sb.append(arrayTable!= null ? arrayTable.toString() : "arrayTable==null");	
		sb.append("\noptable:\n");
		sb.append(opTable != null ? opTable.toString() : "optable == null");
		sb.append("\nscalar table:\n");
		sb.append(scalarTable != null ? scalarTable.toString() : "scalarTable == null");
		sb.append("\npredefined ints (i.e. constants):\n");
		sb.append( scalarTable != null  ? scalarTable.constantsToString() : "no constants, scalarTable == null");
		sb.append("\nspecial instruction table:\n");
		sb.append(specialInstructionTable != null ? specialInstructionTable.toString(): 
			"specialInstructionTable == null");
		sb.append("\nstring literal table:\n");
		sb.append(stringLiteralTable != null ? stringLiteralTable.toString(): "stringLiteralTable == null");
//        sb.append("\nindex names:\n");
//		sb.append(indexTable != null ? indexTable.symbolsFromInputFileToString(): "no index symbols, indexTable == null");
//		sb.append("\narray names:\n");
//		sb.append(arrayTable != null ? arrayTable.symbolsFromInputFileToString(): "no array symbols, arrayTable == null");
//		sb.append('\n');
		return sb.toString();
	}

	/** Creates a String reperesentaion of  this SipTable object.  Used for SipTable objects initialized by
	 * the compiler.
	 * 
	 * @return A String representing the contents of the SipTable.
	 */
	public String toString(){
		StringBuilder sb = new StringBuilder();
		sb.append("header: ");
		sb.append( header != null ? header.toString() : "header==null");
		sb.append("\nindex table:\n");
		sb.append(indexTable != null ? indexTable.toString(): "indexTable==null");
		sb.append("\narray table:\n");
		sb.append(arrayTable!= null ? arrayTable.toString() : "arrayTable==null");	
		sb.append("\noptable:\n");
		sb.append(opTable != null ? opTable.toString() : "optable == null");
		sb.append("\nscalar table:\n");
		sb.append(scalarTable != null ? scalarTable.toString() : "scalarTable == null");
		sb.append("\npredefined ints (i.e. constants):\n");
		sb.append( scalarTable != null ? scalarTable.constantsToString() : "no constants, scalarTable == null");
		sb.append("\nspecial instruction table:\n");
		sb.append(specialInstructionTable != null ? specialInstructionTable.toString(): 
			"specialInstructionTable == null");
		sb.append("\nstring literal table:\n");
		sb.append(stringLiteralTable != null ? stringLiteralTable.toString(): "stringLiteralTable == null");
//        sb.append("\nindex names:\n");
//		sb.append(indexTable != null ? indexTable.symbolsToString(): "no index symbols, indexTable == null");
//		sb.append("\narray names:\n");
//		sb.append(arrayTable != null ? arrayTable.symbolsToString(): "no array symbols, arrayTable == null");
		sb.append('\n');
		return sb.toString();
	}
		
	

	public IndexTable getIndexTable() {
		return indexTable;
	}

	public void setIndexTable(IndexTable indexTable) {
		this.indexTable = indexTable;
	}

	public ArrayTable getArrayTable() {
		return arrayTable;
	}

	public void setArrayTable(ArrayTable arrayTable) {
		this.arrayTable = arrayTable;
	}

	public OpTable getOpTable() {
		return opTable;
	}

	public void setOpTable(OpTable opTable) {
		this.opTable = opTable;
	}

	public ScalarTable getScalarTable() {
		return scalarTable;
	}

	public void setScalarTable(ScalarTable scalarTable) {
		this.scalarTable = scalarTable;
	}

	public SpecialInstructionTable getSpecialInstructionTable() {
		return specialInstructionTable;
	}

	public void setSpecialInstructionTable(SpecialInstructionTable specialInstructionTable) {
		this.specialInstructionTable = specialInstructionTable;
	}
	
	public StringLiteralTable getStringLiteralTable() {
		return stringLiteralTable;
	}

	public void setStringLiteralTable(StringLiteralTable stringLiteralTable) {
		this.stringLiteralTable = stringLiteralTable;
	}
}
