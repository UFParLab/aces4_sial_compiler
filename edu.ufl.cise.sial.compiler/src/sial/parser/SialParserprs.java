package sial.parser;

public class SialParserprs implements lpg.runtime.ParseTable, SialParsersym {
    public final static int ERROR_SYMBOL = 100;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 11;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 12;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 28;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 193;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 100;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1007;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 164;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 57;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 157;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 619;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 94;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 94;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 842;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 843;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SialParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,1,0,0,
            1,1,0,0,0,0,0,1,0,0,
            0,1,0,1,0,1,0,0,0,0,
            0,0,0,0,0,1,1,0,0,0,
            0,1,1,0,1,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            6,44,47,37,49,56,57,55,54,43,
            7,9,31,45,46,42,32,34,41,51,
            52,3,13,26,29,33,35,38,39,50,
            2,4,5,8,10,11,12,14,15,16,
            17,18,19,20,21,22,23,24,25,27,
            28,30,36,40,48,53,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            3,8,0,1,1,1,2,0,2,3,
            0,1,1,2,1,1,1,0,3,1,
            1,1,1,1,1,1,4,0,2,4,
            0,2,6,1,1,1,1,1,1,3,
            1,5,1,1,1,1,1,1,4,3,
            1,2,1,6,3,1,0,0,3,2,
            0,3,2,1,1,1,1,7,11,8,
            0,1,4,1,5,8,3,3,1,1,
            1,3,0,3,6,6,3,1,3,2,
            2,4,2,4,2,4,2,2,2,1,
            1,1,1,1,0,2,3,3,3,3,
            4,2,2,2,2,3,3,2,3,1,
            1,1,1,4,1,3,1,3,2,0,
            3,4,1,1,1,1,1,1,3,1,
            3,3,1,3,3,3,1,3,1,4,
            4,4,1,2,2,3,1,1,1,1,
            1,1,1,1,-93,0,0,0,0,0,
            0,0,0,0,0,-12,-39,0,0,-2,
            0,-120,0,0,0,0,-4,0,-23,0,
            0,0,0,0,0,-40,0,0,0,-35,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-152,0,0,0,0,0,0,0,0,
            0,0,-91,-136,0,0,0,0,-6,0,
            0,-154,0,0,0,0,0,0,0,0,
            0,0,-41,0,0,-15,0,0,0,-72,
            0,-47,0,0,0,0,0,0,0,0,
            0,0,-161,0,0,0,0,0,0,0,
            0,0,0,-7,0,0,-11,0,0,-176,
            0,0,0,0,0,0,0,0,0,0,
            -36,0,0,0,0,0,0,0,0,0,
            0,-42,0,0,0,0,-63,0,0,0,
            0,0,0,0,0,0,0,-70,0,0,
            0,0,0,0,0,0,0,0,-71,0,
            0,0,0,0,0,0,0,0,0,-76,
            0,0,0,0,0,0,0,0,0,0,
            -94,0,0,0,0,0,0,0,0,0,
            0,-115,0,0,0,0,0,0,0,0,
            0,0,-117,0,0,0,0,0,0,0,
            0,0,0,-118,0,0,0,0,0,0,
            0,0,0,0,-123,0,0,0,0,0,
            0,0,0,0,0,-132,0,0,0,0,
            0,0,0,0,0,0,-163,0,0,0,
            0,0,0,0,0,0,0,-106,0,0,
            0,0,0,0,0,0,0,-107,0,0,
            0,0,0,0,0,0,0,-111,0,0,
            0,0,0,0,0,0,-112,0,0,0,
            0,0,0,0,0,-113,0,0,0,0,
            0,0,0,0,-114,0,0,0,0,0,
            0,0,-142,0,0,0,0,0,0,0,
            -143,0,0,0,0,0,0,0,-144,0,
            0,0,0,0,0,0,-178,0,0,0,
            0,0,0,0,-74,0,0,0,0,0,
            -75,0,0,0,0,0,-14,0,0,0,
            -27,0,0,0,-28,0,0,0,-20,0,
            -29,0,0,0,-65,0,-160,-5,0,0,
            -30,0,0,0,-10,0,-102,0,0,0,
            -105,0,0,0,-3,0,0,0,-89,0,
            -124,0,0,0,-55,0,-135,0,0,0,
            0,-19,0,0,-155,0,0,0,0,0,
            -177,0,0,0,-137,0,0,0,-183,0,
            0,0,-116,0,-187,0,0,0,-1,-49,
            0,0,-189,0,0,0,-61,0,0,0,
            -53,0,0,0,0,0,-8,0,-159,0,
            0,0,0,-170,0,-173,0,0,0,0,
            0,-180,0,0,-184,0,-9,0,-13,-181,
            0,-18,0,-188,0,-60,0,0,-21,0,
            -64,0,0,-16,0,-67,0,-17,0,0,
            -22,0,0,0,0,-24,0,-25,0,-31,
            0,-26,0,-32,-33,-34,0,-37,0,-68,
            0,-38,0,-43,0,-44,0,0,0,-45,
            0,-46,0,-48,-50,0,-51,0,-52,-54,
            -56,0,-57,0,0,-58,0,-59,0,-69,
            0,-66,0,-62,0,0,-80,-82,-83,-84,
            0,0,-85,-86,0,-87,-88,-90,-99,-92,
            0,0,0,-95,-96,0,-100,0,-126,0,
            0,-128,-122,-125,0,0,-127,0,-157,0,
            0,-130,0,0,0,-174,-158,-164,0,0,
            -172,-175,-182,-186,0,-73,0,0,-191,0,
            -77,0,0,0,0,0,-193,0,-78,-79,
            -81,-97,0,-98,-101,-103,-104,-108,-109,-110,
            -119,-121,-129,-131,-133,-134,-138,-139,-140,-141,
            -145,-146,-147,-148,-149,-150,-151,-153,-156,-162,
            -165,-166,-167,-168,-169,-171,-179,-185,-190,-192,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            31,31,33,22,22,11,11,11,32,32,
            35,36,36,37,37,23,23,23,34,34,
            38,38,38,38,38,38,38,39,46,46,
            43,47,47,40,48,48,48,48,48,49,
            49,24,41,50,50,50,50,50,50,42,
            51,25,25,25,44,45,52,52,12,12,
            17,18,18,13,13,13,13,13,13,13,
            13,53,53,13,13,13,13,13,13,29,
            29,54,54,28,28,13,13,16,19,19,
            13,13,13,13,13,13,13,13,13,13,
            15,15,15,15,15,55,55,13,13,13,
            13,13,13,13,13,13,13,13,13,13,
            14,14,14,14,2,27,27,30,30,20,
            21,21,3,56,56,56,56,56,56,26,
            10,10,10,9,9,9,9,8,8,6,
            6,6,6,7,7,7,5,5,5,5,
            5,5,5,4,1,506,671,160,161,162,
            153,147,149,799,791,815,395,383,801,95,
            210,88,5,79,814,127,772,52,537,44,
            671,160,161,162,734,813,383,801,738,13,
            500,671,160,161,162,153,147,149,799,791,
            786,81,592,662,659,20,21,22,23,24,
            25,26,500,671,160,161,162,153,147,149,
            799,791,815,489,60,53,828,72,88,383,
            637,835,500,671,160,161,162,153,147,149,
            799,791,815,383,801,93,383,631,88,831,
            51,836,500,671,160,161,162,153,147,149,
            799,791,579,500,671,160,161,162,153,147,
            149,799,791,815,250,42,759,519,747,89,
            500,671,160,161,162,153,147,149,799,791,
            579,500,671,160,161,162,153,147,149,799,
            791,800,383,801,739,571,60,500,671,160,
            161,162,153,147,149,799,791,805,500,671,
            160,161,162,153,147,149,799,791,806,500,
            671,160,161,162,153,147,149,799,791,807,
            437,671,160,161,162,153,147,149,799,791,
            805,500,671,160,161,162,153,147,149,799,
            791,816,500,671,160,161,162,153,147,149,
            799,791,824,500,671,160,161,162,153,147,
            149,799,791,826,500,671,160,161,162,153,
            147,149,799,791,827,500,671,160,161,162,
            153,147,149,799,791,829,470,671,160,161,
            162,153,147,149,799,791,805,500,671,160,
            161,162,153,147,149,799,791,837,500,671,
            160,161,162,153,147,149,799,819,500,671,
            160,161,162,153,147,149,799,820,500,671,
            160,161,162,153,147,149,821,500,671,160,
            161,162,153,147,149,822,500,671,160,161,
            162,153,147,149,823,500,671,160,161,162,
            153,148,149,500,671,160,161,162,153,152,
            149,500,671,160,161,162,153,151,149,500,
            671,160,161,162,153,150,149,513,671,160,
            161,162,153,152,149,44,671,160,161,162,
            155,44,671,160,161,162,154,81,719,695,
            694,41,700,101,100,41,700,101,100,532,
            669,41,700,101,100,527,115,613,204,117,
            114,41,700,101,100,79,113,120,719,695,
            694,435,700,101,100,40,112,128,772,123,
            669,159,719,695,694,456,106,207,719,695,
            694,1,3,9,669,1,719,695,694,176,
            669,246,719,695,694,383,41,558,669,301,
            719,695,694,613,669,340,719,695,694,287,
            383,125,669,396,719,695,694,287,669,39,
            187,535,56,127,772,405,669,528,187,561,
            723,575,721,813,5,79,561,233,565,2,
            180,601,60,53,833,561,782,528,609,528,
            383,41,4,782,383,125,543,623,287,528,
            549,43,782,82,383,720,578,50,383,585,
            666,383,627,55,40,14,383,118,383,555,
            528,839,383,732,516,516,383,260,383,97,
            588,730,383,737,383,91,383,90,328,339,
            391,743,492,746,528,383,750,383,63,522,
            528,383,802,383,804,748,383,749,383,757,
            596,754,527,361,383,119,116,516,516,516,
            383,811,567,608,383,812,608,528,596,570,
            387,372,383,394,596,383,49,577,763,528,
            581,762,618,596,383,126,587,383,777,618,
            769,78,383,129,77,595,618,528,383,54,
            639,528,528,596,383,68,209,646,776,383,
            840,7,783,838,655,615,30,383,69,76,
            286,607,560,27,610,162,303,379,161,441,
            598,616,617,496,517,481,398,622,615,249,
            252,504,623,625,566,248,583,587,531,591,
            628,629,630,554,631,556,559,603,632,633,
            64,843,843
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,0,0,1,0,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            0,1,0,0,1,5,4,43,5,43,
            0,0,50,47,48,53,54,6,55,0,
            1,2,62,0,5,63,64,65,66,67,
            68,69,70,71,72,0,73,74,0,39,
            0,1,39,40,6,42,86,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            1,46,0,60,2,3,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,0,1,
            0,0,82,2,3,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,75,76,77,
            78,79,80,0,44,44,0,1,0,0,
            2,3,93,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,0,1,0,0,0,
            92,0,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,81,0,0,2,3,40,
            84,43,6,90,43,47,48,50,47,48,
            0,1,0,94,2,3,61,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            1,0,56,2,3,4,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,0,0,
            2,3,0,1,43,85,0,46,47,48,
            0,1,6,52,0,0,1,0,0,2,
            3,62,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,0,1,0,1,2,5,
            0,5,56,0,50,55,60,53,54,55,
            0,0,2,3,4,0,61,63,64,65,
            66,67,68,69,70,71,72,73,74,0,
            1,2,0,39,5,39,40,83,42,0,
            0,87,2,3,44,91,50,51,0,53,
            54,0,1,43,0,0,46,47,48,0,
            1,2,52,0,5,0,1,2,39,40,
            5,42,0,1,2,0,0,5,0,50,
            51,0,53,54,6,4,0,0,40,41,
            0,0,52,6,0,1,41,6,39,40,
            45,42,0,88,39,40,55,42,6,46,
            51,39,40,0,42,0,51,41,0,0,
            0,45,0,51,49,0,40,2,3,0,
            49,41,57,58,59,45,0,0,57,58,
            59,4,0,56,2,3,0,0,2,3,
            0,4,2,3,41,0,41,0,45,41,
            45,6,0,45,2,3,0,0,49,0,
            4,4,0,4,0,0,0,0,49,4,
            4,0,0,6,0,49,5,0,0,0,
            0,0,0,0,5,0,0,6,0,0,
            0,44,0,0,0,0,0,0,0,89,
            0,0,0,39,42,0,0,0,0,0,
            0,0,0,0,0,0,0,0,46,0,
            46,44,0,41,44,0,0,0,0,0,
            52,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            843,1007,843,12,843,1007,140,907,717,620,
            715,917,262,312,253,196,177,702,696,706,
            704,712,710,698,909,910,714,301,200,690,
            561,551,545,541,692,688,686,189,908,8,
            843,676,159,843,1007,947,165,923,1000,476,
            105,4,890,467,458,728,726,850,859,843,
            1007,832,918,843,894,886,887,888,889,891,
            877,878,879,880,881,143,858,860,18,946,
            843,1007,1001,1006,850,317,781,907,717,620,
            715,917,262,312,253,196,177,702,696,706,
            704,712,710,698,909,910,714,301,200,690,
            561,551,545,541,692,688,686,189,908,843,
            1007,485,843,797,438,448,907,717,620,715,
            917,262,312,253,196,177,702,696,706,704,
            712,710,698,909,910,714,301,200,690,561,
            551,545,541,692,688,686,189,908,843,1007,
            843,843,681,438,448,907,717,620,715,917,
            262,312,253,196,177,702,696,706,704,712,
            710,698,909,910,714,301,200,690,561,551,
            545,541,692,688,686,189,908,977,979,976,
            978,980,981,843,493,999,843,1007,99,843,
            438,448,954,907,717,620,715,917,262,312,
            253,196,177,702,696,706,704,712,710,698,
            909,910,714,301,200,690,561,551,545,541,
            692,688,686,189,908,843,1007,843,142,843,
            916,141,907,717,620,715,917,262,312,253,
            196,177,702,696,706,704,712,710,698,909,
            910,714,301,200,690,561,551,545,541,692,
            688,686,189,908,239,98,3,438,448,657,
            778,476,849,284,476,467,458,834,467,458,
            843,1007,110,842,438,448,784,907,717,620,
            715,917,262,312,253,196,177,702,696,706,
            704,712,710,698,909,910,714,301,200,690,
            561,551,545,541,692,688,686,189,908,843,
            1007,130,848,1007,1007,1007,907,717,620,715,
            917,262,312,253,196,177,702,696,706,704,
            712,710,698,909,910,714,301,200,690,561,
            551,545,541,692,688,686,189,908,109,843,
            438,448,843,1007,1007,664,843,1007,1007,1007,
            843,1007,849,1007,58,843,1007,108,843,438,
            448,919,907,717,620,715,917,262,312,253,
            196,177,702,696,706,704,712,710,698,909,
            910,714,301,200,690,561,551,545,541,692,
            688,686,189,908,107,676,843,1007,531,947,
            843,1000,848,843,11,740,767,11,11,859,
            131,843,1007,1007,1007,843,789,11,11,11,
            11,11,11,11,11,11,11,858,860,843,
            1007,531,843,946,1000,1001,1006,674,350,843,
            843,678,438,448,501,256,808,525,71,809,
            810,843,1007,1007,843,843,1007,1007,1007,843,
            1007,531,1007,146,1000,843,1349,531,1001,1006,
            1000,350,843,1458,531,843,843,1000,10,830,
            525,843,809,810,850,165,843,843,1006,764,
            843,19,427,849,57,1007,557,850,1001,1006,
            967,350,59,755,1001,1006,744,416,850,485,
            525,1001,1006,843,350,843,525,273,843,843,
            58,975,843,525,963,96,1006,438,448,31,
            963,644,964,965,966,927,28,102,964,965,
            966,164,94,848,438,448,92,843,438,448,
            139,165,438,448,660,58,273,843,876,273,
            929,850,87,928,438,448,843,83,234,843,
            613,182,130,605,843,843,843,61,817,222,
            242,843,145,850,144,818,875,843,843,843,
            843,62,70,843,895,843,843,850,843,843,
            843,509,843,843,843,843,843,843,843,290,
            843,843,843,872,825,843,843,843,843,843,
            843,843,843,843,843,843,843,843,485,843,
            485,517,843,764,974,843,843,843,843,843,
            652
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            127,134,6,4,6,84,18,221,221,31,
            5,32,221,51,84,84,84,136,139,31,
            221,84,25,84,84,84,27,27,27,27,
            221,228,228,84,23,23,84,84,84,84,
            84,84,84,84,224,224,23,221,84,84,
            84,227,220,221,86,84,84,84,84,153,
            132,84,23,196,18,18,217,271,233,23,
            23,218,390,25,25,20,199,198,390,228,
            271,228,228,84,269,84,269,221,208,273,
            9,313,23,23,317,84,231,271,309,309,
            395,234,390,390,218,23,23,397,397,397,
            23,23,23,23,23,124,23,23,271,1,
            271,159,23,274,84,221,84,353,405,84,
            405,20,399,390,318,14,84,16,29,199,
            199,23,23,23,198,198,198,390,151,390,
            390,23,405,23,88,390,409,221,354,124,
            23,397,23,84,401,16,405,397,405,1,
            405,221,410,353,221,23,355,23,403,14,
            84,160,411,354,408,84,161,84,355,10,
            84,315,84
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            43,1,0,94,6,81,90,0,40,56,
            6,41,0,2,1,5,0,40,0,54,
            53,50,2,51,40,42,1,5,39,0,
            6,63,64,65,66,50,67,53,54,68,
            69,70,71,72,73,55,74,87,83,91,
            8,7,38,24,25,10,9,26,11,12,
            21,22,19,20,13,14,15,16,17,23,
            27,28,18,29,30,31,32,33,34,35,
            36,37,82,1,0,88,0,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            62,86,0,1,42,0,81,90,56,6,
            0,56,6,94,0,73,55,74,63,64,
            65,66,67,68,69,70,71,72,53,54,
            50,0,82,84,85,61,92,93,86,6,
            1,8,7,38,24,25,10,9,26,11,
            12,21,22,19,20,13,14,15,16,17,
            23,27,28,18,29,30,31,32,33,34,
            35,36,37,62,0,1,4,46,41,44,
            45,52,56,6,43,47,48,77,75,78,
            76,79,80,3,2,0,4,5,39,1,
            56,6,0,1,55,0,4,57,58,59,
            49,0,6,1,8,7,38,24,25,10,
            9,26,11,12,21,22,19,20,13,14,
            15,16,17,23,27,28,18,29,30,31,
            32,33,34,35,36,37,93,0,56,6,
            4,0,6,1,8,7,38,24,25,10,
            9,26,11,12,21,22,19,20,13,14,
            15,16,17,23,27,28,18,29,30,31,
            32,33,34,35,36,37,92,0,56,6,
            49,0,56,6,60,0,6,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            84,0,6,89,1,8,7,38,24,25,
            10,9,26,11,12,21,22,19,20,13,
            14,15,16,17,23,27,28,18,29,30,
            31,32,33,34,35,36,37,61,0,56,
            6,3,2,0,3,2,44,0,3,2,
            52,0,3,2,45,41,0,61,6,89,
            1,8,7,38,24,25,10,9,26,11,
            12,21,22,19,20,13,14,15,16,17,
            23,27,28,18,29,30,31,32,33,34,
            35,36,37,85,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            55,5,43,5,38,4,5,56,56,41,
            5,6,56,25,4,4,4,69,47,5,
            56,4,4,4,4,4,30,30,30,30,
            56,71,71,4,4,4,4,4,27,27,
            27,27,4,4,4,4,19,56,58,4,
            4,71,60,56,5,4,4,4,4,5,
            56,4,4,5,33,33,5,5,8,4,
            4,17,5,4,4,4,5,5,5,71,
            5,71,71,4,73,4,73,56,45,8,
            12,56,1,4,8,4,5,5,75,77,
            5,25,5,5,30,4,4,5,5,5,
            4,4,4,4,4,52,4,4,5,10,
            5,8,4,25,4,56,4,79,5,4,
            5,4,5,5,25,14,50,5,5,5,
            5,4,4,4,5,5,5,5,5,5,
            5,3,5,3,25,5,79,56,62,35,
            22,5,4,4,5,5,5,5,5,65,
            5,56,62,79,56,19,25,4,5,15,
            67,8,25,62,5,4,25,58,25,5,
            4,5,4
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            21,30,19,1,0,37,38,12,0,54,
            0,53,0,51,25,0,55,0,1,26,
            0,1,16,0,3,13,1,2,0,1,
            15,0,4,0,21,20,0,33,35,0,
            34,0,32,0,56,0,48,50,0,49,
            0,21,30,0,31,11,0,27,0,52,
            0,12,17,0,29,0,24,0,23,0,
            14,0,28,0,47,0,46,0,18,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            96,3,2,19,97,99,28,29,30,32,
            36,37,40,41,42,43,45,46,62,63,
            64,65,66,71,72,73,75,76,81,83,
            84,85,86,87,88,90,91,93,98,100,
            1,17,4,18,20,22,5,6,13,51,
            92,21,55,56,80,95,14,15,16,33,
            34,39,47,48,49,50,52,57,58,59,
            60,61,69,89,7,8,9,10,11,12,
            24,25,26,27,31,38,53,54,67,68,
            70,74,82,94,35,44,77,78,79,101
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            104,126,129,120,130,136,0,135,134,125,
            105,0,116,127,128,124,117,0,123,132,
            0,0,108,112,115,118,119,0,121,131,
            102,0,103,0,106,0,107,109,0,0,
            0,0,0,0,0,0,0,110,111,113,
            114,0,0,122,0,133,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            23,59,49,72,33,33,6,12,43,1,
            81,18
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            31,67,56,78,31,38,10,16,47,4,
            84,20
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            13,13,13,13,13,13,3,13,13,5,
            12,16
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            62,61,85,61,62,86,45,93,92,44,
            56,52
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            48,48,48,48,48,48,1,48,48,15,
            58,43
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            110,42,0,44,0,119,4,101,0,45,
            0,112,111,29,0,93,0,110,0,52,
            110,0,112,111,86,112,111,126,12,0,
            62,0,112,111,126,12,0,86,111,112,
            62,0,112,111,26,0,92,0,112,118,
            111,153,127,9,0,85,127,0,112,118,
            111,101,60,101,10,0,61,101,60,101,
            0,112,118,111,101,10,0,61,101,0,
            113,112,0,111,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            623,615,609,601,595,587,581,571,567,561,
            551,545,541,537,517,290,427,509,501,493,
            416,405,394,383,372,485,476,467,458,448,
            438,361,350,531,525,339,328,317,262,301,
            200,189,273,242,222,165,0,623,615,609,
            601,595,587,581,567,537,0,655,783,646,
            639,763,754,748,730,176,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,131,122,111,132,81,90,101,40,111,
            111,134,138,112,91,83,87,137,136,111,
            113,82,37,36,35,34,33,32,31,30,
            29,103,102,18,28,27,23,17,16,15,
            14,13,20,19,22,21,12,26,9,10,
            8,101,101,101,101,150,148,54,53,111,
            101,105,42,101,101,101,1,101,111,114,
            114,101,110,51,2,42,109,108,110,101,
            101,102,102,55,101,55,101,126,110,111,
            127,101,4,114,111,88,101,101,101,101,
            110,112,110,110,155,2,3,50,53,54,
            48,47,43,46,114,4,114,114,101,4,
            101,111,156,112,41,153,60,111,130,121,
            119,42,110,110,112,49,4,49,49,109,
            109,44,44,44,108,108,108,110,42,110,
            110,4,154,4,112,110,111,101,118,41,
            41,50,52,84,125,2,149,50,119,41,
            119,86,118,111,117,89,112,44,110,52,
            41,111,112,118,111,61,112,85,112,127,
            61,101,60
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            ",",
            "+",
            "-",
            "*",
            "/",
            "^",
            ">",
            ">=",
            "<",
            "<=",
            "==",
            "!=",
            "=",
            "+=",
            "-=",
            "*=",
            "(",
            ")",
            "[",
            "]",
            ":",
            "**",
            "$empty",
            "sial",
            "endsial",
            "proc",
            "endproc",
            "return",
            "call",
            "pardo",
            "endpardo",
            "do",
            "in",
            "enddo",
            "cycle",
            "exit",
            "if",
            "else",
            "endif",
            "put",
            "get",
            "prepare",
            "request",
            "prequest",
            "collective",
            "execute",
            "aoindex",
            "moindex",
            "moaindex",
            "mobindex",
            "index",
            "laindex",
            "subindex",
            "of",
            "scalar",
            "int",
            "static",
            "temp",
            "local",
            "distributed",
            "served",
            "create",
            "delete",
            "allocate",
            "deallocate",
            "destroy",
            "where",
            "import",
            "predefined",
            "special",
            "server_barrier",
            "sip_barrier",
            "section",
            "endsection",
            "print",
            "println",
            "print_index",
            "print_scalar",
            "print_int",
            "contiguous",
            "gpu_on",
            "gpu_off",
            "gpu_allocate",
            "gpu_free",
            "gpu_put",
            "gpu_get",
            "set_persistent",
            "restore_persistent",
            "sparse",
            "assert_same",
            "broadcast_from",
            "sqrt",
            "stop",
            "EOF_TOKEN",
            "SINGLE_LINE_COMMENT",
            "IDENTIFIER",
            "INTLIT",
            "DOUBLELIT",
            "EOL",
            "STRINGLIT",
            "ERROR_TOKEN",
            "Sial",
            "Program",
            "Ident",
            "EOLs",
            "ImportProg",
            "Modifiers",
            "Modifier",
            "Dec",
            "ArrayKind",
            "DimensionList",
            "Dimension",
            "IndexKind",
            "Range",
            "RangeVal",
            "Statement",
            "WhereClause",
            "RelationalExpression",
            "Indices",
            "StringLiteral",
            "AllocIndex",
            "AllocIndexList",
            "ContiguousIndexRangeExprList",
            "ContiguousIndexRangeExpr",
            "Expression",
            "DataBlock",
            "AssignOp",
            "Arg",
            "ContiguousDataBlock",
            "Primary",
            "IndexCastIndices",
            "IndexCastIdent",
            "RelOp",
            "Term",
            "ExponentExpression",
            "CastExpression"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
