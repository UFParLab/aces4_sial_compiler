package sial.parser;

public class SialParserprs implements lpg.runtime.ParseTable, SialParsersym {
    public final static int ERROR_SYMBOL = 100;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 11;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 12;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 28;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 184;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 100;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 950;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 156;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 53;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 153;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 569;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 94;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 94;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 793;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 794;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SialParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,0,1,0,
            1,0,0,0,0,1,0,0,1,0,
            1,0,1,0,0,0,0,0,0,0,
            0,0,1,1,0,0,0,0,1,0,
            1,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            6,42,45,47,48,52,53,51,50,41,
            7,9,31,43,44,35,40,32,34,39,
            3,13,26,29,33,36,37,2,4,5,
            8,10,11,12,14,15,16,17,18,19,
            20,21,22,23,24,25,27,28,30,38,
            46,49,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            3,8,0,1,1,1,2,0,2,3,
            0,1,1,2,1,1,1,0,3,1,
            1,1,1,1,1,1,4,0,2,4,
            0,2,6,1,1,1,1,1,1,3,
            1,5,1,1,1,1,1,1,4,3,
            1,2,1,6,3,1,0,0,3,2,
            0,3,2,1,1,1,1,7,11,7,
            4,1,5,8,3,3,1,1,1,3,
            0,3,6,6,3,1,3,2,2,4,
            2,4,2,4,2,2,2,1,1,1,
            1,1,0,2,3,3,3,3,4,2,
            2,2,2,3,3,2,3,1,1,1,
            1,4,1,3,4,1,1,1,1,1,
            1,3,1,3,3,1,3,3,3,1,
            3,1,4,4,1,2,2,3,1,1,
            1,1,1,1,1,1,-93,0,0,0,
            0,0,0,0,0,0,0,-12,-39,0,
            0,-2,0,0,-6,0,0,-15,0,0,
            -110,0,0,0,0,0,0,0,0,0,
            -106,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -148,0,0,0,0,0,0,0,0,0,
            0,-23,0,0,0,0,0,0,-18,-19,
            0,-150,0,0,0,0,0,0,0,0,
            0,0,-74,0,0,0,0,0,0,-3,
            0,0,-47,0,0,0,0,0,0,0,
            0,0,0,-156,0,0,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,-167,0,0,0,0,0,0,0,0,
            0,0,-35,0,0,0,0,0,0,0,
            0,0,0,-40,0,0,0,-36,0,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,-70,
            0,0,0,0,0,0,0,0,0,0,
            -71,0,0,0,0,0,0,0,0,0,
            0,-76,0,0,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,-114,0,0,0,0,0,0,
            0,0,0,0,-116,0,0,0,0,0,
            0,0,0,0,0,-117,0,0,0,0,
            0,0,0,0,0,0,-122,0,0,0,
            0,0,0,0,0,0,0,-157,0,0,
            0,0,0,0,0,0,0,0,-107,0,
            0,0,0,0,0,0,0,0,-111,0,
            0,0,0,0,0,0,0,-112,0,0,
            0,0,0,0,0,0,-113,0,0,0,
            0,0,0,0,-140,0,0,0,0,0,
            0,0,-141,0,0,0,0,0,0,0,
            -75,0,0,0,0,0,-14,0,0,0,
            -27,0,0,0,-28,0,0,0,-85,0,
            -29,0,0,0,-4,0,-41,0,0,0,
            -30,0,0,0,-7,0,-102,0,0,0,
            -105,0,0,0,0,0,-42,0,0,0,
            -123,0,0,0,-11,0,-133,0,0,0,
            -49,0,-20,0,-151,0,0,0,-5,0,
            -168,0,0,0,-119,0,0,0,-170,0,
            0,0,-32,0,-179,0,0,0,-1,-134,
            0,0,-181,0,0,0,0,0,0,0,
            0,0,-135,0,-55,0,-53,0,-61,0,
            -115,0,-10,0,-87,-153,0,-8,-155,0,
            -163,0,-172,0,0,0,0,0,0,0,
            0,-173,0,0,-176,0,0,0,-9,-177,
            0,-13,-21,0,-16,0,0,0,0,0,
            0,0,0,0,0,0,-33,0,-17,0,
            -22,0,-24,0,-25,0,-26,0,-31,-72,
            0,-34,0,-37,0,-38,0,-43,0,0,
            -44,0,-45,0,-46,0,-48,-50,0,-51,
            0,-52,-54,-56,0,-57,0,0,-58,0,
            -59,0,-69,0,-66,0,-62,0,0,-80,
            -82,-83,-84,0,0,-86,0,-88,-89,-90,
            0,-91,-92,0,0,0,-95,-99,0,-96,
            0,0,0,0,-100,-121,-124,0,0,-125,
            -126,0,-127,-154,-158,0,-165,0,-166,-169,
            -174,-178,0,-60,0,-182,0,0,0,0,
            -64,0,0,-184,0,-67,-68,-73,0,-77,
            0,0,-78,-79,-81,-97,-98,0,-101,-103,
            -104,-108,-109,-118,-120,-128,-129,-130,-131,-132,
            -136,-137,-138,-139,-142,-143,-144,-145,-146,-147,
            -149,-152,-159,-160,-161,-162,-164,-171,-175,-180,
            -183,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            28,28,30,21,21,11,11,11,29,29,
            32,33,33,34,34,22,22,22,31,31,
            35,35,35,35,35,35,35,36,43,43,
            40,44,44,37,45,45,45,45,45,46,
            46,23,38,47,47,47,47,47,47,39,
            48,24,24,24,41,42,49,49,12,12,
            18,19,19,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,27,27,50,
            50,26,26,13,13,17,20,20,13,13,
            13,13,13,13,13,13,13,13,15,15,
            15,15,15,51,51,13,13,13,13,13,
            13,13,13,13,13,13,13,13,14,14,
            14,14,2,16,16,3,52,52,52,52,
            52,52,25,10,10,10,9,9,9,9,
            8,8,6,6,6,7,7,7,5,5,
            5,5,5,5,5,4,1,4,768,152,
            153,154,145,140,142,753,750,769,391,48,
            755,93,249,766,86,48,598,767,48,587,
            487,4,741,152,153,154,145,140,142,775,
            13,4,741,152,153,154,145,140,142,753,
            773,230,229,622,20,21,22,23,24,25,
            26,4,741,152,153,154,145,140,142,753,
            750,769,287,741,152,153,154,687,86,7,
            3,786,4,741,152,153,154,145,140,142,
            753,750,769,287,741,152,153,154,147,86,
            50,14,787,4,741,152,153,154,145,140,
            142,753,750,699,4,741,152,153,154,145,
            140,142,753,750,769,676,449,674,698,549,
            115,87,4,741,152,153,154,145,140,142,
            753,750,699,4,741,152,153,154,145,140,
            142,753,750,748,48,755,691,60,4,741,
            152,153,154,145,140,142,753,750,754,4,
            741,152,153,154,145,140,142,753,750,759,
            4,741,152,153,154,145,140,142,753,750,
            760,4,741,152,153,154,145,140,142,753,
            750,761,395,741,152,153,154,145,140,142,
            753,750,759,4,741,152,153,154,145,140,
            142,753,750,770,4,741,152,153,154,145,
            140,142,753,750,778,4,741,152,153,154,
            145,140,142,753,750,779,4,741,152,153,
            154,145,140,142,753,750,780,4,741,152,
            153,154,145,140,142,753,750,782,4,741,
            152,153,154,145,140,142,753,750,788,4,
            741,152,153,154,145,140,142,753,774,4,
            741,152,153,154,145,140,142,776,4,741,
            152,153,154,145,140,142,777,4,741,152,
            153,154,145,141,142,4,741,152,153,154,
            145,144,142,4,741,152,153,154,145,143,
            142,287,741,152,153,154,146,81,672,637,
            563,83,747,99,98,83,747,99,98,562,
            623,83,747,99,98,40,113,48,755,91,
            112,83,747,99,98,290,111,120,672,637,
            563,211,747,99,98,76,110,48,755,692,
            623,159,672,637,563,325,104,207,672,637,
            563,48,123,386,623,1,672,637,563,439,
            623,246,672,637,563,41,77,702,623,285,
            672,637,563,431,623,338,672,637,563,471,
            466,53,623,392,672,637,563,330,623,1,
            505,9,79,48,41,472,623,75,56,471,
            250,48,123,58,783,562,578,172,479,578,
            505,41,77,466,53,781,39,766,551,593,
            2,559,48,41,729,48,123,729,42,479,
            578,75,479,479,168,48,673,50,80,785,
            535,790,573,543,734,40,55,431,729,48,
            585,48,589,48,116,48,276,48,685,479,
            63,341,48,650,48,95,48,690,48,89,
            683,48,88,494,499,496,595,479,48,703,
            48,63,435,479,48,756,48,757,700,48,
            708,48,715,531,707,449,363,48,117,114,
            431,431,431,48,764,517,48,765,479,123,
            531,521,336,446,374,385,396,531,523,716,
            48,49,531,720,723,524,531,48,124,537,
            572,48,724,572,479,48,54,479,545,479,
            572,531,48,68,484,730,48,791,731,596,
            789,502,599,565,48,69,503,556,57,620,
            161,407,30,470,162,559,206,563,27,382,
            377,498,327,538,569,570,506,510,46,332,
            519,552,549,432,465,571,573,577,525,530,
            534,511,541,324,580,539,547,548,555,581,
            388,441,794,794
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,0,1,2,0,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            0,1,39,4,41,0,43,0,1,0,
            5,6,46,50,52,53,0,0,2,3,
            60,4,0,61,62,63,64,65,66,67,
            68,69,70,71,0,1,0,74,72,73,
            0,1,0,1,44,40,86,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            1,39,0,41,2,3,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,0,1,
            0,0,82,2,3,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,75,76,77,
            78,79,80,0,44,0,0,1,48,49,
            0,1,93,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,0,1,42,0,39,
            92,41,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,0,1,0,1,0,0,
            84,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,0,0,39,0,41,4,43,
            85,0,43,2,3,0,50,0,1,4,
            0,6,94,59,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,0,51,2,3,
            57,0,47,2,3,0,0,0,57,4,
            0,0,1,6,0,1,2,60,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            0,0,51,39,0,41,46,43,0,5,
            0,0,52,53,50,0,52,53,0,4,
            59,61,62,63,64,65,66,67,68,69,
            70,71,72,73,0,0,1,2,74,0,
            0,0,42,83,4,44,42,87,0,48,
            49,91,4,0,54,55,56,4,54,55,
            56,43,47,0,1,0,1,0,58,2,
            3,0,0,58,39,0,5,5,44,0,
            0,6,48,49,45,6,6,47,0,81,
            2,3,0,0,0,47,2,3,90,0,
            0,2,3,0,4,2,3,0,0,46,
            0,46,2,3,6,40,0,0,0,40,
            40,0,6,6,0,0,2,3,0,88,
            5,0,0,5,42,42,5,5,0,0,
            0,0,0,5,5,4,0,0,40,0,
            0,0,0,0,4,0,40,40,51,41,
            39,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,45,0,45,39,0,
            0,45,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,89,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            794,950,794,794,950,481,12,858,670,541,
            668,866,253,527,507,304,169,656,652,661,
            658,665,663,654,860,861,667,308,293,649,
            511,501,495,491,647,645,643,222,859,4,
            794,950,943,801,944,151,949,794,950,8,
            157,123,810,352,681,679,97,18,191,429,
            867,801,103,837,838,839,840,841,842,828,
            829,830,831,832,57,950,794,243,809,811,
            794,950,794,746,872,123,727,858,670,541,
            668,866,253,527,507,304,169,656,652,661,
            658,665,663,654,860,861,667,308,293,649,
            511,501,495,491,647,645,643,222,859,794,
            950,896,794,895,191,429,858,670,541,668,
            866,253,527,507,304,169,656,652,661,658,
            665,663,654,860,861,667,308,293,649,511,
            501,495,491,647,645,643,222,859,794,950,
            133,96,641,191,429,858,670,541,668,866,
            253,527,507,304,169,656,652,661,658,665,
            663,654,860,861,667,308,293,649,511,501,
            495,491,647,645,643,222,859,921,923,920,
            922,924,925,794,448,794,794,950,439,181,
            105,746,903,858,670,541,668,866,253,527,
            507,304,169,656,652,661,658,665,663,654,
            860,861,667,308,293,649,511,501,495,491,
            647,645,643,222,859,794,950,570,794,896,
            865,895,858,670,541,668,866,253,527,507,
            304,169,656,652,661,658,665,663,654,860,
            861,667,308,293,649,511,501,495,491,647,
            645,643,222,859,794,950,794,950,794,794,
            725,858,670,541,668,866,253,527,507,304,
            169,656,652,661,658,665,663,654,860,861,
            667,308,293,649,511,501,495,491,647,645,
            643,222,859,794,10,943,794,944,801,949,
            615,794,619,191,429,794,319,794,950,800,
            794,717,793,732,858,670,541,668,866,253,
            527,507,304,169,656,652,661,658,665,663,
            654,860,861,667,308,293,649,511,501,495,
            491,647,645,643,222,859,108,465,191,429,
            603,794,799,191,429,19,794,70,418,801,
            58,794,950,717,794,950,481,868,858,670,
            541,668,866,253,527,507,304,169,656,652,
            661,658,665,663,654,860,861,667,308,293,
            649,511,501,495,491,647,645,643,222,859,
            794,135,942,943,794,944,810,949,794,157,
            794,794,11,11,352,794,762,763,794,800,
            736,11,11,11,11,11,11,11,11,11,
            11,11,809,811,134,794,950,784,243,136,
            3,794,912,625,800,448,912,639,794,439,
            181,178,800,59,913,914,915,801,913,914,
            915,949,799,794,950,794,950,107,744,191,
            429,151,100,721,845,794,157,156,448,794,
            794,717,439,181,457,264,601,799,106,175,
            191,429,31,28,94,799,191,429,515,92,
            58,191,429,90,801,191,429,794,794,693,
            132,696,191,429,612,916,794,794,794,919,
            876,794,264,264,85,794,191,429,794,710,
            157,81,794,591,771,772,555,583,794,794,
            139,61,138,211,232,801,137,58,827,794,
            62,794,794,794,801,794,878,877,473,823,
            826,794,794,794,794,794,794,794,794,794,
            794,794,794,794,794,794,794,794,794,794,
            794,794,794,794,794,457,794,457,846,794,
            794,457,794,794,794,794,794,794,794,794,
            794,794,794,794,794,794,794,794,794,794,
            794,794,794,794,794,794,794,794,794,794,
            794,794,794,794,794,794,794,794,794,794,
            794,794,794,794,794,794,282
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            78,91,34,32,34,146,37,382,382,93,
            33,94,382,113,146,146,146,1,4,93,
            382,146,22,146,146,146,24,24,24,24,
            382,152,152,146,20,20,146,146,146,146,
            146,146,146,146,148,148,20,382,146,146,
            146,151,381,382,87,146,146,146,146,314,
            89,146,20,357,37,37,378,30,157,20,
            20,379,385,22,22,18,360,359,385,152,
            30,152,152,146,28,146,28,382,369,193,
            229,233,20,20,237,146,155,30,273,273,
            390,158,385,385,379,20,20,392,392,20,
            20,20,20,20,146,20,20,30,75,30,
            320,20,194,146,277,146,410,402,402,394,
            405,385,238,83,146,85,26,360,360,20,
            20,359,359,359,385,385,385,20,402,20,
            39,385,278,382,411,20,20,146,407,85,
            402,402,75,402,382,382,20,279,410,412,
            400,83,146,321,409,146,411,146,322,229,
            412,146,235,146
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            72,46,73,61,62,63,64,65,66,67,
            68,69,70,71,52,53,0,53,52,2,
            74,43,50,1,39,41,0,47,4,5,
            0,94,4,81,90,0,43,0,1,8,
            7,38,24,25,10,9,26,11,12,21,
            22,19,20,13,14,15,16,17,23,27,
            28,18,29,30,31,32,33,34,35,36,
            37,60,86,0,44,1,0,81,90,47,
            4,0,2,1,39,0,88,0,47,4,
            94,0,4,61,62,63,64,65,66,52,
            53,67,68,69,70,71,72,46,73,87,
            83,91,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,82,1,0,1,46,0,
            5,54,55,56,42,0,4,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            93,0,4,1,8,7,38,24,25,10,
            9,26,11,12,21,22,19,20,13,14,
            15,16,17,23,27,28,18,29,30,31,
            32,33,34,35,36,37,92,0,47,4,
            6,0,47,4,58,0,4,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            84,0,47,4,42,0,4,89,1,8,
            7,38,24,25,10,9,26,11,12,21,
            22,19,20,13,14,15,16,17,23,27,
            28,18,29,30,31,32,33,34,35,36,
            37,85,0,82,84,85,59,92,93,86,
            4,1,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,60,0,1,5,45,6,
            51,40,57,47,4,44,48,49,77,75,
            78,76,79,80,3,2,0,5,39,41,
            1,47,4,0,47,4,3,2,0,3,
            2,51,0,44,48,49,57,45,5,3,
            2,40,6,0,3,2,57,0,85,4,
            89,1,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,59,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            42,27,13,27,35,26,27,43,43,52,
            27,4,43,23,26,26,26,8,10,27,
            43,26,26,26,26,26,28,28,28,28,
            43,40,40,26,26,26,26,26,25,25,
            25,25,26,26,26,26,15,43,33,26,
            26,40,50,43,27,26,26,26,26,27,
            43,26,26,27,21,21,27,27,6,26,
            26,61,27,26,26,26,27,27,27,40,
            27,40,40,26,31,26,31,43,63,6,
            43,43,1,26,6,26,27,27,65,67,
            27,23,27,27,28,26,26,27,27,26,
            26,26,26,26,33,26,26,27,38,27,
            6,26,23,26,69,26,69,27,27,27,
            27,27,23,45,48,27,27,27,27,26,
            26,27,27,27,27,27,27,1,27,1,
            23,27,54,43,54,18,26,26,27,27,
            27,27,57,27,43,43,15,23,69,23,
            27,46,59,6,27,33,54,26,23,27,
            23,26,27,26
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            1,20,0,34,35,12,0,22,0,45,
            47,0,29,0,1,25,0,1,17,0,
            4,0,3,13,2,1,0,1,15,0,
            26,0,16,0,30,32,0,50,0,14,
            0,28,11,0,48,24,0,46,0,49,
            0,31,0,12,18,0,27,0,23,0,
            51,0,52,0,44,0,43,0,19,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            96,3,2,99,19,1,28,29,30,32,
            36,37,40,41,42,43,45,46,62,63,
            64,65,66,71,72,73,75,76,81,83,
            84,85,86,87,88,90,91,93,97,20,
            98,13,100,4,22,80,95,5,6,17,
            18,55,56,14,15,16,21,33,34,39,
            47,48,49,50,51,52,57,58,59,60,
            61,69,89,92,7,8,9,10,11,12,
            24,25,26,27,31,38,53,54,67,68,
            70,74,82,94,35,44,77,78,79,101
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            104,125,128,129,130,134,0,133,132,124,
            105,0,116,126,127,119,123,117,0,122,
            0,108,112,115,118,0,120,102,0,103,
            0,106,0,107,109,0,0,0,0,0,
            0,0,0,0,110,111,113,114,0,121,
            0,131,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            23,58,49,71,33,33,6,12,43,1,
            80,18
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            31,66,55,77,31,38,10,16,47,4,
            83,20
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            13,13,13,13,13,13,3,13,13,5,
            12,17
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            60,59,85,59,60,86,40,93,92,51,
            47,57
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            45,45,45,45,45,45,1,45,45,15,
            55,40
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            110,50,0,51,0,120,5,101,0,40,
            0,112,111,29,0,93,0,110,0,57,
            110,0,112,111,86,112,111,125,12,0,
            60,0,112,111,125,12,0,86,111,112,
            60,0,112,111,26,0,92,0,112,119,
            111,116,9,0,85,116,0,112,119,111,
            101,58,101,10,0,59,101,58,101,0,
            112,119,111,101,10,0,59,101,0,113,
            112,0,111,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            573,565,559,551,545,537,531,521,517,511,
            501,495,491,487,282,418,473,465,407,396,
            385,374,457,448,439,181,429,191,363,352,
            481,243,341,330,319,253,308,293,222,264,
            232,211,157,0,573,565,559,551,545,537,
            531,517,487,0,620,731,599,596,716,707,
            700,683,168,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,128,121,111,129,81,90,101,43,111,
            111,131,135,112,91,83,87,134,133,111,
            113,82,37,36,35,34,33,32,31,30,
            29,103,102,18,28,27,23,17,16,15,
            14,13,20,19,22,21,12,26,9,10,
            8,101,101,101,101,147,145,53,52,111,
            101,105,50,101,101,101,1,101,111,114,
            114,101,110,74,2,50,109,108,110,101,
            101,102,102,46,101,46,101,125,110,111,
            116,101,5,114,111,88,101,101,101,101,
            110,112,110,110,151,2,3,52,53,49,
            48,44,45,114,5,114,114,101,5,101,
            111,152,112,6,111,58,111,116,120,101,
            110,110,112,42,5,42,42,109,109,51,
            51,108,108,108,110,110,110,5,150,5,
            112,110,119,101,119,6,57,84,124,2,
            146,120,6,120,86,118,89,112,111,112,
            110,57,6,111,111,85,119,59,112,116,
            112,59,101,58
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            ",",
            "+",
            "-",
            "*",
            "/",
            "^",
            ">",
            ">=",
            "<",
            "<=",
            "==",
            "!=",
            "=",
            "+=",
            "-=",
            "*=",
            "(",
            ")",
            "[",
            "]",
            ":",
            "**",
            "$empty",
            "sial",
            "endsial",
            "proc",
            "endproc",
            "return",
            "call",
            "pardo",
            "endpardo",
            "do",
            "in",
            "enddo",
            "cycle",
            "exit",
            "if",
            "else",
            "endif",
            "put",
            "get",
            "prepare",
            "request",
            "prequest",
            "collective",
            "execute",
            "aoindex",
            "moindex",
            "moaindex",
            "mobindex",
            "index",
            "laindex",
            "subindex",
            "of",
            "scalar",
            "int",
            "static",
            "temp",
            "local",
            "distributed",
            "served",
            "create",
            "delete",
            "allocate",
            "deallocate",
            "destroy",
            "where",
            "import",
            "predefined",
            "special",
            "server_barrier",
            "sip_barrier",
            "section",
            "endsection",
            "print",
            "println",
            "print_index",
            "print_scalar",
            "print_int",
            "contiguous",
            "gpu_on",
            "gpu_off",
            "gpu_allocate",
            "gpu_free",
            "gpu_put",
            "gpu_get",
            "set_persistent",
            "restore_persistent",
            "sparse",
            "assert_same",
            "broadcast_from",
            "sqrt",
            "stop",
            "EOF_TOKEN",
            "SINGLE_LINE_COMMENT",
            "IDENTIFIER",
            "INTLIT",
            "DOUBLELIT",
            "EOL",
            "STRINGLIT",
            "ERROR_TOKEN",
            "Sial",
            "Program",
            "Ident",
            "EOLs",
            "ImportProg",
            "Modifiers",
            "Modifier",
            "Dec",
            "ArrayKind",
            "DimensionList",
            "Dimension",
            "IndexKind",
            "Range",
            "RangeVal",
            "Statement",
            "WhereClause",
            "RelationalExpression",
            "Indices",
            "AllocIndex",
            "AllocIndexList",
            "ContiguousIndexRangeExprList",
            "ContiguousIndexRangeExpr",
            "Expression",
            "DataBlock",
            "AssignOp",
            "Arg",
            "ContiguousDataBlock",
            "StringLiteral",
            "Primary",
            "RelOp",
            "Term",
            "ExponentExpression",
            "CastExpression"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
