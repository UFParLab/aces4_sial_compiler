package sial.parser;

public class SialParserprs implements lpg.runtime.ParseTable, SialParsersym {
    public final static int ERROR_SYMBOL = 100;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 11;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 12;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 28;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 179;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 100;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 907;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 155;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 53;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 153;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 485;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 94;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 94;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 751;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 752;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SialParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,0,1,0,
            1,0,0,0,0,1,0,0,1,0,
            1,0,1,0,0,0,0,0,0,0,
            0,0,1,1,0,0,0,0,1,0,
            1,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            6,42,45,47,48,52,53,51,50,7,
            41,9,31,43,44,35,40,32,34,39,
            3,13,26,29,33,36,37,2,4,5,
            8,10,11,12,14,15,16,17,18,19,
            20,21,22,23,24,25,27,28,30,38,
            46,49,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            3,8,0,1,1,1,2,0,2,3,
            0,1,1,2,1,1,1,0,3,1,
            1,1,1,1,1,1,4,0,2,4,
            0,2,6,1,1,1,1,1,1,3,
            1,5,1,1,1,1,1,1,4,3,
            1,2,1,6,3,1,0,0,3,2,
            0,3,2,1,1,1,1,7,11,7,
            4,1,5,8,3,3,1,1,1,3,
            0,3,6,6,3,1,3,2,2,4,
            2,4,2,4,2,2,2,1,1,1,
            1,1,0,2,3,3,3,4,2,2,
            2,2,3,3,2,3,1,1,1,1,
            4,1,3,4,1,1,1,1,1,1,
            3,1,3,3,1,3,3,3,1,3,
            1,4,4,1,2,2,3,1,1,1,
            1,1,1,1,1,-100,0,0,0,0,
            0,0,0,0,0,-12,0,-38,0,0,
            -64,0,0,-19,0,0,-2,0,-108,0,
            0,0,0,0,0,0,0,0,-104,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-143,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-39,0,0,-4,0,-6,0,0,-145,
            0,0,0,0,0,0,0,0,0,-7,
            0,-122,-5,-40,0,0,0,-15,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            0,0,-155,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-41,0,0,0,
            -162,0,0,0,0,0,0,0,0,0,
            -32,0,-34,0,0,0,0,0,0,0,
            0,0,-51,0,0,0,-35,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,0,0,0,0,0,0,0,-68,0,
            -69,0,0,0,0,0,0,0,0,0,
            0,0,-74,0,0,0,0,0,0,0,
            0,0,-88,0,-92,0,0,0,0,0,
            0,0,0,0,0,0,-112,0,0,0,
            0,0,0,0,0,0,-93,0,-119,0,
            0,0,0,0,0,0,0,0,0,0,
            -156,0,0,0,0,0,0,0,0,0,
            -11,0,-105,0,0,0,0,0,0,0,
            0,0,-109,0,0,0,0,0,0,0,
            0,-110,0,0,0,0,0,0,0,0,
            -111,0,0,0,0,0,0,0,-137,0,
            0,0,0,0,0,0,-138,0,0,0,
            0,0,0,0,-23,0,0,0,0,0,
            -72,0,0,0,0,0,-73,0,0,0,
            0,0,-27,0,0,0,-28,0,0,0,
            -29,0,0,0,-1,-52,0,0,-48,0,
            -20,0,-16,0,0,0,-30,0,0,0,
            -103,0,0,0,0,0,-14,0,0,-116,
            0,0,0,-8,-54,0,-101,0,0,0,
            -120,0,0,0,-127,0,0,-128,0,0,
            -129,0,-18,0,0,-59,0,0,-63,-146,
            0,0,-163,0,0,-165,0,0,-174,0,
            0,0,0,0,0,0,-65,-60,0,0,
            0,0,-158,0,-176,0,0,0,-91,0,
            -113,0,0,-148,-150,0,0,0,0,-114,
            0,0,-166,0,0,0,0,-167,0,0,
            -172,0,0,-171,0,-3,-10,-9,-17,0,
            -66,-13,0,-21,-22,0,0,0,0,0,
            0,0,-31,0,-24,0,-25,0,-26,0,
            -33,0,0,-70,0,-36,0,0,-37,0,
            -42,0,-43,0,-44,0,-45,0,-47,-49,
            0,-50,0,-53,-55,0,-56,0,0,-57,
            0,-58,0,0,-61,0,-78,-80,-81,-82,
            0,-83,-84,0,-85,-86,-87,-89,-90,-97,
            0,0,0,-98,0,0,-118,0,0,-94,
            0,-121,0,-123,0,-124,-149,0,0,-160,
            0,-151,0,-161,-169,-164,0,-173,0,0,
            -177,0,-67,0,0,-71,0,-179,0,-75,
            -76,-77,-79,0,0,-95,0,-96,0,-99,
            -102,-106,-107,-115,-117,-125,-126,-130,-131,-132,
            -133,-134,-135,-136,-139,-140,-141,-142,-144,-147,
            -152,-153,-154,-157,-159,-168,-170,-175,-178,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            28,28,30,21,21,10,10,10,29,29,
            32,33,33,34,34,22,22,22,31,31,
            35,35,35,35,35,35,35,36,43,43,
            40,44,44,37,45,45,45,45,45,46,
            46,23,38,47,47,47,47,47,47,39,
            48,24,24,24,41,42,49,49,12,12,
            18,19,19,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,27,27,50,
            50,26,26,13,13,17,20,20,13,13,
            13,13,13,13,13,13,13,13,15,15,
            15,15,15,51,51,13,13,13,13,13,
            13,13,13,13,13,13,13,14,14,14,
            14,2,16,16,3,52,52,52,52,52,
            52,25,11,11,11,9,9,9,9,8,
            8,6,6,6,7,7,7,5,5,5,
            5,5,5,5,4,1,4,731,151,152,
            153,144,139,141,711,710,391,732,48,713,
            93,513,726,86,3,114,730,378,507,4,
            539,151,152,153,144,139,141,735,13,4,
            539,151,152,153,144,139,141,711,733,174,
            533,602,20,21,22,23,24,25,26,4,
            539,151,152,153,144,139,141,711,710,647,
            732,645,48,713,658,123,86,48,514,744,
            4,539,151,152,153,144,139,141,711,710,
            205,732,569,390,48,713,91,86,48,486,
            745,4,539,151,152,153,144,139,141,711,
            710,574,667,4,539,151,152,153,144,139,
            141,711,710,1,732,9,666,48,713,659,
            87,4,539,151,152,153,144,139,141,711,
            710,287,667,4,539,151,152,153,144,139,
            141,711,710,441,706,331,60,4,539,151,
            152,153,144,139,141,711,710,355,712,4,
            539,151,152,153,144,139,141,711,710,546,
            720,4,539,151,152,153,144,139,141,711,
            710,517,721,395,539,151,152,153,144,139,
            141,711,710,546,720,4,539,151,152,153,
            144,139,141,711,710,521,727,4,539,151,
            152,153,144,139,141,711,710,546,738,4,
            539,151,152,153,144,139,141,711,710,525,
            740,4,539,151,152,153,144,139,141,711,
            710,249,746,4,539,151,152,153,144,139,
            141,711,734,4,539,151,152,153,144,139,
            141,736,4,539,151,152,153,144,139,141,
            737,4,539,151,152,153,144,140,141,4,
            539,151,152,153,144,143,141,4,539,151,
            152,153,144,142,141,161,539,151,152,153,
            655,161,539,151,152,153,146,161,539,151,
            152,153,145,83,703,99,98,83,703,99,
            98,83,703,99,98,473,75,56,112,48,
            122,502,111,48,644,225,110,83,703,99,
            98,449,703,99,98,668,596,81,303,291,
            485,77,109,177,481,489,104,120,303,291,
            604,159,303,291,597,207,303,291,465,53,
            604,48,41,7,604,55,541,79,604,389,
            1,303,291,246,303,291,285,303,291,338,
            303,291,741,604,39,14,604,513,473,604,
            739,113,604,485,77,392,303,291,225,48,
            122,48,713,92,570,570,42,743,604,2,
            48,713,90,465,53,726,543,546,48,41,
            80,570,694,694,48,122,41,198,481,48,
            515,542,481,565,481,48,558,50,401,694,
            748,40,491,481,536,48,115,48,171,48,
            557,48,624,329,50,243,48,95,166,48,
            657,48,89,48,88,164,662,289,665,481,
            48,669,48,63,481,48,716,48,718,353,
            48,670,48,674,377,48,116,287,287,287,
            48,724,552,48,725,552,481,431,203,330,
            551,367,571,580,554,501,677,546,242,686,
            48,49,48,123,48,687,569,481,76,540,
            481,75,48,54,481,546,569,696,48,68,
            695,48,749,543,747,575,40,549,48,69,
            288,334,58,545,30,591,526,27,553,379,
            381,324,440,515,555,562,487,475,522,535,
            492,46,382,468,470,559,563,565,499,494,
            521,574,575,524,531,533,536,578,57,579,
            752,752
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,0,1,2,0,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            0,2,39,4,41,0,43,0,1,0,
            5,6,46,50,52,53,0,0,0,2,
            60,4,6,61,62,63,64,65,66,67,
            68,69,70,71,0,1,0,74,72,73,
            0,1,0,1,0,40,86,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            1,39,0,41,0,3,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,0,1,
            0,1,82,0,1,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,0,0,39,
            3,41,0,43,0,3,0,1,6,46,
            50,0,93,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,0,1,43,0,47,
            92,3,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,0,1,0,0,0,1,
            84,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,0,0,2,0,4,42,0,
            85,44,3,0,46,48,49,0,1,0,
            54,55,56,59,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,47,0,45,0,
            0,0,2,2,4,4,0,58,0,0,
            0,0,1,5,0,1,2,60,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            0,51,2,39,4,41,46,43,57,0,
            0,0,52,53,50,5,52,53,0,1,
            59,61,62,63,64,65,66,67,68,69,
            70,71,72,73,0,1,2,0,74,0,
            81,94,0,83,0,3,2,87,4,90,
            0,91,42,3,0,1,0,39,0,41,
            51,0,6,0,54,55,56,6,0,6,
            2,0,4,39,3,75,76,77,78,79,
            80,44,0,44,0,48,49,48,49,47,
            0,0,2,0,4,0,40,47,44,6,
            0,40,0,40,0,0,6,2,6,4,
            0,0,0,3,0,0,5,5,3,5,
            0,0,0,0,0,43,5,5,0,5,
            39,0,0,40,0,51,5,42,0,0,
            40,3,40,0,0,41,88,0,0,0,
            3,0,0,0,0,0,0,0,0,0,
            0,0,42,0,0,42,0,0,0,0,
            0,0,0,45,0,0,0,45,0,45,
            0,0,0,39,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            57,0,0,0,0,0,58,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,89,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            752,907,752,752,907,467,12,816,642,489,
            640,824,251,277,244,222,168,629,621,633,
            631,637,635,626,818,819,639,307,293,613,
            497,481,477,473,619,617,615,455,817,97,
            8,189,900,403,901,150,906,752,907,103,
            156,122,768,343,652,650,70,96,752,189,
            825,403,682,795,796,797,798,799,800,786,
            787,788,789,790,57,907,752,461,767,769,
            752,907,752,601,752,122,690,816,642,489,
            640,824,251,277,244,222,168,629,621,633,
            631,637,635,626,818,819,639,307,293,613,
            497,481,477,473,619,617,615,455,817,752,
            907,854,4,853,752,759,816,642,489,640,
            824,251,277,244,222,168,629,621,633,631,
            637,635,626,818,819,639,307,293,613,497,
            481,477,473,619,617,615,455,817,752,907,
            752,907,605,752,907,816,642,489,640,824,
            251,277,244,222,168,629,621,633,631,637,
            635,626,818,819,639,307,293,613,497,481,
            477,473,619,617,615,455,817,18,752,900,
            759,901,752,906,752,758,752,907,682,660,
            319,752,860,816,642,489,640,824,251,277,
            244,222,168,629,621,633,631,637,635,626,
            818,819,639,307,293,613,497,481,477,473,
            619,617,615,455,817,752,907,598,10,757,
            823,759,816,642,489,640,824,251,277,244,
            222,168,629,621,633,631,637,635,626,818,
            819,639,307,293,613,497,481,477,473,619,
            617,615,455,817,752,907,752,132,752,907,
            692,816,642,489,640,824,251,277,244,222,
            168,629,621,633,631,637,635,626,818,819,
            639,307,293,613,497,481,477,473,619,617,
            615,455,817,107,752,189,752,403,869,752,
            594,422,758,135,663,413,179,752,907,752,
            870,871,872,698,816,642,489,640,824,251,
            277,244,222,168,629,621,633,631,637,635,
            626,818,819,639,307,293,613,497,481,477,
            473,619,617,615,455,817,757,752,431,752,
            752,752,189,189,403,403,752,684,150,752,
            58,752,907,156,752,907,467,826,816,642,
            489,640,824,251,277,244,222,168,629,621,
            633,631,637,635,626,818,819,639,307,293,
            613,497,481,477,473,619,617,615,455,817,
            752,899,189,900,403,901,768,906,391,752,
            752,752,11,11,343,569,722,723,105,601,
            701,11,11,11,11,11,11,11,11,11,
            11,11,767,769,752,907,742,134,461,133,
            227,751,3,493,106,758,189,599,403,240,
            752,248,869,758,752,907,752,854,752,853,
            439,752,682,752,870,871,872,263,94,563,
            189,19,403,803,759,878,880,877,879,881,
            882,422,752,422,752,413,179,413,179,757,
            131,752,189,752,403,752,873,757,830,588,
            752,876,752,834,752,85,263,189,263,403,
            59,100,752,759,752,58,155,156,759,569,
            31,81,752,28,752,906,510,531,138,209,
            784,752,137,785,136,447,230,528,61,58,
            836,759,835,752,752,781,680,62,752,752,
            759,752,752,752,752,752,752,752,752,752,
            752,752,728,752,752,729,752,752,752,752,
            752,752,752,431,752,752,752,431,752,431,
            752,752,752,804,752,752,752,752,752,752,
            752,752,752,752,752,752,752,752,752,752,
            583,752,752,752,752,752,708,752,752,752,
            752,752,752,752,752,752,752,752,752,752,
            752,752,752,752,752,752,752,752,281
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            169,302,3,1,3,357,6,363,363,304,
            2,305,363,324,357,357,357,183,186,304,
            363,357,91,357,357,357,93,93,93,93,
            363,46,357,89,89,357,357,357,357,357,
            357,357,357,366,366,89,363,357,357,357,
            45,362,363,177,357,357,357,357,200,300,
            357,89,243,6,6,359,371,51,89,360,
            385,91,91,87,246,245,385,46,371,46,
            46,357,369,357,369,363,255,97,373,377,
            357,89,133,357,49,371,381,381,390,89,
            52,385,360,89,89,392,392,89,89,89,
            89,89,357,357,371,174,371,206,89,98,
            357,8,357,410,402,385,134,179,357,181,
            95,402,394,405,246,246,89,89,245,245,
            245,385,89,402,89,264,385,9,363,411,
            357,407,181,402,89,89,402,174,402,363,
            363,89,10,410,412,179,357,400,207,409,
            357,411,357,208,373,412,357,379,357
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            94,3,81,90,0,43,0,3,89,1,
            8,7,38,24,25,10,9,26,11,12,
            21,22,19,20,13,14,15,16,17,23,
            27,28,18,29,30,31,32,33,34,35,
            36,37,85,0,5,54,55,56,42,0,
            3,1,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,93,0,53,52,2,74,
            43,50,1,39,41,0,3,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            92,0,3,1,8,7,38,24,25,10,
            9,26,11,12,21,22,19,20,13,14,
            15,16,17,23,27,28,18,29,30,31,
            32,33,34,35,36,37,84,0,81,90,
            47,3,0,44,1,0,88,0,2,1,
            39,0,72,46,73,61,62,63,64,65,
            66,67,68,69,70,71,52,53,0,82,
            84,85,59,92,93,86,3,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            60,0,1,5,45,6,51,40,57,47,
            3,44,48,49,77,75,78,76,79,80,
            4,2,0,1,8,7,38,24,25,10,
            9,26,11,12,21,22,19,20,13,14,
            15,16,17,23,27,28,18,29,30,31,
            32,33,34,35,36,37,60,86,0,47,
            3,94,0,3,61,62,63,64,65,66,
            52,53,67,68,69,70,71,72,46,73,
            87,83,91,8,7,38,24,25,10,9,
            26,11,12,21,22,19,20,13,14,15,
            16,17,23,27,28,18,29,30,31,32,
            33,34,35,36,37,82,1,0,5,39,
            41,1,47,3,0,1,46,0,47,3,
            5,0,47,3,6,0,47,3,58,0,
            47,3,42,0,47,3,4,2,0,4,
            2,51,0,44,48,49,57,45,5,4,
            2,40,6,0,4,2,57,0,85,3,
            89,1,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,59,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            29,39,56,39,15,38,39,30,30,58,
            39,4,30,36,38,38,38,47,10,39,
            30,38,38,38,38,38,26,26,26,26,
            30,24,38,38,38,38,38,37,37,37,
            37,38,38,38,38,18,30,34,38,38,
            24,32,30,39,38,38,38,38,39,30,
            38,38,39,8,8,39,39,6,38,60,
            39,38,38,38,39,39,39,24,39,24,
            24,38,62,38,62,30,64,6,30,30,
            34,38,6,38,39,39,66,68,39,1,
            36,39,26,38,38,39,39,38,38,38,
            38,38,37,37,39,40,39,6,38,36,
            38,13,38,13,39,39,36,42,45,39,
            39,39,39,39,39,39,38,38,39,39,
            39,39,1,39,1,36,39,51,30,51,
            38,39,39,39,21,38,39,49,39,30,
            30,18,36,13,36,43,54,39,6,39,
            34,51,38,36,39,36,38,39,38
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            1,20,0,34,35,12,0,4,0,45,
            47,0,19,0,30,32,0,1,25,0,
            1,17,0,14,0,1,15,0,28,10,
            0,49,0,16,0,13,2,1,0,50,
            0,48,24,0,46,0,22,0,27,0,
            12,18,0,23,0,29,0,31,0,51,
            0,26,0,52,0,44,0,43,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            96,3,99,2,19,1,28,29,30,32,
            36,37,40,41,42,43,45,46,62,63,
            64,65,66,71,72,73,75,76,81,83,
            84,85,86,87,88,90,91,93,97,20,
            98,13,100,4,22,80,95,5,6,17,
            18,55,56,14,15,16,21,33,34,39,
            47,48,49,50,51,52,57,58,59,60,
            61,69,89,92,7,8,9,10,11,12,
            24,25,26,27,31,38,53,54,67,68,
            70,74,82,94,35,44,77,78,79,101
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            104,125,0,128,129,133,0,132,131,105,
            124,0,116,126,127,119,123,117,0,122,
            0,108,112,115,118,0,120,102,0,103,
            0,106,0,107,109,0,0,0,0,0,
            0,0,0,0,110,111,113,114,0,121,
            0,130,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            23,58,49,71,33,33,6,12,43,1,
            80,18
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            31,66,55,77,31,38,10,16,47,4,
            83,20
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            13,13,13,13,13,13,3,13,13,5,
            12,17
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            60,59,85,59,60,86,40,93,92,51,
            47,57
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            33,33,33,33,33,33,1,33,33,6,
            43,28
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            111,50,0,51,0,120,5,101,0,40,
            0,112,110,29,0,93,0,111,0,57,
            111,0,112,110,86,112,110,125,12,0,
            60,0,112,110,125,12,0,86,110,112,
            60,0,112,110,26,0,92,0,112,119,
            110,116,9,0,85,116,0,112,119,110,
            101,58,101,10,0,59,101,58,101,0,
            112,119,110,101,10,0,59,101,0,113,
            112,0,110,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            501,497,481,477,473,281,391,447,439,379,
            367,431,422,413,179,403,189,355,343,467,
            461,331,319,251,307,293,455,263,230,209,
            156,0,565,549,546,543,540,525,521,517,
            507,0,591,695,575,574,677,377,353,329,
            166,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,128,121,110,129,81,90,101,43,110,
            110,131,135,112,91,83,87,134,133,110,
            113,82,37,36,35,34,33,32,31,30,
            29,102,18,28,27,23,17,16,15,14,
            13,20,19,22,21,12,26,9,10,8,
            101,101,101,101,147,145,53,52,110,101,
            105,50,101,101,101,1,101,110,114,101,
            111,74,2,50,109,108,111,101,101,102,
            102,46,101,46,101,125,111,110,116,101,
            5,114,110,88,101,101,101,101,111,5,
            112,111,151,2,4,52,53,49,48,44,
            45,114,114,114,101,5,101,110,152,112,
            6,110,58,110,116,111,112,42,5,42,
            42,120,101,111,109,109,51,51,108,108,
            108,111,5,150,5,112,111,119,101,119,
            84,124,2,146,6,57,120,6,120,86,
            118,89,112,110,112,57,6,111,110,110,
            85,119,59,112,116,112,59,101,58
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            ",",
            "+",
            "-",
            "*",
            "/",
            "^",
            ">",
            ">=",
            "<",
            "<=",
            "==",
            "!=",
            "=",
            "+=",
            "-=",
            "*=",
            "(",
            ")",
            "[",
            "]",
            ":",
            "**",
            "$empty",
            "sial",
            "endsial",
            "proc",
            "endproc",
            "return",
            "call",
            "pardo",
            "endpardo",
            "do",
            "in",
            "enddo",
            "cycle",
            "exit",
            "if",
            "else",
            "endif",
            "put",
            "get",
            "prepare",
            "request",
            "prequest",
            "collective",
            "execute",
            "aoindex",
            "moindex",
            "moaindex",
            "mobindex",
            "index",
            "laindex",
            "subindex",
            "of",
            "scalar",
            "int",
            "static",
            "temp",
            "local",
            "distributed",
            "served",
            "create",
            "delete",
            "allocate",
            "deallocate",
            "destroy",
            "where",
            "import",
            "predefined",
            "special",
            "server_barrier",
            "sip_barrier",
            "section",
            "endsection",
            "print",
            "println",
            "print_index",
            "print_scalar",
            "print_int",
            "contiguous",
            "gpu_on",
            "gpu_off",
            "gpu_allocate",
            "gpu_free",
            "gpu_put",
            "gpu_get",
            "set_persistent",
            "restore_persistent",
            "sparse",
            "assert_same",
            "broadcast_from",
            "sqrt",
            "stop",
            "EOF_TOKEN",
            "SINGLE_LINE_COMMENT",
            "IDENTIFIER",
            "INTLIT",
            "DOUBLELIT",
            "EOL",
            "STRINGLIT",
            "ERROR_TOKEN",
            "Sial",
            "Program",
            "Ident",
            "EOLs",
            "ImportProg",
            "Modifiers",
            "Modifier",
            "Dec",
            "ArrayKind",
            "DimensionList",
            "Dimension",
            "IndexKind",
            "Range",
            "RangeVal",
            "Statement",
            "WhereClause",
            "RelationalExpression",
            "Indices",
            "AllocIndex",
            "AllocIndexList",
            "ContiguousIndexRangeExprList",
            "ContiguousIndexRangeExpr",
            "Expression",
            "DataBlock",
            "AssignOp",
            "Arg",
            "StringLiteral",
            "Primary",
            "RelOp",
            "Term",
            "ExponentExpression",
            "CastExpression"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
