package sial.parser;

public class SialParserprs implements lpg.runtime.ParseTable, SialParsersym {
    public final static int ERROR_SYMBOL = 100;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 11;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 12;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 28;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 182;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 100;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 932;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 156;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 53;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 153;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 547;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 94;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 94;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 775;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 776;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SialParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,0,1,0,
            1,0,0,0,0,1,0,0,1,0,
            1,0,1,0,0,0,0,0,0,0,
            0,0,1,1,0,0,0,0,1,0,
            1,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            6,42,45,47,48,52,53,51,50,41,
            7,9,31,43,44,35,40,32,34,39,
            3,13,26,29,33,36,37,2,4,5,
            8,10,11,12,14,15,16,17,18,19,
            20,21,22,23,24,25,27,28,30,38,
            46,49,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            3,8,0,1,1,1,2,0,2,3,
            0,1,1,2,1,1,1,0,3,1,
            1,1,1,1,1,1,4,0,2,4,
            0,2,6,1,1,1,1,1,1,3,
            1,5,1,1,1,1,1,1,4,3,
            1,2,1,6,3,1,0,0,3,2,
            0,3,2,1,1,1,1,7,11,7,
            4,1,5,8,3,3,1,1,1,3,
            0,3,6,6,3,1,3,2,2,4,
            2,4,2,4,2,2,2,1,1,1,
            1,1,0,2,3,3,3,3,4,2,
            2,2,2,3,3,2,3,1,1,1,
            1,4,1,3,4,1,1,1,1,1,
            1,3,1,3,3,1,3,3,3,1,
            3,1,4,4,1,2,2,3,1,1,
            1,1,1,1,1,1,-93,0,0,0,
            0,0,0,0,0,0,0,-12,-39,0,
            0,-2,0,0,-6,0,0,-15,0,0,
            -110,0,0,0,0,0,0,0,0,0,
            -106,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -146,0,0,0,0,0,0,0,0,0,
            0,-23,0,0,0,0,0,0,-18,-19,
            0,-148,0,0,0,0,0,0,0,0,
            0,0,-74,0,0,0,0,0,0,-3,
            0,0,-47,0,0,0,0,0,0,0,
            0,0,0,-154,0,0,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,-165,0,0,0,0,0,0,0,0,
            0,0,-35,0,0,0,0,0,0,0,
            0,0,0,-40,0,0,0,-36,0,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,-70,
            0,0,0,0,0,0,0,0,0,0,
            -71,0,0,0,0,0,0,0,0,0,
            0,-76,0,0,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,-114,0,0,0,0,0,0,
            0,0,0,0,-122,0,0,0,0,0,
            0,0,0,0,0,-155,0,0,0,0,
            0,0,0,0,0,0,-107,0,0,0,
            0,0,0,0,0,0,-111,0,0,0,
            0,0,0,0,0,-112,0,0,0,0,
            0,0,0,0,-113,0,0,0,0,0,
            0,0,-140,0,0,0,0,0,0,0,
            -141,0,0,0,0,0,0,0,-75,0,
            0,0,0,0,-14,0,0,0,-27,0,
            0,0,-28,0,0,0,-85,0,-29,0,
            0,0,-4,0,-41,0,0,0,-30,0,
            0,0,-7,0,-102,0,0,0,-105,0,
            0,0,0,0,-42,0,0,0,-123,0,
            0,0,-11,0,-133,0,0,0,-49,0,
            -89,0,-149,0,0,0,-5,0,-166,0,
            0,0,-119,0,0,0,-168,0,0,0,
            -32,0,-177,0,0,0,-1,-134,0,0,
            -179,0,0,0,0,0,0,0,0,0,
            -135,0,-20,0,-53,0,-61,0,-115,0,
            -55,0,0,-151,0,-161,0,0,-116,0,
            0,-153,0,0,0,0,-10,0,-117,0,
            0,0,-60,0,-8,0,-170,0,-175,0,
            -171,0,0,-174,0,0,0,-9,-16,0,
            0,-13,-64,0,-17,0,0,0,0,0,
            0,-21,0,0,-22,0,-24,0,-25,0,
            -26,0,0,-31,-33,-34,0,-37,0,-38,
            0,-43,0,-48,0,-44,0,-52,0,-45,
            0,-46,0,-54,0,-50,0,-51,0,-56,
            0,0,-57,0,0,-58,0,-59,0,-62,
            0,-66,-69,-72,-80,0,-82,-83,-84,0,
            -86,0,-87,-88,0,-90,-99,-91,0,-92,
            0,0,-95,-100,0,-96,0,0,0,-121,
            0,-124,0,-125,0,-126,0,-127,0,-152,
            -163,0,-156,0,-164,-167,-172,-176,0,-67,
            0,0,0,-68,0,0,0,-73,0,-77,
            0,-180,0,-78,0,-79,0,-182,0,-81,
            -97,-98,-101,-103,-104,-108,-109,-118,-120,-128,
            -129,-130,-131,-132,-136,-137,-138,-139,-142,-143,
            -144,-145,-147,-150,-157,-158,-159,-160,-162,-169,
            -173,-178,-181,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            28,28,30,21,21,11,11,11,29,29,
            32,33,33,34,34,22,22,22,31,31,
            35,35,35,35,35,35,35,36,43,43,
            40,44,44,37,45,45,45,45,45,46,
            46,23,38,47,47,47,47,47,47,39,
            48,24,24,24,41,42,49,49,12,12,
            18,19,19,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,27,27,50,
            50,26,26,13,13,17,20,20,13,13,
            13,13,13,13,13,13,13,13,15,15,
            15,15,15,51,51,13,13,13,13,13,
            13,13,13,13,13,13,13,13,14,14,
            14,14,2,16,16,3,52,52,52,52,
            52,52,25,10,10,10,9,9,9,9,
            8,8,6,6,6,7,7,7,5,5,
            5,5,5,5,5,4,1,4,752,152,
            153,154,145,140,142,734,730,753,391,48,
            740,93,378,750,86,48,595,751,48,565,
            465,4,613,152,153,154,145,140,142,759,
            13,4,613,152,153,154,145,140,142,734,
            757,230,229,612,20,21,22,23,24,25,
            26,4,613,152,153,154,145,140,142,734,
            730,753,161,613,152,153,154,670,86,7,
            3,768,4,613,152,153,154,145,140,142,
            734,730,753,161,613,152,153,154,147,86,
            41,14,769,4,613,152,153,154,145,140,
            142,734,730,521,4,613,152,153,154,145,
            140,142,734,730,753,663,513,660,684,527,
            115,87,4,613,152,153,154,145,140,142,
            734,730,521,4,613,152,153,154,145,140,
            142,734,730,728,48,740,677,60,4,613,
            152,153,154,145,140,142,734,730,736,4,
            613,152,153,154,145,140,142,734,730,743,
            4,613,152,153,154,145,140,142,734,730,
            744,4,613,152,153,154,145,140,142,734,
            730,745,395,613,152,153,154,145,140,142,
            734,730,743,4,613,152,153,154,145,140,
            142,734,730,754,4,613,152,153,154,145,
            140,142,734,730,762,4,613,152,153,154,
            145,140,142,734,730,764,4,613,152,153,
            154,145,140,142,734,730,770,4,613,152,
            153,154,145,140,142,734,758,4,613,152,
            153,154,145,140,142,760,4,613,152,153,
            154,145,140,142,761,4,613,152,153,154,
            145,141,142,4,613,152,153,154,145,144,
            142,4,613,152,153,154,145,143,142,161,
            613,152,153,154,146,81,648,635,541,83,
            724,99,98,83,724,99,98,553,622,83,
            724,99,98,123,113,48,740,91,112,83,
            724,99,98,205,111,120,648,635,541,449,
            724,99,98,76,110,48,740,678,622,159,
            648,635,541,249,104,207,648,635,541,48,
            123,431,622,1,648,635,541,390,622,246,
            648,635,541,485,77,688,622,285,648,635,
            541,287,622,338,648,635,541,473,465,53,
            622,392,648,635,541,330,622,1,483,9,
            79,48,41,502,622,75,56,473,250,48,
            123,489,765,385,574,172,485,77,483,48,
            740,92,574,763,39,750,529,198,2,48,
            740,90,715,541,537,481,42,465,53,574,
            715,48,41,80,48,123,587,767,481,48,
            654,551,481,389,55,48,571,715,168,513,
            772,50,481,563,40,48,567,48,116,48,
            276,48,672,593,481,287,48,674,48,95,
            48,675,48,89,481,673,48,88,441,341,
            164,477,289,683,481,686,48,690,48,63,
            48,741,363,48,742,693,48,687,48,694,
            48,117,513,546,50,287,114,287,287,48,
            748,48,749,553,481,495,546,551,203,374,
            330,579,589,546,555,700,48,49,509,704,
            546,708,48,124,564,515,48,710,564,75,
            481,481,523,48,54,481,564,546,48,68,
            543,716,717,574,545,499,771,582,40,543,
            288,30,48,773,334,599,58,27,48,69,
            547,515,554,381,324,475,440,535,560,561,
            487,492,46,382,499,562,563,468,470,568,
            569,572,521,494,522,575,576,530,531,533,
            538,578,57,579,776,776
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,0,1,2,0,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            0,2,39,4,41,0,43,0,1,0,
            5,6,46,50,52,53,0,0,0,2,
            60,4,6,61,62,63,64,65,66,67,
            68,69,70,71,0,1,0,74,72,73,
            0,1,0,1,0,40,86,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            1,39,0,41,0,3,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,0,1,
            0,1,82,0,1,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,0,0,39,
            3,41,0,43,0,3,0,1,6,46,
            50,0,93,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,0,1,43,0,47,
            92,3,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,0,1,0,0,0,1,
            84,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,0,0,2,0,4,42,0,
            85,44,3,0,46,48,49,0,1,0,
            54,55,56,59,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,47,0,45,0,
            0,0,2,2,4,4,0,58,0,0,
            0,0,1,5,0,1,2,60,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            0,51,2,39,4,41,46,43,57,0,
            0,0,52,53,50,5,52,53,0,1,
            59,61,62,63,64,65,66,67,68,69,
            70,71,72,73,0,1,2,0,74,0,
            81,94,0,83,0,3,2,87,4,90,
            0,91,42,3,0,1,0,39,0,41,
            51,0,6,0,54,55,56,6,0,6,
            2,0,4,39,3,75,76,77,78,79,
            80,44,0,44,0,48,49,48,49,47,
            0,0,2,2,4,4,40,47,44,0,
            0,40,0,40,0,6,6,0,6,2,
            0,4,0,3,0,0,0,5,3,5,
            0,5,0,0,0,43,42,5,5,0,
            0,0,0,0,5,5,3,0,0,40,
            40,0,40,0,0,0,88,0,0,0,
            3,0,0,0,0,51,0,0,0,0,
            0,0,42,0,0,0,42,0,0,0,
            39,0,0,41,0,0,0,0,0,0,
            0,0,45,45,39,0,45,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,57,0,0,0,0,58,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,89,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            776,932,776,776,932,459,12,840,658,519,
            656,848,253,505,485,304,169,640,636,646,
            642,652,650,638,842,843,644,308,293,634,
            489,479,473,469,631,629,627,222,841,97,
            8,191,925,407,926,151,931,776,932,103,
            157,123,792,352,668,666,70,96,776,191,
            849,407,702,819,820,821,822,823,824,810,
            811,812,813,814,57,932,776,243,791,793,
            776,932,776,720,776,123,711,840,658,519,
            656,848,253,505,485,304,169,640,636,646,
            642,652,650,638,842,843,644,308,293,634,
            489,479,473,469,631,629,627,222,841,776,
            932,878,4,877,776,783,840,658,519,656,
            848,253,505,485,304,169,640,636,646,642,
            652,650,638,842,843,644,308,293,634,489,
            479,473,469,631,629,627,222,841,776,932,
            776,932,625,776,932,840,658,519,656,848,
            253,505,485,304,169,640,636,646,642,652,
            650,638,842,843,644,308,293,634,489,479,
            473,469,631,629,627,222,841,18,776,925,
            783,926,776,931,776,782,776,932,702,679,
            319,776,885,840,658,519,656,848,253,505,
            485,304,169,640,636,646,642,652,650,638,
            842,843,644,308,293,634,489,479,473,469,
            631,629,627,222,841,776,932,608,10,781,
            847,783,840,658,519,656,848,253,505,485,
            304,169,640,636,646,642,652,650,638,842,
            843,644,308,293,634,489,479,473,469,631,
            629,627,222,841,776,932,776,133,776,932,
            713,840,658,519,656,848,253,505,485,304,
            169,640,636,646,642,652,650,638,842,843,
            644,308,293,634,489,479,473,469,631,629,
            627,222,841,108,776,191,776,407,894,776,
            604,426,782,136,681,417,181,776,932,776,
            895,896,897,718,840,658,519,656,848,253,
            505,485,304,169,640,636,646,642,652,650,
            638,842,843,644,308,293,634,489,479,473,
            469,631,629,627,222,841,781,776,435,776,
            776,776,191,191,407,407,776,706,151,776,
            58,776,932,157,776,932,459,850,840,658,
            519,656,848,253,505,485,304,169,640,636,
            646,642,652,650,638,842,843,644,308,293,
            634,489,479,473,469,631,629,627,222,841,
            776,924,191,925,407,926,792,931,396,776,
            776,776,11,11,352,157,746,747,105,720,
            732,11,11,11,11,11,11,11,11,11,
            11,11,791,793,776,932,766,135,243,134,
            175,775,3,609,107,782,191,615,407,493,
            776,178,894,782,776,932,776,878,776,877,
            443,776,702,776,895,896,897,264,106,576,
            191,19,407,827,783,903,905,902,904,906,
            907,426,776,426,776,417,181,417,181,781,
            94,132,191,191,407,407,898,781,854,776,
            776,901,776,858,776,601,264,85,264,191,
            59,407,100,783,776,58,776,156,783,157,
            31,569,81,776,28,931,548,533,561,776,
            776,776,776,61,211,232,783,139,138,809,
            860,137,859,58,776,776,696,62,776,776,
            783,776,776,776,776,451,776,776,776,776,
            776,776,755,776,776,776,756,776,776,776,
            808,776,776,805,776,776,776,776,776,776,
            776,776,435,435,828,776,435,776,776,776,
            776,776,776,776,776,776,776,776,776,776,
            776,597,776,776,776,776,738,776,776,776,
            776,776,776,776,776,776,776,776,776,776,
            776,776,776,776,776,776,776,776,776,776,
            776,776,282
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            78,89,34,32,34,146,37,382,382,93,
            33,94,382,113,146,146,146,1,4,93,
            382,146,22,146,146,146,24,24,24,24,
            382,213,213,146,20,20,146,146,146,146,
            146,146,146,146,218,218,20,382,146,146,
            146,212,381,382,91,146,146,146,146,148,
            87,146,20,191,37,37,378,30,221,20,
            20,379,385,22,22,18,194,193,385,213,
            30,213,213,146,28,146,28,382,203,257,
            297,301,20,20,305,146,216,30,293,293,
            390,222,385,385,379,20,20,392,392,20,
            20,20,20,20,146,146,146,30,75,30,
            154,20,258,146,341,146,410,402,402,394,
            405,385,306,83,146,85,26,194,194,20,
            20,193,193,193,385,20,402,20,39,385,
            342,382,411,20,20,146,407,85,402,402,
            75,402,382,382,20,343,410,412,400,83,
            146,155,409,146,411,146,156,297,412,146,
            303,146
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            72,46,73,61,62,63,64,65,66,67,
            68,69,70,71,52,53,0,53,52,2,
            74,43,50,1,39,41,0,47,3,5,
            0,94,3,81,90,0,43,0,1,8,
            7,38,24,25,10,9,26,11,12,21,
            22,19,20,13,14,15,16,17,23,27,
            28,18,29,30,31,32,33,34,35,36,
            37,60,86,0,44,1,0,81,90,47,
            3,0,2,1,39,0,47,3,94,0,
            88,0,3,61,62,63,64,65,66,52,
            53,67,68,69,70,71,72,46,73,87,
            83,91,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,82,1,0,82,84,85,
            59,92,93,86,3,1,8,7,38,24,
            25,10,9,26,11,12,21,22,19,20,
            13,14,15,16,17,23,27,28,18,29,
            30,31,32,33,34,35,36,37,60,0,
            1,5,45,6,51,40,57,47,3,44,
            48,49,77,75,78,76,79,80,4,2,
            0,5,54,55,56,42,0,1,46,0,
            3,1,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,93,0,3,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            92,0,47,3,42,0,47,3,6,0,
            47,3,58,0,3,1,8,7,38,24,
            25,10,9,26,11,12,21,22,19,20,
            13,14,15,16,17,23,27,28,18,29,
            30,31,32,33,34,35,36,37,84,0,
            3,89,1,8,7,38,24,25,10,9,
            26,11,12,21,22,19,20,13,14,15,
            16,17,23,27,28,18,29,30,31,32,
            33,34,35,36,37,85,0,5,39,41,
            1,47,3,0,47,3,4,2,0,4,
            2,51,0,44,48,49,57,45,5,4,
            2,40,6,0,4,2,57,0,85,3,
            89,1,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,59,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            44,27,13,27,37,26,27,45,45,59,
            27,4,45,23,26,26,26,8,10,27,
            45,26,26,26,26,26,28,28,28,28,
            45,42,42,26,26,26,26,26,25,25,
            25,25,26,26,26,26,15,45,33,26,
            26,42,52,45,27,26,26,26,26,27,
            45,26,26,27,21,21,27,27,6,26,
            26,63,27,26,26,26,27,27,27,42,
            27,42,42,26,31,26,31,45,35,6,
            45,45,1,26,6,26,27,27,65,67,
            27,23,27,27,28,26,26,27,27,26,
            26,26,26,26,33,25,25,27,40,27,
            6,26,23,26,69,26,69,27,27,27,
            27,27,23,47,50,27,27,27,27,26,
            26,27,27,27,27,1,27,1,23,27,
            54,45,54,18,26,26,27,27,27,27,
            57,27,45,45,15,23,69,23,27,48,
            61,6,27,33,54,26,23,27,23,26,
            27,26
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            1,20,0,34,35,12,0,22,0,45,
            47,0,29,0,1,25,0,1,17,0,
            4,0,3,13,2,1,0,1,15,0,
            26,0,16,0,52,0,30,32,0,50,
            0,14,0,28,11,0,48,24,0,46,
            0,49,0,12,18,0,27,0,31,0,
            23,0,51,0,44,0,43,0,19,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            96,3,99,2,19,1,28,29,30,32,
            36,37,40,41,42,43,45,46,62,63,
            64,65,66,71,72,73,75,76,81,83,
            84,85,86,87,88,90,91,93,97,20,
            98,13,100,4,22,80,95,5,6,17,
            18,55,56,14,15,16,21,33,34,39,
            47,48,49,50,51,52,57,58,59,60,
            61,69,89,92,7,8,9,10,11,12,
            24,25,26,27,31,38,53,54,67,68,
            70,74,82,94,35,44,77,78,79,101
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            104,125,128,129,130,134,0,133,132,124,
            105,0,116,126,127,119,123,117,0,122,
            0,108,112,115,118,0,120,102,0,103,
            0,106,0,107,109,0,0,0,0,0,
            0,0,0,0,110,111,113,114,0,121,
            0,131,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            23,58,49,71,33,33,6,12,43,1,
            80,18
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            31,66,55,77,31,38,10,16,47,4,
            83,20
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            13,13,13,13,13,13,3,13,13,5,
            12,17
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            60,59,85,59,60,86,40,93,92,51,
            47,57
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            43,43,43,43,43,43,1,43,43,15,
            53,38
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            110,50,0,51,0,120,5,101,0,40,
            0,112,111,29,0,93,0,110,0,57,
            110,0,112,111,86,112,111,125,12,0,
            60,0,112,111,125,12,0,86,111,112,
            60,0,112,111,26,0,92,0,112,119,
            111,116,9,0,85,116,0,112,119,111,
            101,58,101,10,0,59,101,58,101,0,
            112,119,111,101,10,0,59,101,0,113,
            112,0,111,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            551,543,537,529,523,515,509,499,495,489,
            479,473,469,465,282,396,451,443,385,374,
            435,426,417,181,407,191,363,352,459,243,
            341,330,319,253,308,293,222,264,232,211,
            157,0,551,543,537,529,523,515,509,495,
            465,0,599,717,582,574,700,693,686,673,
            168,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,128,121,111,129,81,90,101,43,111,
            111,131,135,112,91,83,87,134,133,111,
            113,82,37,36,35,34,33,32,31,30,
            29,103,102,18,28,27,23,17,16,15,
            14,13,20,19,22,21,12,26,9,10,
            8,101,101,101,101,147,145,53,52,111,
            101,105,50,101,101,101,1,101,111,114,
            114,101,110,74,2,50,109,108,110,101,
            101,102,102,46,101,46,101,125,110,111,
            116,101,5,114,111,88,101,101,101,101,
            110,112,110,110,151,2,4,52,53,49,
            48,44,45,114,5,114,114,101,5,101,
            111,152,112,6,111,58,111,116,120,101,
            110,110,112,42,5,42,42,109,109,51,
            51,108,108,108,110,5,150,5,112,110,
            119,101,119,6,57,84,124,2,146,120,
            6,120,86,118,89,112,111,112,110,57,
            6,111,111,85,119,59,112,116,112,59,
            101,58
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            ",",
            "+",
            "-",
            "*",
            "/",
            "^",
            ">",
            ">=",
            "<",
            "<=",
            "==",
            "!=",
            "=",
            "+=",
            "-=",
            "*=",
            "(",
            ")",
            "[",
            "]",
            ":",
            "**",
            "$empty",
            "sial",
            "endsial",
            "proc",
            "endproc",
            "return",
            "call",
            "pardo",
            "endpardo",
            "do",
            "in",
            "enddo",
            "cycle",
            "exit",
            "if",
            "else",
            "endif",
            "put",
            "get",
            "prepare",
            "request",
            "prequest",
            "collective",
            "execute",
            "aoindex",
            "moindex",
            "moaindex",
            "mobindex",
            "index",
            "laindex",
            "subindex",
            "of",
            "scalar",
            "int",
            "static",
            "temp",
            "local",
            "distributed",
            "served",
            "create",
            "delete",
            "allocate",
            "deallocate",
            "destroy",
            "where",
            "import",
            "predefined",
            "special",
            "server_barrier",
            "sip_barrier",
            "section",
            "endsection",
            "print",
            "println",
            "print_index",
            "print_scalar",
            "print_int",
            "contiguous",
            "gpu_on",
            "gpu_off",
            "gpu_allocate",
            "gpu_free",
            "gpu_put",
            "gpu_get",
            "set_persistent",
            "restore_persistent",
            "sparse",
            "assert_same",
            "broadcast_from",
            "sqrt",
            "stop",
            "EOF_TOKEN",
            "SINGLE_LINE_COMMENT",
            "IDENTIFIER",
            "INTLIT",
            "DOUBLELIT",
            "EOL",
            "STRINGLIT",
            "ERROR_TOKEN",
            "Sial",
            "Program",
            "Ident",
            "EOLs",
            "ImportProg",
            "Modifiers",
            "Modifier",
            "Dec",
            "ArrayKind",
            "DimensionList",
            "Dimension",
            "IndexKind",
            "Range",
            "RangeVal",
            "Statement",
            "WhereClause",
            "RelationalExpression",
            "Indices",
            "AllocIndex",
            "AllocIndexList",
            "ContiguousIndexRangeExprList",
            "ContiguousIndexRangeExpr",
            "Expression",
            "DataBlock",
            "AssignOp",
            "Arg",
            "ContiguousDataBlock",
            "StringLiteral",
            "Primary",
            "RelOp",
            "Term",
            "ExponentExpression",
            "CastExpression"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
