package sial.parser;

public class SialParserprs implements lpg.runtime.ParseTable, SialParsersym {
    public final static int ERROR_SYMBOL = 100;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 11;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 12;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 28;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 192;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 100;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1000;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 162;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 56;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 156;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 617;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 94;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 94;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 837;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 838;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SialParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,1,0,0,
            1,1,0,0,0,0,0,1,0,0,
            0,1,0,1,0,1,0,0,0,0,
            0,0,0,0,0,1,1,0,0,0,
            0,1,0,1,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            6,42,45,47,48,55,56,54,53,41,
            7,9,31,43,44,40,32,34,39,50,
            51,3,13,26,29,33,35,36,37,49,
            2,4,5,8,10,11,12,14,15,16,
            17,18,19,20,21,22,23,24,25,27,
            28,30,38,46,52,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            3,8,0,1,1,1,2,0,2,3,
            0,1,1,2,1,1,1,0,3,1,
            1,1,1,1,1,1,4,0,2,4,
            0,2,6,1,1,1,1,1,1,3,
            1,5,1,1,1,1,1,1,4,3,
            1,2,1,6,3,1,0,0,3,2,
            0,3,2,1,1,1,1,7,11,7,
            4,1,5,8,3,3,1,1,1,3,
            0,3,6,6,3,1,3,2,2,4,
            2,4,2,4,2,2,2,1,1,1,
            1,1,0,2,3,3,3,3,4,2,
            2,2,2,3,3,2,3,1,1,1,
            1,4,1,3,1,3,2,0,3,4,
            1,1,1,1,1,1,3,1,3,3,
            1,3,3,3,1,3,1,4,4,4,
            1,2,2,3,1,1,1,1,1,1,
            1,1,-93,0,0,0,0,0,0,0,
            0,0,0,-12,-39,0,0,-2,0,-120,
            0,0,0,0,-4,0,-23,0,0,0,
            0,0,0,-40,0,0,0,-35,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-152,
            0,0,0,0,0,0,0,0,0,0,
            -181,0,0,-137,0,0,-6,0,0,-154,
            0,0,0,0,0,0,0,0,0,0,
            -41,0,0,-85,0,0,-7,0,0,-47,
            0,0,0,0,0,0,0,0,0,0,
            -161,0,0,0,0,0,0,0,0,0,
            0,0,0,-170,0,0,0,-174,0,0,
            0,0,0,0,0,0,0,0,-36,0,
            0,0,0,0,0,0,0,0,0,-42,
            0,0,0,0,-63,0,0,0,0,0,
            0,0,0,0,0,-70,0,0,0,0,
            0,0,0,0,0,0,-71,0,0,0,
            0,0,0,0,0,0,0,-76,0,0,
            0,0,0,0,0,0,0,0,-94,0,
            0,0,0,0,0,0,0,0,0,-115,
            0,0,0,0,0,0,0,0,0,0,
            -117,0,0,0,0,0,0,0,0,0,
            0,-118,0,0,0,0,0,0,0,0,
            0,0,-123,0,0,0,0,0,0,0,
            0,0,0,-132,0,0,0,0,0,0,
            0,0,0,0,-163,0,0,0,0,0,
            0,0,0,0,0,-106,0,0,0,0,
            0,0,0,0,0,-107,0,0,0,0,
            0,0,0,0,0,-111,0,0,0,0,
            0,0,0,0,-112,0,0,0,0,0,
            0,0,0,-113,0,0,0,0,0,0,
            0,0,-114,0,0,0,0,0,0,0,
            -142,0,0,0,0,0,0,0,-143,0,
            0,0,0,0,0,0,-144,0,0,0,
            0,0,0,0,-178,0,0,0,0,0,
            0,0,-74,0,0,0,0,0,-75,0,
            0,0,0,0,-14,0,0,0,-27,0,
            0,0,-28,0,0,0,-11,0,-29,0,
            0,0,-65,0,-160,-5,0,0,-30,0,
            0,0,-10,0,-102,0,0,0,-105,0,
            0,0,-20,0,0,0,-19,0,-124,0,
            0,0,-72,0,-135,0,0,0,0,-55,
            0,0,-155,0,0,0,0,0,-175,0,
            0,0,-60,-136,0,0,-177,0,0,0,
            -116,0,-187,0,0,0,-1,-49,0,0,
            -189,0,0,0,0,0,0,0,0,-157,
            0,0,-3,0,-53,0,0,-61,0,-159,
            0,0,-180,0,0,-185,0,0,0,-184,
            0,0,-8,-64,0,-9,0,0,-13,0,
            -15,0,0,0,0,-18,0,0,-21,0,
            -16,0,-17,0,-22,0,0,-24,0,0,
            -25,0,-26,0,-31,-32,0,-33,0,-34,
            0,-37,0,-38,0,0,-43,0,-48,0,
            -52,0,-44,0,-45,0,-46,0,-54,0,
            -50,0,-51,0,0,-56,0,-57,0,0,
            -58,0,-59,0,-62,0,-66,-69,-80,-82,
            0,-83,-84,0,-86,0,-87,-88,-89,0,
            -90,-95,0,0,-91,0,-92,-99,0,-96,
            0,-100,0,0,-122,0,-126,0,-125,0,
            -127,0,-128,-176,0,-158,0,-130,0,-164,
            0,-172,-173,-182,0,-67,0,-186,0,-68,
            0,0,0,0,-73,0,-190,0,-192,0,
            -77,-78,-79,0,0,-81,-97,0,-98,-101,
            -103,-104,-108,-109,-110,-119,-121,-129,-131,-133,
            -134,-138,-139,-140,-141,-145,-146,-147,-148,-149,
            -150,-151,-153,-156,-162,-165,-166,-167,-168,-169,
            -171,-179,-183,-188,-191,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            31,31,33,22,22,11,11,11,32,32,
            35,36,36,37,37,23,23,23,34,34,
            38,38,38,38,38,38,38,39,46,46,
            43,47,47,40,48,48,48,48,48,49,
            49,24,41,50,50,50,50,50,50,42,
            51,25,25,25,44,45,52,52,12,12,
            17,18,18,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,29,29,53,
            53,28,28,13,13,16,19,19,13,13,
            13,13,13,13,13,13,13,13,15,15,
            15,15,15,54,54,13,13,13,13,13,
            13,13,13,13,13,13,13,13,14,14,
            14,14,2,27,27,30,30,20,21,21,
            3,55,55,55,55,55,55,26,10,10,
            10,9,9,9,9,8,8,6,6,6,
            6,7,7,7,5,5,5,5,5,5,
            5,4,1,527,654,158,159,160,151,145,
            147,792,791,810,395,54,796,93,249,86,
            500,77,809,125,768,43,535,44,654,158,
            159,160,725,808,54,796,730,13,516,654,
            158,159,160,151,145,147,792,791,785,79,
            577,666,659,20,21,22,23,24,25,26,
            516,654,158,159,160,151,145,147,792,791,
            810,54,41,823,54,41,86,54,653,830,
            516,654,158,159,160,151,145,147,792,791,
            810,54,796,91,607,40,86,7,39,831,
            516,654,158,159,160,151,145,147,792,791,
            739,516,654,158,159,160,151,145,147,792,
            791,810,76,828,500,77,738,87,516,654,
            158,159,160,151,145,147,792,791,739,516,
            654,158,159,160,151,145,147,792,791,793,
            54,796,732,80,60,516,654,158,159,160,
            151,145,147,792,791,800,516,654,158,159,
            160,151,145,147,792,791,801,516,654,158,
            159,160,151,145,147,792,791,802,438,654,
            158,159,160,151,145,147,792,791,800,516,
            654,158,159,160,151,145,147,792,791,811,
            516,654,158,159,160,151,145,147,792,791,
            819,516,654,158,159,160,151,145,147,792,
            791,821,516,654,158,159,160,151,145,147,
            792,791,822,516,654,158,159,160,151,145,
            147,792,791,824,470,654,158,159,160,151,
            145,147,792,791,800,516,654,158,159,160,
            151,145,147,792,791,832,516,654,158,159,
            160,151,145,147,792,814,516,654,158,159,
            160,151,145,147,792,815,516,654,158,159,
            160,151,145,147,816,516,654,158,159,160,
            151,145,147,817,516,654,158,159,160,151,
            145,147,818,516,654,158,159,160,151,146,
            147,516,654,158,159,160,151,150,147,516,
            654,158,159,160,151,149,147,516,654,158,
            159,160,151,148,147,534,654,158,159,160,
            151,150,147,44,654,158,159,160,153,44,
            654,158,159,160,152,81,701,688,686,40,
            780,99,98,40,780,99,98,161,669,40,
            780,99,98,547,113,42,394,115,112,40,
            780,99,98,76,111,120,701,688,686,435,
            780,99,98,248,110,126,768,3,669,159,
            701,688,686,61,104,207,701,688,686,1,
            250,9,669,1,701,688,686,174,669,246,
            701,688,686,552,513,53,669,285,701,688,
            686,42,669,340,701,688,686,325,54,123,
            669,396,701,688,686,718,669,716,185,826,
            553,125,768,58,669,211,56,569,325,633,
            553,808,599,513,53,745,553,773,178,185,
            54,123,607,481,327,42,481,773,621,481,
            2,54,635,773,563,556,4,547,50,481,
            573,54,709,54,590,54,638,834,54,116,
            603,54,553,54,727,481,333,55,333,14,
            54,583,54,95,54,729,728,54,89,481,
            326,330,337,54,88,5,254,400,737,481,
            741,54,747,54,63,359,54,797,54,799,
            742,54,748,54,752,54,117,547,602,333,
            333,114,333,54,806,54,807,607,481,123,
            565,602,602,370,381,506,392,324,583,755,
            54,49,601,579,585,602,757,615,763,54,
            124,54,766,615,615,75,481,593,54,127,
            54,54,481,481,602,630,393,764,54,68,
            589,640,646,774,833,49,613,54,835,54,
            69,162,574,62,403,30,603,580,27,609,
            342,334,493,443,610,613,617,618,525,532,
            287,539,538,621,399,483,624,625,626,561,
            627,579,584,551,590,630,385,628,559,631,
            560,571,595,633,124,635,838,838
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,0,0,1,0,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            1,0,0,0,1,6,4,41,0,6,
            2,3,50,0,1,53,54,0,55,55,
            0,0,62,2,3,63,64,65,66,67,
            68,69,70,71,72,0,73,74,39,4,
            0,1,39,42,41,42,86,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            1,0,0,0,2,3,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,0,1,
            0,0,82,40,4,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,75,76,77,
            78,79,80,0,43,0,0,1,47,48,
            0,1,93,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,0,1,0,0,0,
            92,4,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,0,1,0,0,2,3,
            84,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,0,0,0,0,4,4,0,
            85,5,0,0,5,2,3,88,52,0,
            1,0,94,2,3,61,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,49,56,
            56,49,0,60,0,44,57,58,59,57,
            58,59,0,0,0,0,1,5,0,0,
            1,62,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,0,1,52,0,1,2,
            6,43,0,6,50,47,48,53,54,55,
            0,0,2,3,55,5,61,63,64,65,
            66,67,68,69,70,71,72,73,74,0,
            1,2,0,39,81,6,39,83,41,42,
            0,87,0,90,4,91,44,50,51,0,
            53,54,0,43,2,3,46,47,48,0,
            1,0,52,2,3,0,5,0,39,4,
            41,42,0,1,2,0,1,2,6,50,
            51,6,53,54,0,43,0,1,2,47,
            48,0,6,0,1,2,56,0,0,6,
            2,3,43,6,43,40,0,46,47,48,
            0,0,0,52,39,4,41,42,0,0,
            0,56,2,3,40,39,51,41,42,45,
            0,40,39,0,41,42,45,51,0,0,
            2,3,0,0,51,2,3,41,0,0,
            40,2,3,5,0,45,2,3,40,40,
            0,0,0,45,45,4,0,5,0,0,
            40,5,0,5,0,45,0,0,4,46,
            0,5,5,0,0,0,0,0,49,0,
            0,49,0,6,0,0,4,0,0,0,
            0,89,0,0,0,0,0,0,0,49,
            0,0,0,44,0,0,44,0,0,39,
            0,0,0,0,0,0,0,0,0,46,
            46,46,0,44,44,0,50,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,60,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            838,1000,838,12,838,1000,838,902,713,618,
            711,910,260,310,251,194,175,694,690,703,
            697,707,705,692,904,905,699,299,198,685,
            559,549,543,539,683,681,678,187,903,838,
            776,128,4,838,1000,940,845,656,97,993,
            436,446,885,838,1000,723,721,8,854,733,
            103,96,911,436,446,881,882,883,884,886,
            872,873,874,875,876,18,853,855,939,845,
            838,1000,994,820,999,315,772,902,713,618,
            711,910,260,310,251,194,175,694,690,703,
            697,707,705,692,904,905,699,299,198,685,
            559,549,543,539,683,681,678,187,903,838,
            1000,838,838,70,436,446,902,713,618,711,
            910,260,310,251,194,175,694,690,703,697,
            707,705,692,904,905,699,299,198,685,559,
            549,543,539,683,681,678,187,903,838,1000,
            10,138,675,759,845,902,713,618,711,910,
            260,310,251,194,175,694,690,703,697,707,
            705,692,904,905,699,299,198,685,559,549,
            543,539,683,681,678,187,903,970,972,969,
            971,973,974,838,474,838,838,1000,465,456,
            57,1000,947,902,713,618,711,910,260,310,
            251,194,175,694,690,703,697,707,705,692,
            904,905,699,299,198,685,559,549,543,539,
            683,681,678,187,903,838,1000,19,838,838,
            909,845,902,713,618,711,910,260,310,251,
            194,175,694,690,703,697,707,705,692,904,
            905,699,299,198,685,559,549,543,539,683,
            681,678,187,903,838,1000,838,838,436,446,
            770,902,713,618,711,910,260,310,251,194,
            175,694,690,703,697,707,705,692,904,905,
            699,299,198,685,559,549,543,539,683,681,
            678,187,903,838,3,838,157,844,844,838,
            650,163,838,108,163,436,446,750,425,838,
            1000,838,837,436,446,778,902,713,618,711,
            910,260,310,251,194,175,694,690,703,697,
            707,705,692,904,905,699,299,198,685,559,
            549,543,539,683,681,678,187,903,956,843,
            843,956,838,761,838,992,957,958,959,957,
            958,959,100,838,58,838,1000,162,140,838,
            1000,912,902,713,618,711,910,260,310,251,
            194,175,694,690,703,697,707,705,692,904,
            905,699,299,198,685,559,549,543,539,683,
            681,678,187,903,105,776,643,838,1000,529,
            940,474,838,993,11,465,456,11,11,854,
            128,838,1000,1000,735,1000,787,11,11,11,
            11,11,11,11,11,11,11,853,855,838,
            1000,529,838,939,237,993,994,671,999,348,
            838,673,139,257,844,661,491,803,523,838,
            804,805,107,1000,436,446,1000,1000,1000,838,
            1000,129,1000,1000,1000,838,1000,838,994,844,
            999,348,838,1000,827,838,1000,529,889,825,
            523,993,804,805,838,474,838,1451,529,465,
            456,838,993,838,1502,529,843,838,106,993,
            436,446,916,870,1000,759,838,1000,1000,1000,
            838,59,58,1000,994,845,999,348,838,838,
            94,843,436,446,555,994,523,999,414,960,
            838,271,994,141,999,348,968,523,92,838,
            436,446,31,90,523,436,446,999,838,137,
            284,436,446,163,85,920,436,446,231,271,
            28,58,838,871,922,845,81,611,838,838,
            271,180,838,234,61,921,838,838,845,483,
            838,220,240,144,143,142,838,838,604,838,
            838,812,62,890,838,838,845,838,838,838,
            838,288,838,838,838,838,838,838,838,813,
            838,838,838,499,838,838,507,838,838,867,
            838,838,838,838,838,838,838,838,838,483,
            483,483,838,515,967,838,829,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,789
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            169,176,6,4,6,79,13,386,386,26,
            5,27,386,46,79,79,79,199,202,26,
            386,79,20,79,79,79,22,22,22,22,
            386,217,217,79,18,18,79,79,79,79,
            79,79,79,79,222,222,18,386,79,79,
            79,216,385,386,81,79,79,79,79,119,
            174,79,18,178,13,13,382,11,225,18,
            18,383,389,20,20,15,181,180,389,217,
            11,217,217,79,9,79,9,386,190,261,
            333,337,18,18,297,79,220,11,341,341,
            394,226,389,389,383,18,18,396,396,396,
            18,18,18,18,18,166,18,18,11,1,
            11,125,18,262,79,345,79,408,404,79,
            404,15,398,389,298,162,79,164,24,181,
            181,18,18,18,180,180,180,389,214,389,
            389,18,404,18,83,389,346,386,409,166,
            18,396,18,79,400,164,404,396,404,1,
            404,386,386,18,347,408,410,18,402,162,
            79,126,407,79,409,79,127,333,410,79,
            339,79
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            43,1,0,94,4,81,90,0,56,4,
            5,0,41,0,54,53,50,2,51,41,
            42,1,6,39,0,4,63,64,65,66,
            50,67,53,54,68,69,70,71,72,73,
            55,74,87,83,91,8,7,38,24,25,
            10,9,26,11,12,21,22,19,20,13,
            14,15,16,17,23,27,28,18,29,30,
            31,32,33,34,35,36,37,82,1,0,
            88,0,1,8,7,38,24,25,10,9,
            26,11,12,21,22,19,20,13,14,15,
            16,17,23,27,28,18,29,30,31,32,
            33,34,35,36,37,62,86,0,82,84,
            85,61,92,93,86,4,1,8,7,38,
            24,25,10,9,26,11,12,21,22,19,
            20,13,14,15,16,17,23,27,28,18,
            29,30,31,32,33,34,35,36,37,62,
            0,2,1,6,0,1,42,0,81,90,
            56,4,0,56,4,94,0,1,5,46,
            40,44,45,52,56,4,43,47,48,77,
            75,78,76,79,80,3,2,0,73,55,
            74,63,64,65,66,67,68,69,70,71,
            72,53,54,50,0,5,57,58,59,49,
            0,1,55,0,4,1,8,7,38,24,
            25,10,9,26,11,12,21,22,19,20,
            13,14,15,16,17,23,27,28,18,29,
            30,31,32,33,34,35,36,37,93,0,
            4,1,8,7,38,24,25,10,9,26,
            11,12,21,22,19,20,13,14,15,16,
            17,23,27,28,18,29,30,31,32,33,
            34,35,36,37,92,0,4,1,8,7,
            38,24,25,10,9,26,11,12,21,22,
            19,20,13,14,15,16,17,23,27,28,
            18,29,30,31,32,33,34,35,36,37,
            84,0,56,4,40,0,56,4,60,0,
            56,4,49,0,4,89,1,8,7,38,
            24,25,10,9,26,11,12,21,22,19,
            20,13,14,15,16,17,23,27,28,18,
            29,30,31,32,33,34,35,36,37,85,
            0,5,6,39,1,56,4,0,56,4,
            3,2,0,3,2,44,0,3,2,52,
            0,3,2,45,40,0,85,4,89,1,
            8,7,38,24,25,10,9,26,11,12,
            21,22,19,20,13,14,15,16,17,23,
            27,28,18,29,30,31,32,33,34,35,
            36,37,61,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            55,5,63,5,39,4,5,56,56,42,
            5,6,56,26,4,4,4,67,44,5,
            56,4,4,4,4,4,31,31,31,31,
            56,69,69,4,4,4,4,4,28,28,
            28,28,4,4,4,4,18,56,58,4,
            4,69,65,56,5,4,4,4,4,5,
            56,4,4,5,34,34,5,5,8,4,
            4,47,5,4,4,4,5,5,5,69,
            5,69,69,4,16,4,16,56,71,8,
            56,56,1,4,8,4,5,5,73,75,
            5,26,5,5,31,4,4,5,5,5,
            4,4,4,4,4,52,4,4,5,10,
            5,8,4,26,4,77,4,77,5,4,
            5,4,5,5,26,49,14,5,5,5,
            5,4,4,4,5,5,5,5,5,5,
            5,3,5,3,26,5,60,56,60,36,
            21,5,4,4,5,5,5,5,5,24,
            5,56,56,18,26,77,26,4,5,50,
            12,8,5,58,60,4,26,5,26,4,
            5,4
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            21,30,19,1,0,37,38,12,0,53,
            0,24,0,49,0,28,0,1,26,0,
            1,16,0,29,0,3,13,1,2,0,
            1,15,0,4,0,21,20,0,33,35,
            0,34,0,48,50,0,54,0,51,25,
            0,21,30,0,31,11,0,27,0,12,
            17,0,32,0,52,0,23,0,14,0,
            55,0,47,0,46,0,18,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            96,3,2,99,19,97,28,29,30,32,
            36,37,40,41,42,43,45,46,62,63,
            64,65,66,71,72,73,75,76,81,83,
            84,85,86,87,88,90,91,93,98,1,
            100,17,4,18,20,22,5,6,13,51,
            92,21,55,56,80,95,14,15,16,33,
            34,39,47,48,49,50,52,57,58,59,
            60,61,69,89,7,8,9,10,11,12,
            24,25,26,27,31,38,53,54,67,68,
            70,74,82,94,35,44,77,78,79,101
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            104,125,128,129,130,136,0,135,134,124,
            105,0,116,126,127,123,117,0,122,132,
            0,0,108,112,115,118,119,0,120,131,
            102,0,103,0,106,0,107,109,0,0,
            0,0,0,0,0,0,0,110,111,113,
            114,0,121,0,133,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            23,58,49,71,33,33,6,12,43,1,
            80,18
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            31,66,55,77,31,38,10,16,47,4,
            83,20
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            13,13,13,13,13,13,3,13,13,5,
            12,16
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            62,61,85,61,62,86,45,93,92,44,
            56,52
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            48,48,48,48,48,48,1,48,48,15,
            58,43
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            110,42,0,44,0,119,5,101,0,45,
            0,112,111,29,0,93,0,110,0,52,
            110,0,112,111,86,112,111,126,12,0,
            62,0,112,111,126,12,0,86,111,112,
            62,0,112,111,26,0,92,0,112,118,
            111,127,9,0,85,127,0,112,118,111,
            101,60,101,10,0,61,101,60,101,0,
            112,118,111,101,10,0,61,101,0,113,
            112,0,111,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            621,613,607,599,593,585,579,569,565,559,
            549,543,539,535,515,288,425,507,499,491,
            414,403,392,381,370,483,474,465,456,446,
            436,359,348,529,523,337,326,315,260,299,
            198,187,271,240,220,163,0,621,613,607,
            599,593,585,579,565,535,0,646,774,640,
            630,755,742,741,728,174,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,131,122,111,132,81,90,101,41,111,
            111,134,138,112,91,83,87,137,136,111,
            113,82,37,36,35,34,33,32,31,30,
            29,103,102,18,28,27,23,17,16,15,
            14,13,20,19,22,21,12,26,9,10,
            8,101,101,101,101,150,148,54,53,111,
            101,105,42,101,101,101,1,101,111,114,
            114,101,110,51,2,42,109,108,110,101,
            101,102,102,55,101,55,101,126,110,111,
            127,101,5,114,111,88,101,101,101,101,
            110,112,110,110,154,2,3,50,53,54,
            48,47,43,46,114,5,114,114,101,5,
            101,111,155,112,40,111,60,111,130,121,
            119,42,110,110,112,49,5,49,49,109,
            109,44,44,44,108,108,108,110,42,110,
            110,5,153,5,112,110,118,101,118,40,
            40,50,52,84,125,2,149,50,119,40,
            119,86,117,89,112,111,112,44,110,52,
            40,111,111,85,118,61,112,127,112,61,
            101,60
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            ",",
            "+",
            "-",
            "*",
            "/",
            "^",
            ">",
            ">=",
            "<",
            "<=",
            "==",
            "!=",
            "=",
            "+=",
            "-=",
            "*=",
            "(",
            ")",
            "[",
            "]",
            ":",
            "**",
            "$empty",
            "sial",
            "endsial",
            "proc",
            "endproc",
            "return",
            "call",
            "pardo",
            "endpardo",
            "do",
            "in",
            "enddo",
            "cycle",
            "exit",
            "if",
            "else",
            "endif",
            "put",
            "get",
            "prepare",
            "request",
            "prequest",
            "collective",
            "execute",
            "aoindex",
            "moindex",
            "moaindex",
            "mobindex",
            "index",
            "laindex",
            "subindex",
            "of",
            "scalar",
            "int",
            "static",
            "temp",
            "local",
            "distributed",
            "served",
            "create",
            "delete",
            "allocate",
            "deallocate",
            "destroy",
            "where",
            "import",
            "predefined",
            "special",
            "server_barrier",
            "sip_barrier",
            "section",
            "endsection",
            "print",
            "println",
            "print_index",
            "print_scalar",
            "print_int",
            "contiguous",
            "gpu_on",
            "gpu_off",
            "gpu_allocate",
            "gpu_free",
            "gpu_put",
            "gpu_get",
            "set_persistent",
            "restore_persistent",
            "sparse",
            "assert_same",
            "broadcast_from",
            "sqrt",
            "stop",
            "EOF_TOKEN",
            "SINGLE_LINE_COMMENT",
            "IDENTIFIER",
            "INTLIT",
            "DOUBLELIT",
            "EOL",
            "STRINGLIT",
            "ERROR_TOKEN",
            "Sial",
            "Program",
            "Ident",
            "EOLs",
            "ImportProg",
            "Modifiers",
            "Modifier",
            "Dec",
            "ArrayKind",
            "DimensionList",
            "Dimension",
            "IndexKind",
            "Range",
            "RangeVal",
            "Statement",
            "WhereClause",
            "RelationalExpression",
            "Indices",
            "AllocIndex",
            "AllocIndexList",
            "ContiguousIndexRangeExprList",
            "ContiguousIndexRangeExpr",
            "Expression",
            "DataBlock",
            "AssignOp",
            "Arg",
            "ContiguousDataBlock",
            "StringLiteral",
            "Primary",
            "IndexCastIndices",
            "IndexCastIdent",
            "RelOp",
            "Term",
            "ExponentExpression",
            "CastExpression"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
