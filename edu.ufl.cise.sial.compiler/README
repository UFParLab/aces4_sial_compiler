Sources for the SIAL compiler

Overview:
The compiler is written in Java. For the most part, the compiler is the same as the "new" 
ACESIII compiler (which was a complete rewrite of the original ACESIII compiler);
changes were only made when they would result in a significant improvement in funcionality 
or efficiency. 

 

Parser and Lexer

The parser and lexer generated with the LPG parser generator as part of the imp meta-tooling environment
for eclipse.  LPG is also available as a standalone tool from sourceforge.  Development of the SIAL 
compiler was done with the version bundled with the imp plugin for eclipse and eclipse juno.  
Unfortunately, the imp project is no longer being developed.

LPG grammar files:  SialParser.g, SialLexer.gi, SialKWLexer.gi in  sial.parser 
The other files in the sial.parser directory are generated by LPG

AST

The AST is generated by LPG. Generated classes are found in sial.parser.Ast
These classes support the visitor pattern with an infrastructure that automatically 
performs a depth-first traversal of the AST and invokes the 

bool visit(X)
void endVisit(X) method for AST node X.

On reaching a node of type X, the visit method is called.  If it returns true, the children are visited. Then
the endVisit method is called. Visitor.java contains an interface for the visitors.  AbstractVisitor.java provides an implementation
an adapter class implementing the interface where desired methods can be overwritten.  This approach to the visitor pattern
does not allow data to be explicitly passed up and down the ast with the visitor (in argument and return values from 
a visit method).  Instead this must be managed with an explicit stack.

The compiler uses seveal different visitors including TypeCheckVisitor, CollectCallSiteVisitor,
and CodeGenVisitor.   The CodeGenVisitor generates the .siox file.  The CollectCallSiteVisitor records
where procedures are called.  The compiler does not generate code for procedures that are never called.

Type Checking

The TypeCheckVisitor performs type checking and constructs a symbol table. It also decorates variables
with a reference to their declarations. Code is found in sial.parser.context.  This is fairly standard, SIAL 
specific typing rules should be clear from comments in the visitor.

Code Generation 

The CodeGenVisitor traversese the decorated AST and generates data structures that are later written
out to form the .siox file.  For the most part, these follow what was done in ACESIII.  

One major difference is that symbol names are now written in the .siox file--making these available at runtime
enhances debugging and improves the quality of the output.  (For example, print_scalar x now can print
something like "x = 3.456 at line 42" instead of "3.456 line 42".)  Also, within the SIP, mutable data
structures have been separated from immutable ones. As a consequence, the .siox file does not need to
contain placeholders for mutable data, significantly reducing the size of the .siox files.   


Implementation notes:
The read methods in the classes in sial.code_gen have not been used in the development of the aces4 compiler
so modifications from the aces3 version have not been used and may not be correct.


Compiler
The Compiler class provides the main program implementing the compiler.  CommandLine manages the
command line options.  

IO
The sial.io package contains classes that support reading and writing .siox files.  In particular, they
must be written in a form that is portably readable by C/C++ programs.  This is mostly an issue with strings. 
Classes are provided to write output in both big endian and little endian format.  





To use the compiler on the UF HPC center,  load java 7.  Note that you must be on a test node.

module load java

From the top directory (the one containing bin  build.xml  lib  README  src) 



To build the sial compiler (this does not run lpg, just recompiles the java), use the ant builder (similar to make)

ant

Note that the ant script is in the file build.xml and has other targets, such as ant clean


To run the sial compiler from this directory

java -classpath lib/*:bin sial.compiler.SialCompiler  -sp PATH TO SIAL FILES FILE


Release notes:

It is possible that the equals and hashcode methods have not been designed perfectly for some of the AST nodes.  