#  Copyright (c) 2003-2010 University of Florida
import "trans_frag_defs.sialx" 
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
#
                           SIAL TRANS_FRAG_FPARDO 
#
# ----------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index   kiter  = 1, 50 # Natoms  
      index   ifrag  = 1,  1 # Nsolute   
      index  iifrag  = 1,  1 # Nsolute    

      index   jfrag  = 1, 217 # Nfragments   
      index  jjfrag  = 1, 217 # Nfragments   
      index   kfrag  = 1, 217 # Nfragments   
      index  kkfrag  = 1, 217 # Nfragments   

      index  isolute = 1, 1 
      index  jsolute = 1, 1 
      index      ii  = 1, 1  # 1 

      aoindex mu     = 1, norb 
      aoindex mu1    = 1, norb 
      aoindex nu     = 1, norb 
      aoindex nu1    = 1, norb 
      aoindex lambda = 1, norb 
      aoindex lambda1= 1, norb 
      aoindex sigma =  1, norb 
      aoindex sigma1=  1, norb 
#
      moaindex i = baocc, eaocc  
      moaindex i1= baocc, eaocc  
      moaindex i2= baocc, eaocc  
#
      moaindex a = bavirt, eavirt   
      moaindex a1= bavirt, eavirt   
      moaindex a2= bavirt, eavirt   
#
      moaindex j = baocc, eaocc  
      moaindex j1= baocc, eaocc  
#
      moaindex b = bavirt, eavirt   
      moaindex b1= bavirt, eavirt   
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
#
# Declare scalars 
# --------------- 
#
      scalar etemp 
      scalar mone  
      scalar one 
      scalar two 
      scalar rank 
      scalar nfrags 
      scalar fcount 
      scalar icount 
      scalar jcount 
      scalar pcount 
      scalar i_aostart  
      scalar i_aoend   
      scalar j_aostart  
      scalar j_aoend   
      scalar i_vstart 
      scalar i_vend  
      scalar j_vstart 
      scalar j_vend  
      scalar a_vstart 
      scalar a_vend  
      scalar b_vstart 
      scalar b_vend  
      scalar m  
      scalar m1 
      scalar n  
      scalar n1 
      scalar n2 
      scalar l  
      scalar s  
      scalar solute 
      scalar et1_correction 
      scalar et2_correction 
      scalar esum 
      scalar e1old 
      scalar e1new  
      scalar e2old 
      scalar e2new  
      scalar ediff   
      scalar ecrit    
      scalar ao_exit
      scalar occ_exit 
      scalar virt_exit 
      scalar imax 
      scalar zmax 
#
# Declare arrays  
# -------------- 
      distributed Dca(mu,p) 
      distributed Dfock_a(p,p1) 
      static ca(mu,p) 
      static fock_a(p,p1) 
      static sxx(mu,nu) 
#
      temp aoint(mu,nu,lambda,sigma) 
      temp txxxq(mu,nu,lambda,q)   
      temp txpxq(mu,p,lambda,q)    
      temp txpxqS(mu,p,lambda,q)    
      temp txpqq(mu,p,q,j)   
      temp txpqqS(mu,p,q,j)   
      temp tppqq(p,p1,q,q1)   
      temp tppqqS(p,p1,q,q1)   
      temp tppppS(p,p1,q,q1)   
      temp t1ppqqS(p,p1,q,q1)   
      temp t1ppqq(p,p1,q,q1)   
      temp t2ppqq(p,p1,q,q1)   
      temp t3ppqq(p,p1,q,q1)   
      temp tpppp(p,p1,q,q1)   
      temp t1pppp(p,p1,q,q1)   
      temp t2pppp(p,p1,q,q1)   
      temp tpp(p,p1)   
      temp t1pp(p,p1)   
      temp taiai(a,i,a1,i1) 
      temp t1aiai(a,i,a1,i1) 
      temp t2aiai(a,i,a1,i1) 
      temp xaiai(a,i,a1,i1) 
      temp txixj(mu,i,nu,j) 

      local LVxxxq(mu,nu,lambda,j) 
      distributed Vxpbq(mu,i,b,j) 

      distributed Vaibj(a,i,b,j)
      distributed Viabj(i,a,b,j)
      distributed Vaajj(a,a1,j,j1)
      distributed Viijj(i,i1,j,j1)

      distributed Vxpxq(mu,i,lambda,j) 
      distributed Vxxqq(mu,nu,j1,j) 
      distributed Vpxxq(i,nu,mu,j) 

      distributed Vixbj(i,nu,b,j) 
      distributed Vixjj(i,nu,j,j1) 
      distributed Vaxjj(a,nu,j1,j) 

      distributed T20aiai(a,i,a1,i1) 
      distributed T2old(a,i,a1,i1) 
      distributed T2new(a,i,a1,i1) 
      distributed TAO_ab(mu,i,nu,j) 
      distributed T2AO_ab(mu,i,nu,j) 
      
      temp tpxxq(p,nu,lambda,q) 
      temp tpxqq(p,nu,q,q1) 
      temp txxqq(mu,nu,j,j1) 
      temp Taixj(a,i,mu,j) 
      temp T1aixj(a,i,mu,j) 
      temp Txixi(nu,i,mu,j)

      temp Ipp(p,p1) 
      temp txj(mu,j)
      temp txx(mu,nu)
      temp tbx(b,nu)
      temp tbj(b,j)
      temp tai(a,i) 
      temp txp(mu,p) 
      temp tpx(p,nu)
#
      local LDaixj(a,i,nu,j)

      distributed e20disp(ifrag,jfrag) 
      distributed wC(p,p1)  
      distributed t1old(b,j)  
      distributed t1new(b,j)  
      distributed x1new(b,j)  
      distributed wC_ao(mu,nu) 
      local LwC_ao(mu,nu) 
      local LwC(p,p1)  
      temp t20disp(ifrag,jfrag) 
      local wAO_frag(mu) 
      local wOccA_frag(i) 
      local wOccB_frag(j) 
      local wVirtA_frag(a) 
      local wVirtB_frag(b) 
      temp x1(mu)    
      temp x2(nu)    
      temp x3(lambda)
      temp x4(sigma) 
      temp xi(i)  
      temp xi1(i)  
      temp xi2(i)  
      temp xj(j)  
      temp xj1(j)  
      temp xa(a)  
      temp xa1(a)  
      temp xa2(a)  
      temp xb(b)  
      temp xb1(b)  
#
# ---------------------------------------------------------------------------- 
#
      PROC SET_FRAG_PARMS    
#     ------------------- 
#
#     Determine the number of fragments  
#     --------------------------------- 
      execute set_frag nfrags
     #print_scalar nfrags
      allocate wAO_frag(*) 
      allocate wOccA_frag(*) 
      allocate wOccB_frag(*) 
      allocate wVirtA_frag(*) 
      allocate wVirtB_frag(*) 

      icount = 0.0 

      DO jfrag 

         icount   += 1.0 

         i_aostart = icount 
         i_aoend   = 1.0  
         execute frag_index_range i_aostart i_aoend 
#
        #print_scalar i_aostart 
        #print_scalar i_aoend  
         m = 0.0 
         DO mu  
            m += 1.0 
            if m >= i_aostart 
            if m <= i_aoend 
               wAO_frag(mu) = icount 
            endif 
            endif 
         ENDDO mu  
#
      ENDDO jfrag 

      icount = 0.0 

      DO jfrag 

         icount   += 1.0 

         i_vstart  = icount 
         i_vend    = 6.0  
         execute frag_index_range i_vstart i_vend 
         a_vstart  = icount 
         a_vend    = 7.0  
         execute frag_index_range a_vstart a_vend 
#
         DO i  
            m = 0.0 
            do i1 
               m += 1.0 
               if i == i1 
                  exit 
               endif 
            enddo i1 
            if m >= i_vstart 
            if m <= i_vend 
               wOccA_frag(i) = icount 
            endif 
            endif 
         ENDDO i  
#
         DO a  
            m = 0.0 
            do a1 
               m += 1.0 
               if a == a1 
                  exit 
               endif 
            enddo a1 
            if m >= a_vstart 
            if m <= a_vend 
               wVirtA_frag(a) = icount 
            endif 
            endif 
         ENDDO a 

        #ENDIF # icount <= nfrags 

      ENDDO jfrag 

     #DO mu 
     #   execute return_sval wAO_frag(mu) m  
     #   print_scalar m 
     #ENDDO mu  

     #DO a 
     #   execute return_sval wVirtA_frag(a) m  
     #   print_scalar m 
     #ENDDO a  

     #DO i 
     #   execute return_sval wOccA_frag(i) m  
     #   print_scalar m 
     #ENDDO i  

      icount = 0.0 

      DO jfrag 

         icount   += 1.0 
        #IF icount > nfrags 
        #   exit 
        #ENDIF 

        #IF icount <= nfrags 

         i_vstart  = icount 
         i_vend    = 9.0  
         execute frag_index_range i_vstart i_vend 
         a_vstart  = icount 
         a_vend    = 10.0  
         execute frag_index_range a_vstart a_vend 
#
         DO j  
            m = 0.0 
            do j1 
               m += 1.0 
               if j == j1 
                  exit 
               endif 
            enddo j1 
            if m >= i_vstart 
            if m <= i_vend 
               wOccB_frag(j) = icount 
            endif 
            endif 
         ENDDO j  
#
         DO b  
            m = 0.0 
            do b1 
               m += 1.0 
               if b == b1 
                  exit 
               endif 
            enddo b1 
            if m >= a_vstart 
            if m <= a_vend 
               wVirtB_frag(b) = icount 
            endif 
            endif 
         ENDDO b 

        #ENDIF # icount <= nfrags 

      ENDDO jfrag 

     #DO b 
     #   execute return_sval wVirtB_frag(b) m  
     #   print_scalar m 
     #ENDDO b  

     #DO j 
     #   execute return_sval wOccB_frag(j) m  
     #   print_scalar m 
     #ENDDO j  
#
      ENDPROC SET_FRAG_PARMS    
#     ---------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC FRAG_TRAN    
#     -------------- 

      sip_barrier 

      PARDO kfrag, jfrag 
      WHERE jfrag != kfrag 
         icount = 0.0 
         DO kkfrag 
            icount   += 1.0 
            IF kkfrag == kfrag 
               exit 
            ENDIF 
         ENDDO kkfrag 
         jcount = 0.0 
         DO jjfrag 
            jcount   += 1.0 
            IF jjfrag == jfrag 
               exit 
            ENDIF 
         ENDDO jjfrag 
        
         print_scalar icount 
         print_scalar jcount 

# ---------------------------------------------------------------------------- 
#     Form wC_ao  
# ---------------------------------------------------------------------------- 
#
      DO mu 
            x1(mu)     = wAO_frag(mu)     
            execute return_sval x1(mu)  m  
            if m == icount  
      DO nu 
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
               allocate LwC_ao(mu,nu)  
      DO lambda 
            x3(lambda) = wAO_frag(lambda) 
            execute return_sval x3(lambda)  l  
            if l == jcount  

               DO j 
                  xj(j)             = wOccB_frag(j) 
                  execute return_sval xj(j) pcount 
                  if pcount == jcount  
                        allocate LVxxxq(mu,nu,lambda,j) 
                  endif # pcount  
               ENDDO j 

      DO sigma 
            x4(sigma)  = wAO_frag(sigma) 
            execute return_sval x4(sigma)  s  
            if s == jcount  

                  aoint(mu,nu,lambda,sigma)  = 0.0 
                  execute compute_integral_batch aoint(mu,nu,lambda,sigma) #  1 1 2 2  

                  DO j 
                     xj(j)             = wOccB_frag(j) 
                     execute return_sval xj(j) pcount 
                     if pcount == jcount  
                        txxxq(mu,nu,lambda,j)   = aoint(mu,nu,lambda,sigma)*ca(sigma,j) 
                        LVxxxq(mu,nu,lambda,j) += txxxq(mu,nu,lambda,j) 
                       #execute dump_block Txxxq 
                     endif # pcount  
                  ENDDO j 

               endif # s 
      ENDDO sigma 


      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  

                  DO j1  
                     xj1(j1)             = wOccB_frag(j1) 
                     execute return_sval xj1(j1) pcount 
                     if pcount == jcount  
                        txxqq(mu,nu,j1,j)         = LVxxxq(mu,nu,lambda,j)*ca(lambda,j1) 
                        Ipp(j1,j)    = 2.0 
                        execute return_diagonal Ipp(j1,j) 
                        txx(mu,nu)    = Ipp(j1,j)*txxqq(mu,nu,j1,j) 
                       #PUT wC_ao(mu,nu) += txx(mu,nu) 
                        LwC_ao(mu,nu) += txx(mu,nu) 
                     endif # pcount == icount c
                  ENDDO j1  

             endif # s 
      ENDDO j 

               DO j 
                  xj(j)             = wOccB_frag(j) 
                  execute return_sval xj(j) pcount 
                  if pcount == jcount  
                        deallocate LVxxxq(mu,nu,lambda,j) 
                  endif # pcount  
               ENDDO j 

             endif # l 
      ENDDO lambda 
               PUT wC_ao(mu,nu) += LwC_ao(mu,nu) 
               deallocate LwC_ao(mu,nu)  
             endif # n 
      ENDDO nu 
             endif # m 
      ENDDO mu
#
# ---------------------------------------------------------------------------- 
#     Done forming wC_ao  
# ---------------------------------------------------------------------------- 

      ENDPARDO kfrag, jfrag 

      sip_barrier 
      println "Done initial formation of wC" 
     #PARDO mu, nu 
     #      GET wC_ao(mu,nu) 
     #      execute print_block wC_ao(mu,nu) 
     #ENDPARDO mu, nu 

      PARDO kfrag 
         icount = 0.0 
         DO kkfrag 
            icount   += 1.0 
            IF kkfrag == kfrag 
               exit 
            ENDIF 
         ENDDO kkfrag 
         DO mu
            x1(mu)     = wAO_frag(mu)     
            execute return_sval x1(mu)  m  
            if m == icount  
         DO nu
            x2(nu)     = wAO_frag(nu)     
            execute return_sval x2(nu)  n  
            if n == icount  

         DO a
            xa(a)      = wVirtA_frag(a) 
            execute return_sval xa(a)  l  
            if l == icount  
         DO i
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  s  
            if s == icount  
               GET wC_ao(mu,nu) 
               txp(mu,i) = wC_ao(mu,nu)*ca(nu,i) 
               tpp(a,i)  = txp(mu,i)*ca(mu,a) 
               PUT wC(a,i) += tpp(a,i) 
               t1pp(i,a)   = tpp(a,i) 
               PUT wC(i,a) += t1pp(i,a) 
            endif 
         ENDDO i
            endif 
         ENDDO a


         DO a
            xa(a)      = wVirtA_frag(a) 
            execute return_sval xa(a)  l  
            if l == icount  
         DO a1  
            xa1(a1)     = wVirtA_frag(a1) 
            execute return_sval xa1(a1)  s  
            if s == icount  
               GET wC_ao(mu,nu) 
               txp(mu,a1) = wC_ao(mu,nu)*ca(nu,a1) 
               tpp(a,a1)  = txp(mu,a1)*ca(mu,a) 
               t1pp(a,a1) = tpp(a,a1) 
              #execute return_diagonal4 t1pp 
              #tpp(a,a1) -= t1pp(a,a1) 
               PUT wC(a,a1) += tpp(a,a1) 
            endif 
         ENDDO a1  
            endif 
         ENDDO a


         DO i1  
            xi1(i1)     = wOccA_frag(i1) 
            execute return_sval xi1(i1)  l  
            if l == icount  
         DO i
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  s  
            if s == icount  
               GET wC_ao(mu,nu) 
               txp(mu,i) = wC_ao(mu,nu)*ca(nu,i) 
               tpp(i1,i)  = txp(mu,i)*ca(mu,i1) 
               t1pp(i1,i) = tpp(i1,i) 
              #execute return_diagonal4 t1pp 
              #tpp(i1,i) -= t1pp(i1,i) 
               PUT wC(i1,i) += tpp(i1,i) 
            endif 
         ENDDO i
            endif 
         ENDDO i1  


            endif 
         ENDDO nu
            endif 
         ENDDO mu
      ENDPARDO kfrag 

      sip_barrier 
      println "Done final formation of wC" 
      sip_barrier 


      PARDO ifrag, jfrag 
         icount = 0.0 
         DO iifrag 
            icount   += 1.0 
            IF iifrag == ifrag 
               exit 
            ENDIF 
         ENDDO iifrag 
         jcount = 0.0 
         DO jjfrag 
            jcount   += 1.0 
            IF jjfrag == jfrag 
               exit 
            ENDIF 
         ENDDO jjfrag 
        
         print_scalar icount 
         print_scalar jcount 

# ---------------------------------------------------------------------------- 
#     First stage --> form Vxxxj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO mu 
            x1(mu)     = wAO_frag(mu)     
            execute return_sval x1(mu)  m  
            if m == icount  
      DO nu 
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
      DO lambda 
            x3(lambda) = wAO_frag(lambda) 
            execute return_sval x3(lambda)  l  
            if l == jcount  

               DO j 
                  xj(j)             = wOccB_frag(j) 
                  execute return_sval xj(j) pcount 
                  if pcount == jcount  
                        allocate LVxxxq(mu,nu,lambda,j) 
                  endif # pcount  
               ENDDO j 

      DO sigma 
            x4(sigma)  = wAO_frag(sigma) 
            execute return_sval x4(sigma)  s  
            if s == jcount  

                  aoint(mu,nu,lambda,sigma)  = 0.0 
                  execute compute_integral_batch aoint(mu,nu,lambda,sigma) #  1 1 2 2  

                  DO j 
                     xj(j)             = wOccB_frag(j) 
                     execute return_sval xj(j) pcount 
                     if pcount == jcount  
                        txxxq(mu,nu,lambda,j)   = aoint(mu,nu,lambda,sigma)*ca(sigma,j) 
                        LVxxxq(mu,nu,lambda,j) += txxxq(mu,nu,lambda,j) 
                     endif # pcount  
                  ENDDO j 

               endif # s 
      ENDDO sigma 


      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  

                  DO i 
                     xi(i)             = wOccA_frag(i) 
                     execute return_sval xi(i) pcount 
                     if pcount == icount  
                        txpxq(mu,i,lambda,j)      = LVxxxq(mu,nu,lambda,j)*ca(nu,i) 
                        PUT Vxpxq(mu,i,lambda,j) += txpxq(mu,i,lambda,j) 
                     endif # pcount == icount  
                  ENDDO i 

                  DO i1 
                     xi1(i1)           = wOccA_frag(i1) 
                     execute return_sval xi1(i1) pcount 
                     if pcount == icount  
                        tpxxq(i1,nu,lambda,j)      = LVxxxq(mu,nu,lambda,j)*ca(mu,i1) 
                        PUT Vpxxq(i1,nu,lambda,j) += tpxxq(i1,nu,lambda,j) 
                     endif # pcount == icount  
                  ENDDO i1 

                  DO j1  
                     xj1(j1)             = wOccB_frag(j1) 
                     execute return_sval xj1(j1) pcount 
                     if pcount == jcount  
                        txxqq(mu,nu,j1,j)      = LVxxxq(mu,nu,lambda,j)*ca(lambda,j1) 
                        PUT Vxxqq(mu,nu,j1,j) += txxqq(mu,nu,j1,j) 
                     endif # pcount == icount  
                  ENDDO j1  

             endif # s 
      ENDDO j 

               DO j 
                  xj(j)             = wOccB_frag(j) 
                  execute return_sval xj(j) pcount 
                  if pcount == jcount  
                        deallocate LVxxxq(mu,nu,lambda,j) 
                  endif # pcount  
               ENDDO j 

             endif # l 
      ENDDO lambda 
             endif # n 
      ENDDO nu 
             endif # m 
      ENDDO mu

# ---------------------------------------------------------------------------- 
#     Done second stage --> form Vixxj (1122) 
# ---------------------------------------------------------------------------- 

      print_scalar mone 
      ENDPARDO ifrag, jfrag 

      sip_barrier 
      println "Done first two stages of two-electron integral tranfsormations" 
      execute enable_debug_print 

      PARDO ifrag, jfrag 
         icount = 0.0 
         DO iifrag 
            icount   += 1.0 
            IF iifrag == ifrag 
               exit 
            ENDIF 
         ENDDO iifrag 
         jcount = 0.0 
         DO jjfrag 
            jcount   += 1.0 
            IF jjfrag == jfrag 
               exit 
            ENDIF 
         ENDDO jjfrag 
        
        
         print_scalar icount 
         print_scalar jcount 

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vxibj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO mu
            x1(mu)     = wAO_frag(mu)     
            execute return_sval x1(mu)  m  
            if m == icount  
      DO i
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  
      DO lambda
            x3(lambda) = wAO_frag(lambda) 
            execute return_sval x3(lambda)  l  
            if l == jcount  

                  GET                    Vxpxq(mu,i,lambda,j) 

                  DO b 
                     xb(b)             = wVirtB_frag(b) 
                     execute return_sval xb(b) pcount 
                     if pcount == jcount  
                        txpqq(mu,i,b,j)      = Vxpxq(mu,i,lambda,j)*ca(lambda,b) 
                        PUT Vxpbq(mu,i,b,j) += txpqq(mu,i,b,j) 
                     endif # pcount == jcount  
                  ENDDO b 

             endif # l 
      ENDDO lambda
             endif # s 
      ENDDO j 
             endif # n 
      ENDDO i
             endif # m 
      ENDDO mu

     #print_scalar mone 

# ---------------------------------------------------------------------------- 
#     Done third stage --> form Vxibj (1122) 
# ---------------------------------------------------------------------------- 

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vixbj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO i 
            xi(i)      = wOccA_frag(i)     
            execute return_sval xi(i)  m  
            if m == icount  
      DO nu
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  
      DO lambda
            x3(lambda) = wAO_frag(lambda) 
            execute return_sval x3(lambda)  l  
            if l == jcount  

                  GET                    Vpxxq(i,nu,lambda,j) 

                  DO b 
                     xb(b)             = wVirtB_frag(b) 
                     execute return_sval xb(b) pcount 
                     if pcount == jcount  
                        tpxqq(i,nu,b,j)      = Vpxxq(i,nu,lambda,j)*ca(lambda,b) 
                        PUT Vixbj(i,nu,b,j) += tpxqq(i,nu,b,j) 
                     endif # pcount == icount  
                  ENDDO b 

                  DO j1 
                     xj1(j1)            = wOccB_frag(j1) 
                     execute return_sval xj1(j1) pcount 
                     if pcount == jcount  
                        tpxqq(i,nu,j1,j)      = Vpxxq(i,nu,lambda,j)*ca(lambda,j1) 
                        PUT Vixjj(i,nu,j1,j) += tpxqq(i,nu,j1,j) 
                     endif # pcount == icount  
                  ENDDO j1  

             endif # l 
      ENDDO lambda
             endif # s 
      ENDDO j 
             endif # n 
      ENDDO nu
             endif # m 
      ENDDO i 

     #print_scalar mone 
#
      DO nu 
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
      DO j1 
            xj1(j1)    = wOccB_frag(j1) 
            execute return_sval xj1(j1)  l  
            if l == jcount  
      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  
      DO mu 
            x1(mu)     = wAO_frag(mu)     
            execute return_sval x1(mu)  m  
            if m == icount  

                  GET                 Vxxqq(mu,nu,j1,j) 

                  DO a 
                     xa(a)             = wVirtA_frag(a) 
                     execute return_sval xa(a) pcount 
                     if pcount == icount  
                        tpxqq(a,nu,j1,j)      = Vxxqq(mu,nu,j1,j)*ca(mu,a) 
                        PUT Vaxjj(a,nu,j1,j) += tpxqq(a,nu,j1,j) 
                     endif # pcount == icount  
                  ENDDO a 

             endif # m 
      ENDDO mu 
             endif # s 
      ENDDO j 
             endif # l 
      ENDDO j1 
             endif # n 
      ENDDO nu 

     #print_scalar mone 

# ---------------------------------------------------------------------------- 

# ---------------------------------------------------------------------------- 
#     Done third stage --> form Vixbj (1122) 
# ---------------------------------------------------------------------------- 

     #print_scalar mone 
      ENDPARDO ifrag, jfrag 

      println "Done third stage of two-electron integral tranfsormations" 
      sip_barrier 

      PARDO ifrag, jfrag 
        icount = 0.0 
        DO iifrag 
           icount   += 1.0 
           IF iifrag == ifrag 
              exit 
           ENDIF 
        ENDDO iifrag 
        jcount = 0.0 
        DO jjfrag 
           jcount   += 1.0 
           IF jjfrag == jfrag 
              exit 
           ENDIF 
        ENDDO jjfrag 
        
        #print_scalar icount 
        #print_scalar jcount 

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Vaibj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO mu 
            x1(mu)     = wAO_frag(mu)     
            execute return_sval x1(mu)  m  
            if m == icount  
      DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
      DO b 
            xb(b)      = wVirtB_frag(b) 
            execute return_sval xb(b)  l  
            if l == jcount  
      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  

                  GET               Vxpbq(mu,i,b,j) 

                  DO a 
                     xa(a)             = wVirtA_frag(a) 
                     execute return_sval xa(a) pcount 
                     if pcount == icount  
                        tppqq(a,i,b,j)      = Vxpbq(mu,i,b,j)*ca(mu,a) 
                        PUT Vaibj(a,i,b,j) += tppqq(a,i,b,j) 
                     endif # pcount == icount  
                  ENDDO a 

             endif # s 
      ENDDO j 
             endif # l 
      ENDDO b 
             endif # n 
      ENDDO i 
             endif # m 
      ENDDO mu 

     #print_scalar mone 

# ---------------------------------------------------------------------------- 
#     Done Fourth stage --> form Vaibj (1122) 
# ---------------------------------------------------------------------------- 

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viabj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO i 
            xi(i)      = wOccA_frag(i)     
            execute return_sval xi(i)  m  
            if m == icount  
      DO nu 
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
      DO b 
            xb(b)      = wVirtB_frag(b) 
            execute return_sval xb(b)  l  
            if l == jcount  
      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  

                  GET               Vixbj(i,nu,b,j)  

                  DO a 
                     xa(a)             = wVirtA_frag(a) 
                     execute return_sval xa(a) pcount 
                     if pcount == icount  
                        tppqq(i,a,b,j)      = Vixbj(i,nu,b,j)*ca(nu,a) 
                        PUT Viabj(i,a,b,j) += tppqq(i,a,b,j) 
                     endif # pcount == icount  
                  ENDDO a 

             endif # s 
      ENDDO j 
             endif # l 
      ENDDO b 
             endif # n 
      ENDDO nu 
             endif # m 
      ENDDO i 

     #print_scalar mone 
#
      DO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
      DO nu 
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
      DO j1 
            xj1(j1)    = wOccB_frag(j1) 
            execute return_sval xj1(j1)  l  
            if l == jcount  
      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  

                  GET                Vaxjj(a,nu,j1,j) 

                  DO a1 
                     xa1(a1)           = wVirtA_frag(a1) 
                     execute return_sval xa1(a1) pcount 
                     if pcount == icount  
                        tppqq(a,a1,j1,j)      = Vaxjj(a,nu,j1,j)*ca(nu,a1) 
                        PUT Vaajj(a,a1,j1,j) += tppqq(a,a1,j1,j) 
                     endif # pcount == icount  
                  ENDDO a1 

             endif # s 
      ENDDO j 
             endif # l 
      ENDDO j1 
             endif # n 
      ENDDO nu 
             endif # m 
      ENDDO a 

     #print_scalar mone 

# ---------------------------------------------------------------------------- 
#     Done fourth stage --> form Viabj (1122) 
# ---------------------------------------------------------------------------- 

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viijj (1122) 
# ---------------------------------------------------------------------------- 
#
      DO i 
            xi(i)      = wOccA_frag(i)     
            execute return_sval xi(i)  m  
            if m == icount  
      DO nu 
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
      DO j1 
            xj(j1)     = wOccB_frag(j1) 
            execute return_sval xj(j1)  l  
            if l == jcount  
      DO j 
            xj1(j)     = wOccB_frag(j) 
            execute return_sval xj1(j)  s  
            if s == jcount  

                  GET                Vixjj(i,nu,j1,j) 

                  DO i1 
                     xi1(i1)            = wOccA_frag(i1) 
                     execute return_sval xi1(i1) pcount 
                     if pcount == icount  
                        tppqq(i,i1,j1,j)      = Vixjj(i,nu,j1,j)*ca(nu,i1) 
                        PUT Viijj(i,i1,j1,j) += tppqq(i,i1,j1,j) 
                     endif # pcount == icount  
                  ENDDO i1 

             endif # s 
      ENDDO j 
             endif # l 
      ENDDO j1 
             endif # n 
      ENDDO nu 
             endif # m 
      ENDDO i 

     #print_scalar mone 

# ---------------------------------------------------------------------------- 
#     Done fourth stage --> form Viabj (1122) 
# ---------------------------------------------------------------------------- 

      ENDPARDO ifrag, jfrag 

      sip_barrier 

      PARDO jfrag
        jcount = 0.0 
        DO jjfrag 
           jcount   += 1.0 
           IF jjfrag == jfrag 
              exit 
           ENDIF 
        ENDDO jjfrag 
       #print_scalar jcount 
      DO ifrag 
        icount = 0.0 
        DO iifrag 
           icount   += 1.0 
           IF iifrag == ifrag 
              exit 
           ENDIF 
        ENDDO iifrag 
        
        #print_scalar icount 

# ---------------------------------------------------------------------------- 
#     Compute E^(20) on all dimers  
# ---------------------------------------------------------------------------- 
#
      DO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
      DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
      DO b 
            xb(b)      = wVirtB_frag(b) 
            execute return_sval xb(b)  l  
            if l == jcount  
      DO j 
            xj(j)      = wOccB_frag(j) 
            execute return_sval xj(j)  s  
            if s == jcount  
         
            if icount != jcount 

                  GET                         Vaibj(a,i,b,j)  
                  tppqq(a,i,b,j)            = Vaibj(a,i,b,j) 
                  t1ppqq(a,i,b,j)           = Vaibj(a,i,b,j) 
                  execute energy_denominator_rhf  tppqq(a,i,b,j) fock_a  
                  etemp                     = tppqq(a,i,b,j)*t1ppqq(a,i,b,j)  
                 #print_scalar etemp 
                  t20disp(ifrag,jfrag)      = etemp 
                  PUT e20disp(ifrag,jfrag) += t20disp(ifrag,jfrag) 

            endif # icount != jcount 

            if icount == jcount 

                  GET                         Vaibj(a,i,b,j)  
                  GET                         Vaibj(a,j,b,i)  
                  tppqq(a,i,b,j)            = Vaibj(a,i,b,j) 
                  t2ppqq(a,i,b,j)           = Vaibj(a,i,b,j) 
                  t3ppqq(a,j,b,i)           = Vaibj(a,j,b,i) 
                  t1ppqq(a,i,b,j)           = t3ppqq(a,j,b,i) 
                  tppqq(a,i,b,j)           *= 2.0  
                  tppqq(a,i,b,j)           -= t1ppqq(a,i,b,j)   
                  execute energy_denominator_rhf  t2ppqq(a,i,b,j) fock_a  
                  etemp                     = tppqq(a,i,b,j)*t2ppqq(a,i,b,j)  
                 #print_scalar etemp 
                  t20disp(ifrag,jfrag)      = etemp 
                  PUT e20disp(ifrag,jfrag) += t20disp(ifrag,jfrag) 

            endif # icount != jcount 

            endif # s 
      ENDDO j 
            endif # l 
      ENDDO b 
            endif # n 
      ENDDO i 
            endif # m 
      ENDDO a 

     #print_scalar mone 

# ---------------------------------------------------------------------------- 
#     Done Compute E^(20) on all dimers  
# ---------------------------------------------------------------------------- 

      ENDDO ifrag 
      ENDPARDO jfrag 

      sip_barrier 

      execute get_my_rank rank 

      if rank == 0.0 

         DO ifrag 
         DO jfrag 

            IF jfrag >= ifrag  

               GET                    e20disp(ifrag,jfrag) 
               t20disp(ifrag,jfrag) = e20disp(ifrag,jfrag)  
               execute print_block e20disp(ifrag,jfrag)

            ENDIF # jfrag >= ifrag  

         ENDDO jfrag 
         ENDDO ifrag 

      ENDIF 
#
      ENDPROC FRAG_TRAN    
#     ----------------- 
#
# -----------------------------------------------------------------------------
#
      PROC FORM_ELSTPOT 
#     ----------------- 
#
#     Form the contribution /sum_C V(a,i,C,C) 
#
#     Forward count 
#
      sip_barrier 
#
#
# Form the contribution from /sum_C Hai(C) 
#

      PARDO kfrag   
         icount = 0.0 
         DO kkfrag 
            icount   += 1.0 
            IF kkfrag == kfrag 
               exit 
            ENDIF 
         ENDDO kkfrag 
         DO mu 
            x1(mu)     = wAO_frag(mu)     
            execute return_sval x1(mu)  m  
            if m == icount  
         DO nu 
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  

               txx(mu,nu) = 0.0 
               execute return_h1frag txx(mu,nu) icount  

               do b 
                  xb(b) = wVirtB_frag(b) 
                  execute return_sval xb(b)  s  
                  if s == icount  
                     tbx(b,nu) = txx(mu,nu)*ca(mu,b) 

                     do j 
                        xj(j) = wOccB_frag(j) 
                        execute return_sval xj(j)  l  
                        if l == icount  
                           tbj(b,j) = tbx(b,nu)*ca(nu,j) 
                           PUT wC(b,j) += tbj(b,j) 
                        endif # s == icount 
                     enddo j 

                     do b1  
                        xb1(b1) = wVirtB_frag(b1) 
                        execute return_sval xb1(b1)  l  
                        if l == icount  
                           tpp(b,b1) = tbx(b,nu)*ca(nu,b1) 
                           t1pp(b,b1) = tpp(b,b1) 
                          #execute return_diagonal4 t1pp 
                          #tpp(b,b1) -= t1pp(b,b1) 
                           PUT wC(b,b1) += tpp(b,b1) 
                        endif # s == icount 
                     enddo b1  

                  endif # s == icount  
               enddo b 

               do i 
                  xi(i) = wOccB_frag(i) 
                  execute return_sval xi(i)  s  
                  if s == icount  
                     tpx(i,nu) = txx(mu,nu)*ca(mu,i) 

                     do j 
                        xj(j) = wOccB_frag(j) 
                        execute return_sval xj(j)  l  
                        if l == icount  
                           t1pp(i,j) = tpx(i,nu)*ca(nu,j) 
                           tpp(i,j) = t1pp(i,j) 
                          #execute return_diagonal4 tpp 
                          #t1pp(i,j) -= tpp(i,j) 
                           PUT wC(i,j) += t1pp(i,j) 
                        endif # s == icount 
                     enddo j 

                  endif # s == icount  
               enddo i 


            endif # n == icount  
      ENDDO nu 
            endif # m == icount  
      ENDDO mu 

      ENDPARDO kfrag 
      sip_barrier 
#
      ENDPROC FORM_ELSTPOT 
#     -------------------- 
#
# -----------------------------------------------------------------------------
# 
      PROC FORM_T1 
#     ------------ 
      esum = 0.0 
      et1_correction = 0.0  

      icount = 0.0 
      DO kfrag 
        icount += 1.0 

        PARDO a
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
        DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  

              GET        wC(a,i) 
              tai(a,i) = wC(a,i) 
              execute energy_denominator_rhf tai(a,i) fock_a  
              PUT t1old(a,i) = tai(a,i) 

            endif # n == icount  
        ENDDO  i 
            endif # m == icount  
        ENDPARDO a 
        sip_barrier 
# 
      ENDDO kfrag 
      sip_barrier
      println "Done forming initial t1" 

# Compute initial singles energy of solute  

      icount = 0.0 
      DO ifrag 
        icount += 1.0 
#
         esum = 0.0 
         et1_correction = 0.0  

         sip_barrier 
        PARDO a
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
        DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  

              GET        wC(a,i) 
              GET        t1old(a,i) 
             #execute dump_amp wC  
              etemp = t1old(a,i)*wC(a,i)  
              etemp*= 2.0  
              esum += etemp 

            endif # n == icount  
        ENDDO i 
            endif # m == icount  
        ENDPARDO a 
        sip_barrier 
 
        collective et1_correction += esum 
        if icount == solute 
           print_scalar et1_correction 
        endif 

        if icount == solute 
           e1old = et1_correction 
        endif 
# 
      ENDDO ifrag 
      sip_barrier

      esum = 0.0 
      et1_correction = 0.0  

# START singles iterations 

      DO kiter 

      esum = 0.0 
      et1_correction = 0.0  
      sip_barrier 

      icount = 0.0 
      DO ifrag 
         icount   += 1.0 
         sip_barrier 

         PARDO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
         DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
               tai(a,i)       = 0.0 
               PUT x1new(a,i) = tai(a,i) 
            endif 
         ENDDO i 
            endif 
         ENDPARDO a  
         sip_barrier 

         PARDO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
         DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  

               GET        wC(a,i) 
               tai(a,i) = wC(a,i) 
               PUT x1new(a,i) += tai(a,i) 

            endif # m == icount  
         ENDDO i 
            endif # n == icount  
         ENDPARDO a 


         PARDO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
         DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  

             DO a2 
                xa2(a2) = wVirtA_frag(a2) 
                execute return_sval xa2(a2) n2 
                if n2== icount  
                   GET              T1old(a2,i) 
                   GET              wC(a,a2) 
                   tpp(a,i)       = T1old(a2,i)*wC(a,a2) 
                   PUT x1new(a,i)+= tpp(a,i) 
                endif 
             ENDDO a2 

             DO i2 
                xi2(i2) = wOccA_frag(i2) 
                execute return_sval xi2(i2) n2 
                if n2== icount  
                   GET              T1old(a,i2) 
                   GET              wC(i,i2) 
                   tpp(a,i)       = T1old(a,i2)*wC(i,i2) 
                   tpp(a,i)      *= -1.0  
                   PUT x1new(a,i)+= tpp(a,i) 
                endif 
             ENDDO i2 

            endif # m == icount  
         ENDDO i 
            endif # n == icount  
         ENDPARDO a 


         PARDO a  
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
         DO i  
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
         DO a1  
            xa1(a1)    = wVirtA_frag(a1)     
            execute return_sval xa1(a1)  l  
            if l == icount  
         DO i1  
            xi1(i1)    = wOccA_frag(i1) 
            execute return_sval xi1(i1)  s  
            if s == icount  

               GET Viabj(i,a,a1,i1)  
               GET Vaajj(a,a1,i,i1) 
               GET     t1old(a1,i1) 

               tppqq(i,a,a1,i1)  = Viabj(i,a,a1,i1) 

               t2ppqq(a,a1,i,i1) = Vaajj(a,a1,i,i1) 
               t1ppqq(i,a,a1,i1) = t2ppqq(a,a1,i,i1) 

               tppqq(i,a,a1,i1) *= 2.0  
               tppqq(i,a,a1,i1) -= t1ppqq(i,a,a1,i1)

               tai(a,i) = tppqq(i,a,a1,i1)*t1old(a1,i1)

               PUT x1new(a,i) += tai(a,i) 

            endif # s == icount  
        ENDDO i1  
            endif # l == icount  
        ENDDO a1  
            endif # n == icount  
        ENDDO i  
            endif # m == icount  
        ENDPARDO a  
# 
      ENDDO ifrag 
      sip_barrier
# 
      icount = 0.0 
      DO ifrag 
         icount   += 1.0 
         sip_barrier 

        jcount = 0.0 
        DO jfrag 
            jcount   += 1.0 
        IF jfrag != ifrag     

        PARDO a  
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
        DO i   
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
        DO a1  
            xa1(a1)    = wVirtA_frag(a1)     
            execute return_sval xa1(a1)  l  
            if l == jcount  
        DO i1  
            xi1(i1)    = wOccA_frag(i1) 
            execute return_sval xi1(i1)  s  
            if s == jcount  

               GET Viabj(i,a,a1,i1)  
               GET t1old(a1,i1) 

               tppqq(i,a,a1,i1)  = Viabj(i,a,a1,i1) 
               tppqq(i,a,a1,i1) *= 2.0  
               tai(a,i) = tppqq(i,a,a1,i1)*t1old(a1,i1)

               PUT x1new(a,i) += tai(a,i) 

            endif # s == icount  
        ENDDO i1  
            endif # l == icount  
        ENDDO a1   
            endif # n == icount  
        ENDDO i  
            endif # m == icount  
        ENDPARDO a  
        ENDIF # ifrag != jfrag  
        ENDDO jfrag 
      ENDDO ifrag 

      sip_barrier

      icount = 0.0 
      DO ifrag 
         icount   += 1.0 
         sip_barrier 
# 
        PARDO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
        DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  

               GET        x1new(a,i) 
               GET        wC(a,i) 
               tai(a,i) = x1new(a,i) 
               execute energy_denominator_rhf tai(a,i) fock_a  
               PUT t1old(a,i) = tai(a,i) 

        if icount == solute 
               etemp = tai(a,i)*wC(a,i)  
               etemp*= 2.0  
               esum += etemp 
        endif 

            endif # n == icount  
        ENDDO i 
            endif # m == icount  
        ENDPARDO a 
        sip_barrier
# 
      ENDDO ifrag 
      sip_barrier
# 
      icount = 0.0 
      DO ifrag 
         icount   += 1.0 
      if icount == solute 
         collective et1_correction += esum 
         print_scalar et1_correction 

      endif 

      ENDDO ifrag 

      e1new = et1_correction 
      ediff = e1new-e1old 
      if ediff < 0.0 
         ediff *= -1.0 
      endif 

      if ediff <= ecrit
         exit 
      endif 
      e1old = e1new 

      ENDDO kiter 


# 
      ENDPROC FORM_T1 
#     --------------- 
#
# -----------------------------------------------------------------------------
# 
      PROC FORM_T2_GUESS 
#     ------------------ 

      sip_barrier 
     
      esum = 0.0 

      icount = 0.0 
      DO ifrag 
        icount += 1.0 
        IF icount == solute  
        IF icount > solute  
           exit 
        ENDIF
#
      PARDO a
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  m  
         if m == icount  
      DO i  
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n  
         if n == icount  
      DO a1  
         xa1(a1)    = wVirtA_frag(a1)     
         execute return_sval xa1(a1) m1 
         if m1== icount  
      DO i1  
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n1 
         if n1== icount  

         GET                Vaibj(a,i,a1,i1)  
         xaiai(a,i,a1,i1) = 0.0  

         jcount = 0.0 
         DO jfrag 
            jcount += 1.0 
            if ifrag !=jfrag  
            DO b 
               xb(b)      = wVirtB_frag(b) 
               execute return_sval xb(b)  l  
               if l == jcount  
            DO j 
               xj(j)      = wOccB_frag(j) 
               execute return_sval xj(j)  s  
               if s == jcount  

                 #GET                         Viabj(j,b,a1,i1,ii) 
                  GET                         Viabj(i1,a1,b,j) 
                  GET                         Vaibj(a,i,b,j)  
                  tppqq(a,i,b,j)            = Vaibj(a,i,b,j) 
                  t2ppqq(i1,a1,b,j)         = Viabj(i1,a1,b,j) 
                  execute energy_denominator_rhf  tppqq(a,i,b,j) fock_a  
                  t3ppqq(b,j,a1,i1)         = t2ppqq(i1,a1,b,j)  
                  t1ppqq(a,i,a1,i1)         = tppqq(a,i,b,j)*t3ppqq(b,j,a1,i1) 
                  xaiai(a,i,a1,i1)         += t1ppqq(a,i,a1,i1) 

               endif 

            ENDDO j 
               endif 
            ENDDO b 
            endif # jcount != icount 
         ENDDO jfrag 

         t1ppqq(a1,i1,a,i)     = xaiai(a,i,a1,i1) 
         tppqq(a,i,a1,i1)      = xaiai(a,i,a1,i1) 
         tppqq(a,i,a1,i1)     += Vaibj(a,i,a1,i1) 
         t1ppqq(a1,i1,a,i)     = t1ppqq(a1,i1,a,i) 

         PUT T20aiai(a,i,a1,i1)+= tppqq(a,i,a1,i1) 
         PUT T20aiai(a1,i1,a,i)+= t1ppqq(a1,i1,a,i) 

         endif 
      ENDDO i1  
         endif 
      ENDDO a1  
         endif 
      ENDDO i  
         endif 
      ENDPARDO a  
      sip_barrier 

      PARDO a
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
      DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
      DO a1 
            xa1(a1)     = wVirtA_frag(a1)     
            execute return_sval xa1(a1) m1 
            if m1== icount  
      DO i1 
            xi1(i1)     = wOccA_frag(i1) 
            execute return_sval xi1(i1) n1 
            if n1== icount  

               GET                T20aiai(a,i,a1,i1) 
               GET                Vaibj(a,i,a1,i1)  
               GET                Vaibj(a,i1,a1,i)  

               tppqq(a,i,a1,i1) = T20aiai(a,i,a1,i1) 

               execute energy_denominator_rhf tppqq(a,i,a1,i1) fock_a  
               PUT T2old(a,i,a1,i1) = tppqq(a,i,a1,i1) 

               t1ppqq(a,i,a1,i1) = Vaibj(a,i,a1,i1)  
               t3ppqq(a,i1,a1,i) = Vaibj(a,i1,a1,i)  
               t2ppqq(a,i,a1,i1)   = t3ppqq(a,i1,a1,i) 
               t1ppqq(a,i,a1,i1)*= 2.0  
               t1ppqq(a,i,a1,i1)-= t2ppqq(a,i,a1,i1) 

               etemp = tppqq(a,i,a1,i1)*t1ppqq(a,i,a1,i1) 
               esum += etemp 

            endif 
      ENDDO i1  
            endif 
      ENDDO a1  
            endif 
      ENDDO i  
            endif 

      ENDPARDO a 
# 
        ENDIF #icount == solute  
      ENDDO ifrag 
      sip_barrier

      collective et2_correction += esum 
      print_scalar et2_correction 
      e2old = et2_correction  
# 
      ENDPROC FORM_T2_GUESS 
#     --------------------- 
# 
# -----------------------------------------------------------------------------
# 
      PROC FORM_T2_ITERS  
#     ------------------ 
# 
      icount = 0.0 
      DO isolute  
         icount += 1.0 
#
      DO kiter 
       
        et2_correction = 0.0 
        esum = 0.0  

        sip_barrier 
        PARDO a
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  m  
         if m == icount  
        DO i
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n  
         if n == icount  
        DO a1 
         xa1(a1)    = wVirtA_frag(a1)     
         execute return_sval xa1(a1) m1 
         if m1== icount  
        DO i1 
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n1 
         if n1== icount  

              GET                    T20aiai(a,i,a1,i1) 
              PUT T2new(a,i,a1,i1) = T20aiai(a,i,a1,i1) 

         endif 
        ENDDO i1 
         endif 
        ENDDO a1 
         endif 
        ENDDO i 
         endif 
        ENDPARDO a 

        PARDO mu
         x1(mu)     = wAO_frag(mu)     
         execute return_sval x1(mu)  m  
         if m == icount  
        DO i 
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n  
         if n == icount  
        DO nu 
         x2(nu)     = wAO_frag(nu)     
         execute return_sval x2(nu)  m1 
         if m1== icount  
        DO i1 
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n1 
         if n1== icount  

              txpxq(mu,i,nu,i1)       = 0.0 
              PUT TAO_ab(mu,i,nu,i1)  = txpxq(mu,i,nu,i1) 
              PUT T2AO_ab(mu,i,nu,i1) = txpxq(mu,i,nu,i1) 

         endif 
        ENDDO i1 
         endif 
        ENDDO nu 
         endif 
        ENDDO i
         endif 
        ENDPARDO mu 
       
        sip_barrier 

# Form backtransformed amplitudes 

     PARDO mu 
         x1(mu)     = wAO_frag(mu)     
         execute return_sval x1(mu)  m  
         if m == icount  
     DO i
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n1 
         if n1== icount  
     DO a
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  n  
         if n == icount  
     DO j
         xj(j)      = wOccB_frag(j) 
         execute return_sval xj(j)  m1 
         if m1== icount  
#
         taixj(a,i,mu,j) = 0.0

          DO b

              xb(b)            = wVirtB_frag(b)     
              execute return_sval xb(b)  pcount   
              if pcount == icount  

                 GET                T2old(a,i,b,j) 
                 T1aixj(a,i,mu,j) = T2old(a,i,b,j)*ca(mu,b)
                 Taixj(a,i,mu,j) += T1aixj(a,i,mu,j)

              endif # pcount == icount  

          ENDDO b

          DO nu

              x2(nu)            = wAO_frag(nu)     
              execute return_sval x2(nu)  pcount   
              if pcount == icount  

                 Txixi(nu,i,mu,j)       = Taixj(a,i,mu,j)*ca(nu,a)
                 PUT TAO_ab(nu,i,mu,j) += Txixi(nu,i,mu,j)

              endif # pcount == icount  

           ENDDO nu

         endif 
       ENDDO j
         endif 
       ENDDO a
         endif 
       ENDDO i 
         endif
       ENDPARDO mu

        sip_barrier 
#
# Do Ladder contraction 
#
      PARDO mu  
         x1(mu)     = wAO_frag(mu)     
         execute return_sval x1(mu)  m  
         if m == icount  
      DO nu  
            x2(nu)     = wAO_frag(nu) 
            execute return_sval x2(nu)  n  
            if n == icount  
      DO lambda   
            x3(lambda) = wAO_frag(lambda) 
            execute return_sval x3(lambda)  l  
            if l == icount  
      DO sigma  
            x4(sigma)  = wAO_frag(sigma) 
            execute return_sval x4(sigma)  s  
            if s == icount  

                 aoint(lambda,mu,sigma,nu)  = 0.0 
                 execute compute_integral_batch aoint(lambda,mu,sigma,nu) #  1 1 2 2  

                 DO i 
                     xi(i)             = wOccA_frag(i) 
                     execute return_sval xi(i) pcount 
                     if pcount == icount  
                 DO j 
                     xj(j)             = wOccB_frag(j) 
                     execute return_sval xj(j) jcount 
                     if jcount == icount  

                     GET                       TAO_ab(lambda,i,sigma,j) 
                     txixi(mu,i,nu,j)        = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,j) 
                     PUT T2AO_ab(mu,i,nu,j) += txixi(mu,i,nu,j) 

                     endif # jcount == icount 
                 ENDDO j 
                     endif # pcount == icount  
                 ENDDO i 

            endif # s == icount  
      ENDDO sigma  
            endif # l == icount  
      ENDDO lambda  
            endif # n == icount  
      ENDDO nu  
            endif # m == icount  
      ENDPARDO mu   
#
# Add the WMEBJ term 
#
#     AA 
#
      PARDO a
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  m  
         if m == icount  
      DO i  
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n  
         if n == icount  
      DO a1  
         xa1(a1)    = wVirtA_frag(a1)     
         execute return_sval xa1(a1) m1 
         if m1== icount  
      DO i1  
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n1 
         if n1== icount  

         GET                 Viabj(i,a,a1,i1)  
         GET                 Vaajj(a1,a,i,i1) 

         t2ppqq(i,a,a1,i1) = Viabj(i,a,a1,i1) 
         tppqq(a,i,a1,i1)  = t2ppqq(i,a,a1,i1) 

         t3ppqq(a1,a,i,i1) = Vaajj(a1,a,i,i1) 
         t1ppqq(a,i,a1,i1) = t3ppqq(a1,a,i,i1) 

         tppqq(a,i,a1,i1) -= t1ppqq(a,i,a1,i1)  

         DO b 
         DO j 

            xb(b)      = wVirtB_frag(b) 
            xj(j)      = wOccB_frag(j) 

            execute return_sval xb(b)  l  
            execute return_sval xj(j)  s  

            if l == icount  
            if s == icount  
               GET                   T2old(a1,i1,b,j) 
               xaiai(a,i,b,j)      = tppqq(a,i,a1,i1)*T2old(a1,i1,b,j)  
               t2ppqq(b,j,a,i)     = xaiai(a,i,b,j) 
               PUT T2new(a,i,b,j) += xaiai(a,i,b,j) 
               PUT T2new(b,j,a,i) += t2ppqq(b,j,a,i) 
            endif 
            endif 

         ENDDO j 
         ENDDO b 

         endif 
      ENDDO i1  
         endif 
      ENDDO a1  
         endif 
      ENDDO i  
         endif 
      ENDPARDO a  
#
#     AB 
#
      PARDO a1  
         xa1(a1)    = wVirtA_frag(a1)     
         execute return_sval xa1(a1) m1 
         if m1== icount  
      DO a
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  m  
         if m == icount  
      DO i  
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n  
         if n == icount  
      DO i1  
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n1 
         if n1== icount  

         GET                 T2old(a1,i1,a,i) 
         GET                 T2old(a1,i,a,i1)  

         tppqq(a1,i1,a,i)  = T2old(a1,i1,a,i) 
         t3ppqq(a1,i,a,i1) = T2old(a1,i,a,i1)  
         t1ppqq(a1,i1,a,i) = t3ppqq(a1,i,a,i1)  

         tppqq(a1,i1,a,i) -= t1ppqq(a1,i1,a,i)  
         t2ppqq(a1,i1,i,a) = tppqq(a1,i1,a,i) 

         DO b 
         DO j 

            xb(b)      = wVirtB_frag(b) 
            xj(j)      = wOccB_frag(j) 

            execute return_sval xb(b)  l  
            execute return_sval xj(j)  s  

            if l == icount  
            if s == icount  
               GET                     Viabj(i,a,b,j) 
               xaiai(a1,i1,b,j)      = t2ppqq(a1,i1,i,a)*Viabj(i,a,b,j)  
               t3ppqq(b,j,a1,i1)     = xaiai(a1,i1,b,j) 

               PUT T2new(a1,i1,b,j) += xaiai(a1,i1,b,j) 
               PUT T2new(b,j,a1,i1) += t3ppqq(b,j,a1,i1) 
            endif 
            endif 

         ENDDO j 
         ENDDO b 

         endif 
      ENDDO i1  
         endif 
      ENDDO i  
         endif 
      ENDDO a  
         endif 
      ENDPARDO a1  
#
#     AB 
#
      PARDO a
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  m  
         if m == icount  
      DO j   
         xj(j)      = wOccB_frag(j) 
         execute return_sval xj(j)  n  
         if n == icount  
      DO i1  
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n1 
         if n1== icount  
      DO b1  
         xb1(b1)    = wVirtB_frag(b1)     
         execute return_sval xb1(b1) m1 
         if m1== icount  

         GET                 T2old(a,i1,b1,j) 
         t1ppqq(a,i1,b1,j) = T2old(a,i1,b1,j) 

         DO b 
         DO i 

            xb(b)      = wVirtB_frag(b) 
            xi(i)      = wOccA_frag(i) 

            execute return_sval xb(b)  l  
            execute return_sval xi(i)  s  

            if l == icount  
            if s == icount  
               GET                   Vaajj(b,b1,i1,i) 
               xaiai(a,i,b,j)      = t1ppqq(a,i1,b1,j)*Vaajj(b,b1,i1,i)   
               xaiai(a,i,b,j)     *= -1.0  
               t3ppqq(b,j,a,i)     = xaiai(a,i,b,j) 

               PUT T2new(a,i,b,j) += xaiai(a,i,b,j) 
               PUT T2new(b,j,a,i) += t3ppqq(b,j,a,i) 
            endif 
            endif 

         ENDDO i 
         ENDDO b 

         endif 
      ENDDO b1  
         endif 
      ENDDO i1  
         endif 
      ENDDO j  
         endif 
      ENDPARDO a 
#
#     v^2 o^4 term  
#
      PARDO a  
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  m  
         if m == icount  
      DO b  
         xb(b)      = wVirtB_frag(b)     
         execute return_sval xb(b)  m1 
         if m1== icount  
      DO i1  
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n  
         if n == icount  
      DO j1  
         xj1(j1)    = wOccB_frag(j1) 
         execute return_sval xj1(j1) n1 
         if n1== icount  

         GET                 T2old(a,i1,b,j1) 
         t1ppqq(a,i1,b,j1) = T2old(a,i1,b,j1) 

         DO i 
         DO j 

            xi(i)      = wOccA_frag(i) 
            xj(j)      = wOccB_frag(j) 

            execute return_sval xi(i)  l  
            execute return_sval xj(j)  s  

            if l == icount  
            if s == icount  
               GET                   Viijj(i1,i,j1,j) 
               tppqq(i1,i,j1,j)    = Viijj(i1,i,j1,j) 
               xaiai(a,i,b,j)      = t1ppqq(a,i1,b,j1)*tppqq(i1,i,j1,j)  
               PUT T2new(a,i,b,j) += xaiai(a,i,b,j) 
            endif 
            endif 

         ENDDO j 
         ENDDO i 

         endif 
      ENDDO j1  
         endif 
      ENDDO i1  
         endif 
      ENDDO b  
         endif 
      ENDPARDO a 
# 
#    Perform final transformation of LADDER contribution
#    ---------------------------------------------------
#
        sip_barrier 
        PARDO nu 
         x1(nu)     = wAO_frag(nu)     
         execute return_sval x1(nu)  m  
         if m == icount  
        DO i
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n1 
         if n1== icount  
        DO j
         xj(j)      = wOccB_frag(j) 
         execute return_sval xj(j)  m1 
         if m1== icount  

#
              DO a
                 xa(a)     = wVirtA_frag(a)     
                 execute return_sval xa(a)  s  
                 if s == icount  
                    allocate LDaixj(a,i,nu,j)
                 endif 
              ENDDO a
#
              DO mu
                 x2(mu)     = wAO_frag(mu)     
                 execute return_sval x2(mu)  l  
                 if l == icount  
#
                 GET                T2AO_ab(mu,i,nu,j) 
                 txixj(mu,i,nu,j) = T2AO_ab(mu,i,nu,j) 
#
                 DO a
                    xa(a)     = wVirtA_frag(a)     
                    execute return_sval xa(a)  s  
                    if s == icount  
                       Taixj(a,i,nu,j)   = txixj(mu,i,nu,j)*ca(mu,a)
                       LDaixj(a,i,nu,j) += Taixj(a,i,nu,j)
                    endif 
                 ENDDO a

                 endif # l == icount  
#
              ENDDO mu

              DO a
                 xa(a)     = wVirtA_frag(a)     
                 execute return_sval xa(a)  l  
                 if l == icount  
              DO b
                 xb(b)     = wVirtB_frag(b)     
                 execute return_sval xb(b)  s  
                 if s == icount  
                 Tppqq(a,i,b,j)      = LDaixj(a,i,nu,j)*ca(nu,b)
                 PUT T2new(a,i,b,j) += Tppqq(a,i,b,j)
                 endif 
              ENDDO b
                 endif 
              ENDDO a
#
              DO a
                 xa(a)     = wVirtA_frag(a)     
                 execute return_sval xa(a)  s  
                 if s == icount  
                    deallocate LDaixj(a,i,nu,j)
                 endif 
              ENDDO a
#
         endif # m == icount  
        ENDDO j
         endif # n1== icount  
        ENDDO i  
         endif # m1== icount  
#
        ENDPARDO nu  
#
# Add the wC contributions 
#     PARDO p, p1  
#        tpp(p,p1) = 0.0 
#        PUT wC(p,p1) = tpp(p,p1)  
#     ENDPARDO p, p1  
      sip_barrier 
#  

      PARDO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
      DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
      DO a1 
            xa1(a1)     = wVirtA_frag(a1)     
            execute return_sval xa1(a1) m1 
            if m1== icount  
      DO i1 
            xi1(i1)     = wOccA_frag(i1) 
            execute return_sval xi1(i1) n1 
            if n1== icount  

             DO a2 
                xa2(a2) = wVirtA_frag(a2) 
                execute return_sval xa2(a2) n2 
                if n2== icount  
                   GET                    T2old(a2,i,a1,i1) 
                   GET                    wC(a,a2) 
                   t1pppp(a,i,a1,i1)    = T2old(a2,i,a1,i1)*wC(a,a2) 
                   PUT T2new(a,i,a1,i1)+= t1pppp(a,i,a1,i1) 
                endif 
             ENDDO a2 

             DO a2 
                xa2(a2) = wVirtA_frag(a2) 
                execute return_sval xa2(a2) n2 
                if n2== icount  
                   GET                    T2old(a,i,a2,i1) 
                   GET                    wC(a1,a2) 
                   t1pppp(a,i,a1,i1)    = T2old(a,i,a2,i1)*wC(a1,a2) 
                   PUT T2new(a,i,a1,i1)+= t1pppp(a,i,a1,i1) 
                endif 
             ENDDO a2 

             DO i2 
                xi2(i2) = wOccA_frag(i2) 
                execute return_sval xi2(i2) n2 
                if n2== icount  
                   GET                    T2old(a,i,a1,i2) 
                   GET                    wC(i1,i2) 
                   t1pppp(a,i,a1,i1)    = T2old(a,i,a1,i2)*wC(i1,i2) 
                   t1pppp(a,i,a1,i1)   *= -1.0  
                   PUT T2new(a,i,a1,i1)+= t1pppp(a,i,a1,i1) 
                endif 
             ENDDO i2 

             DO i2 
                xi2(i2) = wOccA_frag(i2) 
                execute return_sval xi2(i2) n2 
                if n2== icount  
                   GET                    T2old(a,i2,a1,i1) 
                   GET                    wC(i,i2) 
                   t1pppp(a,i,a1,i1)    = T2old(a,i2,a1,i1)*wC(i,i2) 
                   t1pppp(a,i,a1,i1)   *= -1.0  
                   PUT T2new(a,i,a1,i1)+= t1pppp(a,i,a1,i1) 
                endif 
             ENDDO i2 

            endif 
      ENDDO i1  
            endif 
      ENDDO a1  
            endif 
      ENDDO i  
            endif 
      ENDPARDO a  

      sip_barrier 

# Form the new ampllitude 
#
        PARDO a 
         xa(a)      = wVirtA_frag(a)     
         execute return_sval xa(a)  m  
         if m == icount  
        DO i  
         xi(i)      = wOccA_frag(i) 
         execute return_sval xi(i)  n  
         if n == icount  
        DO a1 
         xa1(a1)    = wVirtA_frag(a1)     
         execute return_sval xa1(a1) m1 
         if m1== icount  
        DO i1 
         xi1(i1)    = wOccA_frag(i1) 
         execute return_sval xi1(i1) n1 
         if n1== icount  

              GET                        T2new(a,i,a1,i1) 
              tppqq(a,i,a1,i1)         = T2new(a,i,a1,i1) 
              execute energy_denominator_rhf tppqq(a,i,a1,i1) fock_a  
              PUT T2old(a,i,a1,i1) = tppqq(a,i,a1,i1) 

         endif 
        ENDDO i1 
         endif
        ENDDO a1 
         endif 
        ENDDO i 
         endif 
        ENDPARDO a
      sip_barrier 

# Form the new energy 

      PARDO a 
            xa(a)      = wVirtA_frag(a)     
            execute return_sval xa(a)  m  
            if m == icount  
      DO i 
            xi(i)      = wOccA_frag(i) 
            execute return_sval xi(i)  n  
            if n == icount  
      DO a1 
            xa1(a1)     = wVirtA_frag(a1)     
            execute return_sval xa1(a1) m1 
            if m1== icount  
      DO i1 
            xi1(i1)     = wOccA_frag(i1) 
            execute return_sval xi1(i1) n1 
            if n1== icount  

               GET                T2old(a,i,a1,i1) 
               GET                Vaibj(a,i,a1,i1)  
               GET                Vaibj(a,i1,a1,i)  

               t1ppqq(a,i,a1,i1) = Vaibj(a,i,a1,i1)  
               t3ppqq(a,i1,a1,i) = Vaibj(a,i1,a1,i)  
               t2ppqq(a,i,a1,i1) = t3ppqq(a,i1,a1,i) 
               t1ppqq(a,i,a1,i1)*= 2.0  
               t1ppqq(a,i,a1,i1)-= t2ppqq(a,i,a1,i1) 

               etemp = T2old(a,i,a1,i1)*t1ppqq(a,i,a1,i1) 
               esum += etemp 

            endif 
      ENDDO i1  
            endif 
      ENDDO a1  
            endif 
      ENDDO i  
            endif 
      ENDPARDO a  
      sip_barrier

      collective et2_correction += esum 
      print_scalar et2_correction 
      e2new = et2_correction  

      ediff = e2new-e2old 
      if ediff < 0.0 
         ediff *= -1.0 
      endif 

      if ediff <= ecrit
         exit 
      endif 
      e2old = e2new 
#
      ENDDO kiter 
# 
      ENDDO isolute  
      sip_barrier

      et2_correction += et1_correction  
      print_scalar et2_correction 
# 
      ENDPROC FORM_T2_ITERS  
#     --------------------- 
# 
# -----------------------------------------------------------------------------
# 
# 
# -----------------------------------------------------------------------------
# 
#
#     Set fragment parameters   
#     ----------------------- 
#
# Restore the persistent arrays. 
      create DCa 
      create DFock_a
      sip_barrier
      restore_persistent Dca "ca" 
      restore_persistent DFock_a "fock_a"
      sip_barrier
      println "Done restoring persistent arrays" 
      DO mu
      DO p 
         GET        Dca(mu,p) 
         ca(mu,p) = Dca(mu,p) 
      ENDDO p 
      ENDDO mu  

      DO p  
      DO p1  
         GET            Dfock_a(p,p1) 
         fock_a(p,p1) = Dfock_a(p,p1) 
      ENDDO p1  
      ENDDO p  

      sip_barrier

#     Get memory requirements from integral calculation 
#     ------------------------------------------------- 
      imax = 0.0  
      zmax = 0.0  
      println "Start computing scratch memory" 
     #DO mu 
     #DO nu 
     #   txx(mu,nu) = 0.0
     #   execute compute_int_scratchmem txx(mu,nu) zmax imax 
         execute compute_int_scratchmem sxx zmax imax 
     #ENDDO nu 
     #ENDDO mu 
      println "Done computing scratch memory" 

      mone = -1.0 
      ecrit = cc_conv 
#
# Declare the solute fragment 
#
      solute = 1.0 
      CALL SET_FRAG_PARMS   
      sip_barrier 
      println "Done setting fragment parameters" 
#
#     Perform 2-el integral transformation and calculate second order energies   
#     ------------------------------------------------------------------------ 
#
      sip_barrier 
      CALL FRAG_TRAN 
      println "Done two-electron integral tranfsormations" 
      sip_barrier 
     #PARDO p, p1 
     #   tpp(p,p1) = 0.0 
     #   wC(p,p1) = tpp(p,p1)  
     #ENDPARDO p, p1 
      sip_barrier 
#
#     Form the electrostatic potential(complete) of all fragments  
#     ----------------------------------------------------------- 
#
      CALL FORM_ELSTPOT 
      sip_barrier 
      println "Done forming electrostatic potentials" 
#
#     Compute the CCPT(2) doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
#
      CALL FORM_T1 
      sip_barrier 
#
#     Compute the CCPT(2) doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
      CALL FORM_T2_GUESS 
      sip_barrier 
      CALL FORM_T2_ITERS 
      sip_barrier 
#
#
# -----------------------------------------------------------------------------
#
                           ENDSIAL TRANS_FRAG_FPARDO 
#
###############################################################################
#
