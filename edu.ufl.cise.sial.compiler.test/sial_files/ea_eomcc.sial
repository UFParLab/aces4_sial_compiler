
import "aces_defs.sial"
#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
			SIAL EA_EOMCCSD
#
#***********************************************************
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare indeces
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      index kiter    = 1, cc_iter
      index kk1      = 1, 1 
      index jj1      = 1, 1 
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
#
#     eom indeces
#
      index eomcycle = 1, 150
      index spdim = 1, 20 
      index spdim2 = 1, 20 
      index spdim20 = 1, 20 
      index j20 = 1, 20 
      index k20 = 1, 20 
      index j21 = 1, 21 
      index k21 = 1, 21 
      index jindex =1, 20
      index kindex =1, 20
      index jindex2 =1, 2 
      index kindex2 =1, 2 
      index jindex3 =1, 3 
      index kindex3 =1, 3 
      index jindex4 =1, 4 
      index kindex4 =1, 4 
      index jindex5 =1, 5 
      index kindex5 =1, 5 
      index jindex6 =1, 6 
      index kindex6 =1, 6 
      index jindex7 =1, 7 
      index kindex7 =1, 7
      index jindex8 =1, 8
      index kindex8 =1, 8
      index jindex9 =1, 9
      index kindex9 =1, 9
      index jindex10 =1, 10
      index kindex10 =1, 10
      index jindex11 =1, 11
      index kindex11 =1, 11
      index jindex12 =1, 12
      index kindex12 =1, 12
      index jindex13 =1, 13
      index kindex13 =1, 13
      index jindex14 =1, 14
      index kindex14 =1, 14
      index jindex15 =1, 15
      index kindex15 =1, 15
      index jindex16 =1, 16
      index kindex16 =1, 16
      index jindex17 =1, 17
      index kindex17 =1, 17
      index jindex18 =1, 18
      index kindex18 =1, 18
      index jindex19 =1, 19
      index kindex19 =1, 19
      index jindex20 =1, 20
      index kindex20 =1, 20
#
#  convergence correction
#
      index pp = bavirtorb, eavirtorb # norb
      index qq = bbvirtorb, ebvirtorb # norb
      index aa = bavirtorb, eavirtorb # norb
      index aa1= bavirtorb, eavirtorb # norb
      index bb = bbvirtorb, ebvirtorb # norb
      index bb1= bbvirtorb, ebvirtorb # norb
#
      temp        taaxx(a,a1,jj1,kk1) 
      temp        tbbxx(b,b1,jj1,kk1) 
      temp        tiixx(i,i1,jj1,kk1) 
      temp        tjjxx(j,j1,jj1,kk1) 
      distributed Sa1(a,kk1) 
      distributed Sb1(b,kk1) 
      distributed Si1(i,kk1) 
      distributed Sj1(j,kk1) 
#
# Declare arrays used in the EA-EOMCC 
# ----------------------------------- 
#
#     S and HS arrays 
#     --------------- 
#
      distributed S1a(a,kk1)
      distributed S2a_aa(a,kk1,a1,i1) 
      distributed S2a_bb(a,kk1,b,j) 
      distributed HS1a(a,kk1)
      distributed HS2a_aa(a,kk1,a1,i1) 
      distributed HS2a_bb(a,kk1,b,j) 
#
      distributed S1b(b,kk1) 
      distributed S2b_bb(b,kk1,b1,j1) 
      distributed S2b_aa(b,kk1,a,i) 
      distributed HS1b(b,kk1) 
      distributed HS2b_bb(b,kk1,b1,j1) 
      distributed HS2b_aa(b,kk1,a,i) 
#
      distributed S1a_h(a,kk1,k21) 
      distributed S1b_h(b,kk1,k21) 
#
      distributed HS1a_h(a,kk1,k20) 
      distributed HS1b_h(b,kk1,k20) 
#
      distributed SE1a(a,kk1) 
      distributed SE1b(b,kk1) 
      distributed SE2a_aa(a,kk1,a1,i1) 
      distributed SE2b_bb(b,kk1,b1,j1) 
      distributed SE2b_aa(b,kk1,a1,i1) 
      distributed SE2a_bb(a,kk1,b1,j1) 
#
      distributed SStarta1(a,kk1) 
      distributed SStarta2(a,kk1) 
      distributed SStarta3(a,kk1) 
      distributed SStarta4(a,kk1) 
      distributed SStarta5(a,kk1) 
      distributed SStarta6(a,kk1) 
      distributed SStarta7(a,kk1) 
      distributed SStarta8(a,kk1) 
      distributed SStarta9(a,kk1) 
      distributed SStarta10(a,kk1) 
      distributed SStarta11(a,kk1) 
      distributed SStarta12(a,kk1) 
#
      distributed SStartb1(b,kk1) 
      distributed SStartb2(b,kk1) 
      distributed SStartb3(b,kk1) 
      distributed SStartb4(b,kk1) 
      distributed SStartb5(b,kk1) 
      distributed SStartb6(b,kk1) 
      distributed SStartb7(b,kk1) 
      distributed SStartb8(b,kk1) 
      distributed SStartb9(b,kk1) 
      distributed SStartb10(b,kk1) 
      distributed SStartb11(b,kk1) 
      distributed SStartb12(b,kk1) 
#
      served S2a_aah(a,kk1,a1,i,k21) 
      served S2a_bbh(a,kk1,b1,j,k21) 
      served S2b_aah(b,kk1,a1,i,k21) 
      served S2b_bbh(b,kk1,b1,j,k21) 
#
      served HS2a_aah(a,kk1,a1,i,k20) 
      served HS2a_bbh(a,kk1,b1,j,k20) 
      served HS2b_aah(b,kk1,a1,i,k20) 
      served HS2b_bbh(b,kk1,b1,j,k20) 
#
#     CCSD amplitudes 
#     --------------- 
#
      distributed t1a(a,i) 
      distributed t1b(b,j) 
      served T2aa(a,i,a1,i1) 
      served T2bb(b,j,b1,j1) 
      served T2ab(a,i,b,j) 
#
#     Transformed integrals 
#     --------------------- 
#
      served VSpipi(p,i,p1,i1) 
      served VSqjqj(q,j,q1,j1) 
      served Vpiqj(p,i,q,j) 
      served VSaaai(a,a1,a2,i)  
      served VSbbbj(b,b1,b2,j)  
      served Vaabj(a,a1,b,j)  
      served Vbbai(b,b1,a,i)  
      served Vjbii(j,b,i,i1) 
      served Viabj(i,a,b,j) 
      served Vaajj(a,a1,j,j1) 
      served Vbbii(b,b1,i,i1) 
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1) 
#
#     HBAR 
#     ---- 
#
      distributed Uaa(a,a1)
      distributed Ubb(b,b1)
      distributed Uii(i1,i)
      distributed Ujj(j1,j)
      distributed Uia(i,a)
      distributed Ujb(j,b)
#
      served Wiiii(i,i1,i2,i3)
      served Wjjjj(j,j1,j2,j3)
      served Wiijj(i,i1,j,j1)
#
      served Waaia(a,a1,i,a2)
      served Wbbjb(b,b1,j,b2)
      served Waajb(a,a1,j,b2)
      served Wbbia(b,b1,i,a2)
#
      served Wiiia(i1,i,i2,a)
      served Wjjjb(j1,j,j2,b)
      served Wiijb(i1,i,j2,b)
      served Wjjia(j1,j,i2,a)
#
      served Wiiai(i,i1,a,i2)
      served Wiibj(i,i1,b,j)
      served Wjjai(j,j1,a,i)
      served Wjjbj(j,j1,b,j2)
#
      served Wiaai(i1,a1,a,i)
      served Wjbbj(j1,b1,b,j)
      served Wiabj(i,a,b,j)
      served Wjbai(j,b,a,i)
      served Wiibb(i1,i,b,b1)
      served Wjjaa(j1,j,a,a1)
#
      served Waaai(a,a1,a2,i)
      served Wbbbj(b,b1,b2,j)
      served Waabj(a,a1,b,j)
      served Wbbai(b,b1,a,i) 
#
# NOT USED ??? 
#
      served Waiaa(a,a1,i,a2) # HBAR_AIBC_aaaa
      served Wbjbb(b,b1,j,b2) # HBAR_AIBC_bbbb
      served Waibb(a,a1,j,b2) # HBAR_AIBC_aabb
      served Wbjaa(b,b1,i,a2) # HBAR_AIBC_bbaa
#
      served Wiaii(i,a,i1,i2) 
      served Wiajj(i,a,j,j1)  
      served Wjbii(j,b,i,i1)  
      served Wjbjj(j,b,j1,j2)  

      served Waiia(a,i,i1,a1)  
      served Wbjjb(b,j,j1,b1)  
      served Waijb(a,i,j,b)  
      served Wbjia(b,j,i,a)  
#
# temporary arrays 
# ---------------- 
#
      temp aoint(mu,nu,lambda,sigma) 
      temp tax(a,kk1) 
      temp t1ax(a,kk1) 
      temp t2ax(a,kk1) 
      temp t3ax(a,kk1) 
      temp tbx(b,kk1) 
      temp t1bx(b,kk1) 
      temp t2bx(b,kk1) 
      temp t3bx(b,kk1) 
      temp taiai(a,i,a1,i1)    
      temp tbjbj(b2,j1,b1,j)
      temp taibj(a2,i1,b1,j) 
      temp tbjai(b2,j1,a1,i)  
      temp tix(i,kk1) 
      temp t1ix(i,kk1) 
      temp tjx(j,kk1) 
      temp t1jx(j,kk1) 
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp tqq(q,q1) 
      temp t1qq(q,q1) 
      temp t2axs(a,kk1,k20)   
      temp t2bxs(b,kk1,k20)   
      temp t2pppp(p,p1,p2,p3) 
      temp t3pppp(p,p1,p2,p3) 
      temp t4pppp(p,p1,p2,p3) 
      temp tppqq(p,p1,q,q1) 
      temp t1ppqq(p,p1,q,q1) 
      temp t2ppqq(p,p1,q,q1) 
      temp t3ppqq(p,p1,q,q1) 
      temp tqqpp(q,q1,p,p1) 
      temp t1qqpp(q,q1,p,p1) 
      temp t2qqpp(q,q1,p,p1) 
      temp t3qqpp(q,q1,p,p1) 
      temp t4qqpp(q,q1,p,p1) 
      temp t2qqqq(q,q1,q2,q3) 
      temp t3qqqq(q,q1,q2,q3) 
      temp t4qqqq(q,q1,q2,q3) 
      temp taxai(a,kk1,a1,i)    
      temp t1axai(a,kk1,a1,i)    
      temp t2axai(a,kk1,a1,i)    
      temp t3axai(a,kk1,a1,i)    
      temp taxaix(a,kk1,a1,i,k20)     
      temp taxbjx(a,kk1,b1,j,k20)     
      temp taxbj(a,kk1,b2,j)    
      temp t1axbj(a,kk1,b2,j)    
      temp t2axbj(a,kk1,b2,j)    
      temp t3axbj(a,kk1,b2,j)    
      temp tbxbjx(b,kk1,b1,j,k20)     
      temp tbxaix(b,kk1,a1,i,k20)     
      temp tmxbj(mu,kk1,b,j)    
      temp tmxai(mu,kk1,a,i)    
      temp tmxmi(mu,kk1,nu,i)    
      temp tmxmj(mu,kk1,nu,j)    
      temp taxaa(a,kk1,a1,i)     
      temp t1axaa(a,kk1,a1,i)     
      temp taxbb(a,kk1,b1,j)     
      temp t1axbb(a,kk1,b1,j)     
      temp tbxbb(b,kk1,b1,j) 
      temp t1bxbb(b,kk1,b1,j) 
      temp tbxaa(b,kk1,a1,i) 
      temp t1bxaa(b,kk1,a1,i) 
      temp tbxbj(b,kk1,b1,j)   
      temp t1bxbj(b,kk1,b1,j)   
      temp t2bxbj(b,kk1,b1,j)   
      temp t3bxbj(b,kk1,b1,j)   
      temp tbxai(b1,kk1,a,i)    
      temp t1bxai(b1,kk1,a,i)    
      temp t2bxai(b1,kk1,a,i)    
      temp t3bxai(b1,kk1,a,i)    
      temp taxS(a,kk1,k21)    
      temp tbxS(b,kk1,k21)    
      temp gaxS(a,kk1,k20)    
      temp gbxS(b,kk1,k20)    

      distributed Xixii(i,kk1,i1,i2) 
      distributed Xjxjj(j,kk1,j1,j2) 
      distributed Xjxii(j,kk1,i1,i2) 
      distributed Xixjj(i,kk1,j1,j2) 
      temp tixii(i,kk1,i1,i2) 
      temp tjxjj(j,kk1,j1,j2) 
      temp tjxii(j,kk1,i1,i2) 
      temp tixjj(i,kk1,j1,j2) 
      temp t1ixjj(i,kk1,j1,j2) 

      temp taxais(a,kk1,a1,i1,k21) 
      temp tbxais(b,kk1,a1,i1,k21) 
      temp tbxbjs(b,kk1,b1,j1,k21) 
      temp taxbjs(a,kk1,b1,j1,k21) 

      temp gaxais(a,kk1,a1,i1,k20) 
      temp gbxais(b,kk1,a1,i1,k20) 
      temp gbxbjs(b,kk1,b1,j1,k20) 
      temp gaxbjs(a,kk1,b1,j1,k20) 

      distributed Iix(i,kk1) 
      distributed Ijx(j,kk1) 
      distributed CS2x_aa(mu,kk1,a,i) 
      distributed CS2x_bb(mu,kk1,b,j) 
      distributed CS2x_xa(mu,kk1,nu,i) 
      distributed CS2x_xb(mu,kk1,nu,j) 
      distributed S2x_xa(lambda,kk1,sigma,i) 
      distributed S2x_xb(lambda,kk1,sigma,j) 
      distributed S2x_aa(mu,kk1,a1,i) 
      distributed S2x_bb(mu,kk1,b1,j) 

      distributed CG2x_aa(mu,kk1,a,i) 
      distributed CG2x_bb(mu,kk1,b,j) 
      distributed CG2x_xa(mu,kk1,nu,i) 
      distributed CG2x_xb(mu,kk1,nu,j) 
      distributed G2x_xa(lambda,kk1,sigma,i) 
      distributed G2x_xb(lambda,kk1,sigma,j) 
      distributed G2x_aa(mu,kk1,a1,i) 
      distributed G2x_bb(mu,kk1,b1,j) 

      local lax(a,kk1) 
      local lbx(b,kk1) 
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare arrays
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
      served Wbbii(b,b1,i,i1) # i, b - upper indeces i1, b1 - summation indeces
      served Waajj(a,a1,j,j1) # the same like the line above
      served Waiai(a,i,a1,i1) # a, 1 - upper indecec, a1,i1 - summation
      served Wbjbj(b,j,b1,j1) # like above
      served W2bjbj(b,j,b1,j1) # like above
      served Waibj_ab(a,i,b,j) # b, j - summation
      served Waibj_ba(a,i,b,j) # a, i - summation
      served W2aibj_ba(a,i,b,j) # a, i - summation
#
#    served arrays used in EOM
#
      served VCONV2AA(a,i,a1,i1)
      served VCONV2BB(b,j,b1,j1)
      served VCONV2AB(a,i,b,j)
#
      served VCE2AA(a,i,a1,i1)
      served VCE2BB(b,j,b1,j1)
      served VCE2AB(a,i,b,j)
#
      served VCACT2AA(a,i,a1,i1)
      served VCACT2BB(b,j,b1,j1)
      served VCACT2AB(a,i,b,j)
      served VCHACT2AA(a,i,a1,i1)
      served VCHACT2BB(b,j,b1,j1)
      served VCHACT2AB(a,i,b,j)
#
# VFL arrays to use simple indeces 
      served VC2AA(a,i,a1,i1,k21) 
      served VCH2AA(a,i,a1,i1,k20) 
      served VTEMP2AA(a,kk1,a1,i1,k20) 
      served VC2BB(b,j,b1,j1,k21) 
      served VCH2BB(b,j,b1,j1,k20)
      served VTEMP2BB(b,kk1,b1,j1,k20)
      served VC2AB(a,i,b1,j1,k21) 
      served VCH2AB(a,i,b,j,k20) 
      served VTEMP2AB(a,kk1,b,j,k20) 
      served VTEMP2BA(b,kk1,a,i,k20) 
#
      served VTEMP2AA1(a,kk1,a1,i1) 
      served VTEMP2AB1(a,kk1,b1,j1) 
      served VTEMP2BA1(b,kk1,a1,i1) 
      served VTEMP2BB1(b,kk1,b1,j1) 

      distributed VTEMP1A(a,kk1,k20) 

      distributed VTEMP1B(b,kk1,k20) 

      distributed ax_20(j20,k20)   
      distributed ax_21(j21,k21)   
      distributed ax(j20,k20)   
      temp t2120(k21,k20) 
      static MYvev(kindex20,jindex20)
      static Aeig(kindex20,jindex20)
      temp t1(k21,k21)   
      temp t20(k20,j20)   
      distributed orth(j21,k21) 
      temp taiaiS(a,i,a1,i1,k21)   
      temp t2aiaiS(a,i,a1,i1,k20)   
      temp t3aiaiS(a,i,a1,i1,k20)   
      temp tbjbjS(b,j,b1,j1,k21)        
      temp t2bjbjS(b,j,b1,j1,k20)
      temp t3bjbjS(b,j,b1,j1,k20)
      temp taibjS(a,i,b,j,k21)   
      temp t2aibjS(a,i,b,j,k20)   
      temp t3aibjS(a,i,b,j,k20)   

      temp taiS(a,i,k21) 
      temp t2aiS(a,i,k20) 
      temp t3aiS(a,i,k20) 

      temp tbjS(b,j,k21) 
      temp t2bjS(b,j,k20) 
      temp t3bjS(b,j,k20) 

      temp atemp2(jindex2,kindex2) 
      temp atemp3(jindex3,kindex3) 
      temp atemp4(jindex4,kindex4) 
      temp atemp5(jindex5,kindex5) 
      temp atemp6(jindex6,kindex6) 
      temp atemp7(jindex7,kindex7) 
      temp atemp8(jindex8,kindex8) 
      temp atemp9(jindex9,kindex9) 
      temp atemp10(jindex10,kindex10) 
      temp atemp11(jindex11,kindex11) 
      temp atemp12(jindex12,kindex12) 
      temp atemp13(jindex13,kindex13) 
      temp atemp14(jindex14,kindex14) 
      temp atemp15(jindex15,kindex15) 
      temp atemp16(jindex16,kindex16) 
      temp atemp17(jindex17,kindex17) 
      temp atemp18(jindex18,kindex18) 
      temp atemp19(jindex19,kindex19) 
      temp atemp20(jindex20,kindex20) 

      scalar kcount 
      scalar fact 
      scalar esum 
      scalar esum1
      scalar esum2
# END VFL arrays to use simple indeces 
#
      temp Tjjai(j1,j,a,i)
      temp T1jjai(j1,j,a,i)
     #served Njjai(j1,j,a,i)
      served Njjai(j1,a,i,j) 
      temp Tiibj(i1,i,b,j)
      temp T1iibj(i1,i,b,j)
     #served Niibj(i1,i,b,j)
      served Niibj(i1,b,i,j) 
      temp Tiiai(i1,i,a,i)
      temp T1iiai(i1,i,a,i)
     #served Niiai(i1,i,a,i)
      served Niiai(i1,a,i,i2) 
     #served Njjbj(j1,j,b,j)
      served Njjbj(j2,b,j,j1)   
      temp Tjjbj(j1,j,b,j)
      temp T1jjbj(j1,j,b,j)
      distributed Niijj(i,i1,j,j1)
      distributed Niiii(i,i1,i2,i3)
      distributed Njjjj(j,j1,j2,j3)
#
#   convergence correction
     static tsa(aa,a1) 
     static t1sa(aa,a1) 
     static tsb(bb,b1) 
     static t1sb(bb,b1) 
     temp psa(aa,a1)
     temp psb(bb,b1) 
# 
      distributed Faa(a,a1)
      distributed Fab(a,b)
      distributed Fbb(b,b1)
#
      distributed FSaa(aa,aa1)
      distributed FSab(aa,bb)
      distributed FSbb(bb,bb1)
#
      local LSaa(aa,aa1)
      local LSab(aa,bb1)
      local LSbb(bb,bb1)
#
      static SSaa(aa,aa1)
      static SSab(aa,bb)
      static SSbb(bb,bb1)
#
      local Sxxa(mu,nu,aa)
      local Sxxb(mu,nu,bb)
#
      distributed IIi(pp,a1)
      distributed IJj(qq,b1)
#
      distributed T1Sxxa(mu,nu,aa)
      distributed T3Sxxa(mu,nu,aa)
      distributed T3ASxxa(mu,nu,aa)
      distributed T1Sxxb(mu,nu,bb)
      distributed T3Sxxb(mu,nu,bb)
      distributed T3ASxxb(mu,nu,bb)
#
      temp txxxx(mu,nu,lambda,sigma) 
      temp t1xxxx(mu,nu,lambda,sigma) 
#
      served Spp(a1,a2)
      served Sqq(b1,b2)
#
      static csa(mu,pp)
      static csb(mu,qq)
#
      static tyypp(a1,a2)
      static t1yypp(a1,a2)
      temp typp(a1,a2)
      temp t1ypp(a1,a2)
      temp t2ypp(a1,a2)
      static tyyqq(b1,b2)
      static t1yyqq(b1,b2)
      temp tyqq(b1,b2)
      temp t1yqq(b1,b2)
      temp t2yqq(b1,b2)
#
      temp PIi(pp,a1)
      temp PJj(qq,b1)
#
      temp txpp(mu,pp)
      temp t1xpp(mu,pp)
      temp txqq(mu,qq)
      temp t1xqq(mu,qq)
      temp txx(mu,nu)
      temp txxa(mu,nu,aa)
      temp txxb(mu,nu,bb)
#
      temp t1xx(lambda,sigma)
      temp tyaaaa(aa,aa1)
      temp tybbbb(bb,bb1)
      temp tyaabb(aa,bb1)
#
      temp tsp(aa,a1)
      temp tpq(a,b1)
      temp tspq(aa,b1)
      temp t1pq(a,b1)
      temp tsq(bb,b1)
#
      temp tij(i,j)
#
# VFL arrays 
# ---------- 
#
      served VFLAB(a1,b,i,j)  
      served VFLAA(a2,a1,i,i2) 
      served VFLBB(b2,b1,j,j2) 
      temp Tqppq(q1,p1,p,q)    
      temp T1qppq(q1,p1,p,q)    
      temp tpqpq(p,q,p1,q1)  
      temp T1pqpq(p,q,p1,q1)  
      temp tpppp(p,p1,p2,p3) 
      temp t1pppp(p,p1,p2,p3) 
      temp tqqqq(q,q1,q2,q3) 
      temp t1qqqq(q,q1,q2,q3) 
      temp tqpqp(j1,a,b2,i1) 
     #temp tppqq(p,p1,q2,q3) 
     #temp tqqpp(q,q1,p2,p3) 
#
      static Sii(i,i1)
      static Sdii(i,i1)
      static Saa(a,a1)
      static Sdaa(a,a1)
      static Sia(i,a)
      static Sdia(i,a)
      static Sjj(j,j1)
      static Sdjj(j,j1)
      static Sbb(b,b1)
      static Sdbb(b,b1)
      static Smat(kindex,jindex)
      static SVEV(kindex,jindex)
      static Smat2(kindex2,jindex2)
      static SVEV2(kindex2,jindex2)
      static Smat3(kindex3,jindex3)
      static SVEV3(kindex3,jindex3)
      static Smat4(kindex4,jindex4)
      static SVEV4(kindex4,jindex4)
      static Smat5(kindex5,jindex5)
      static SVEV5(kindex5,jindex5)
      static Smat6(kindex6,jindex6)
      static SVEV6(kindex6,jindex6)
      static Smat7(kindex7,jindex7)
      static SVEV7(kindex7,jindex7)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      static Smat8(kindex8,jindex8)
      static SVEV8(kindex8,jindex8)
      static Smat9(kindex9,jindex9)
      static SVEV9(kindex9,jindex9)
      static Smat10(kindex10,jindex10)
      static SVEV10(kindex10,jindex10)
      static Smat11(kindex11,jindex11)
      static SVEV11(kindex11,jindex11)
      static Smat12(kindex12,jindex12)
      static SVEV12(kindex12,jindex12)
      static Smat13(kindex13,jindex13)
      static SVEV13(kindex13,jindex13)
      static Smat14(kindex14,jindex14)
      static SVEV14(kindex14,jindex14)
      static Smat15(kindex15,jindex15)
      static SVEV15(kindex15,jindex15)
      static Smat16(kindex16,jindex16)
      static SVEV16(kindex16,jindex16)
      static Smat17(kindex17,jindex17)
      static SVEV17(kindex17,jindex17)
      static Smat18(kindex18,jindex18)
      static SVEV18(kindex18,jindex18)
      static Smat19(kindex19,jindex19)
      static SVEV19(kindex19,jindex19)
      static Smat20(kindex20,jindex20)
      static SVEV20(kindex20,jindex20)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      temp Tvev2(kindex2,jindex2)
      temp Tvev3(kindex3,jindex3)
      temp Tvev4(kindex4,jindex4)
      temp Tvev5(kindex5,jindex5)
      temp Tvev6(kindex6,jindex6)
      temp Tvev7(kindex7,jindex7)
      temp Tvev8(kindex8,jindex8)
      temp Tvev9(kindex9,jindex9)
      temp Tvev10(kindex10,jindex10)
      temp Tvev11(kindex11,jindex11)
      temp Tvev12(kindex12,jindex12)
      temp Tvev13(kindex13,jindex13)
      temp Tvev14(kindex14,jindex14)
      temp Tvev15(kindex15,jindex15)
      temp Tvev16(kindex16,jindex16)
      temp Tvev17(kindex17,jindex17)
      temp Tvev18(kindex18,jindex18)
      temp Tvev19(kindex19,jindex19)
      temp Tvev20(kindex20,jindex20)
      temp tcoef2(kindex2,jindex2)
      temp tcoef3(kindex3,jindex3)
      temp tcoef4(kindex4,jindex4)
      temp tcoef5(kindex5,jindex5)
      temp tcoef6(kindex6,jindex6)
      temp tcoef7(kindex7,jindex7)
      temp tcoef8(kindex8,jindex8)
      temp tcoef9(kindex9,jindex9)
      temp tcoef10(kindex10,jindex10)
      temp tcoef11(kindex11,jindex11)
      temp tcoef12(kindex12,jindex12)
      temp tcoef13(kindex13,jindex13)
      temp tcoef14(kindex14,jindex14)
      temp tcoef15(kindex15,jindex15)
      temp tcoef16(kindex16,jindex16)
      temp tcoef17(kindex17,jindex17)
      temp tcoef18(kindex18,jindex18)
      temp tcoef19(kindex19,jindex19)
      temp tcoef20(kindex20,jindex20)
#
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     local LLaa(a,i,nu,i1) 
     local LLbb(b,j,nu,j1) 
     local LLab(a,i,nu,j) 
     temp Txixj(lambda,i,sigma,j)
     temp Txjxj(lambda,j,sigma,j1)
     temp Txixi(lambda,i,sigma,i1)
     temp Txiai(lambda,i,a1,i1)
     temp Txjbj(lambda,j,b1,j1)
     temp Txibj(lambda,i,b,j)
#
     temp Zaa(lambda,i,a1,i1)
     temp Zbb(lambda,j,b,j1)
     temp Zab(lambda,i,b,j)
     temp ZZaa(lambda,i,sigma,i1)
     temp ZZ1aa(lambda,i,sigma,i1)
     temp ZZbb(lambda,j,sigma,j1)
     temp ZZ1bb(lambda,j,sigma,j1)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yaa(lambda,i,mu,i1)
     temp Ybb(lambda,j,mu,j1)
     temp Yab(lambda,i,mu,j)
     temp Y1aa(lambda,i,mu,i1)
     temp Y1bb(lambda,j,mu,j1)
     temp Y1ab(lambda,i,mu,j)
#
     temp TXaiai(a,i,nu,i1)
     temp Taixi(a,i,nu,i1)
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp Tbjxj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TZaibj(a,i,nu,j)
     temp Taixj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
     served TAO_aa(lambda,i,sigma,i1)
     served TAO_bb(lambda,j,sigma,j1)
     served TAO_ab(lambda,i,sigma,j)
     served T1AO_aa(lambda,i,a,i1)
     served T1AO_bb(lambda,j,b,j1)
     served T1AO_ab(lambda,i,b,j)
     served T2AO_aa(lambda,i,sigma,i1)
     served T2AO_bb(lambda,j,sigma,j1)
     served T2AO_ab(lambda,i,sigma,j)
#
      temp  Tiaai(i1,a1,a,i)
      temp  Taaaa(a,a1,a2,a3)
      temp  Tbbbb(b,b1,b2,b3)
      temp  Taabb(a,a1,b,b1)
      temp  T1aiai(a,i,a1,i1)
      temp  T2aiai(a,i,a1,i1)
      temp  T3aiai(a,i,a1,i1)
      temp  T4aiai(a,i,a1,i1)
      temp  T2bjbj(b,j,b1,j1)
      temp  T3bjbj(b,j,b1,j1)
      temp  T1bjbj(b,j,b1,j1)
      temp  TSaiai(a,i,a1,i1)
      temp  TSiaai(i,a,a1,i1)
      temp  TS2iaai(i,a,a1,i1)
      temp  TSbjbj(b,j,b1,j1)
      temp  Taaii(a,a2,i,i2)
      temp  Tiibb(i1,i,b,b1)
      temp  Tjjaa(j1,j,a,a1)
      temp  T1aaii(a,a2,i,i2)
      temp  Tbbjj(b,b1,j,j1)
      temp  T2bbjj(b,b1,j,j1)
      temp  T1aibj(a,i,b,j)
      temp  T2aibj(a,i,b,j)
      temp  T3aibj(a,i,b,j)
      temp  Tii(i,i1)
      temp  T1ii(i,i1)
      temp  T1jj(j,j1)
      temp  Tjj(j,j1)
      temp  Taa(a,a1)
      temp  Tdaa(a,a1)
      temp  Tbb(b,b1)
      temp  Tiijj(i,i1,j,j1)
      temp  T1iijj(i,i1,j,j1)
      temp  Tiiii(i,i1,i2,i3)
      temp  T1iiii(i,i1,i2,i3)
      temp  Tjjjj(j,j1,j2,j3)
      temp  T1jjjj(j,j1,j2,j3)
      temp  Taajj(a,a1,j,j1)
      temp  T1aajj(a,a1,j,j1)
      temp  Tbbii(b,b1,i,i1)
      temp  T1bbii(b,b1,i,i1)
      temp  R1aiai(a1,i1,a,i)
      temp  R2aiai(a1,i,a,i1)
      temp  R3aiai(a,i1,a1,i)
      temp  R4aiai(a,i1,a1,i)
      temp  R1bjbj(b1,j1,b,j)
      temp  R2bjbj(b1,j,b,j1)
      temp  R3bjbj(b,j1,b1,j)
      temp  R4bjbj(b,j1,b1,j)
      temp  tai(a,i)
      temp  t1ai(a,i)
      temp  t11ai(a,i)
      temp  t1aa(a,a1)
      temp  t11aa(a,a1)
      temp  t1bb(b,b1)
      temp  t11bb(b,b1)
      temp  t111bb(b,b1)
      temp  tia(i,a)
      temp  t2ia(i,a)
      temp  t2jb(j,b)
      temp  t1ia(i,a)
      temp  t2ai(a,i)
      temp  t3ai(a,i)
      temp  tbj(b,j)
      temp  tjb(j,b)
      temp  t1jb(j,b)
      temp  t2bj(b,j)
      temp  t3bj(b,j)
      temp  t1bj(b,j)
      temp  t11bj(b,j)
      temp  Tjbbj(j1,b1,b,j)
      temp  Taaai(a,a2,a1,i)
#
#
      local L1xixi(mu,i,nu,i1)
      local L1xjxj(mu,j,nu,j1)
      local L1xixj(mu,i,nu,j)
      local Lxibj(lambda,i,b,j)
      local Lxjbj(lambda,j,b1,j1)
      local LLaiai(a,i,a1,i1)
      local LLbjbj(b,j,b1,j1)
      local LLaibj(a,i,b,j)
      local Lxiai(lambda,i,a1,i1)
#
#
      local Ljbbj(j2,b2,b1,j1)
      local Liaai3(i1,a1,a,i)
      local Liiai(i2,i,a,i1)
      local L2iiai(i,i2,a,i1)
      local L1aibj(a,i,b1,j)
      local Ljjai(a,i,j,j1)
      local Lbjjj(b1,j2,j,j1)
      local Laaai(a,a2,a1,i)
      local Ljjbj(j2,j,b,j1)
      local L2jjbj(j,j2,b,j1)
      local Lbbbj(b,b2,b1,j)
      local Laijj(a,i,j1,j)
      local Liibj(i1,i,b,j)
      local L2iibj(i1,i,b,j)
      local L1iibj(i,i1,b,j)
      local Lbbai(b,b1,a,i)
      local Laabj(a,a1,b,j)
      local Laiai(a1,i,a2,i1)
      local Laiii(a1,i2,i,i1)
      local Laibj(a1,i,b,j)
      local Lbjbj(b1,j,b2,j1)
      local L2bjbj(b,j,b2,j1)
      local L3bjbj(b,j,b2,j2)
      local VAL(jindex,kindex)
      temp VAL1(jindex,kindex)
      local lai(a,i)
      local lia(i,a)
      local ljb(j,b)
      local l2ai(a,i)
      local laa(a,a1)
      local lbb(b,b1)
      local lii(i1,i)
      local ljj(j1,j)
      local lbj(b,j)
#
#     eom local arrays
#
      local acoef(spdim,spdim)
      local Lmat(kindex,jindex)
      local LVEV(kindex,jindex)
      local acoef2(kindex2,jindex2)
      local Lmat2(kindex2,jindex2)
      local LVEV2(kindex2,jindex2)
      local acoef3(kindex3,jindex3)
      local Lmat3(kindex3,jindex3)
      local LVEV3(kindex3,jindex3)
      local acoef4(kindex4,jindex4)
      local Lmat4(kindex4,jindex4)
      local LVEV4(kindex4,jindex4)
      local acoef5(kindex5,jindex5)
      local Lmat5(kindex5,jindex5)
      local LVEV5(kindex5,jindex5)
      local acoef6(kindex6,jindex6)
      local Lmat6(kindex6,jindex6)
      local LVEV6(kindex6,jindex6)
      local acoef7(kindex7,jindex7)
      local Lmat7(kindex7,jindex7)
      local LVEV7(kindex7,jindex7)
      local acoef8(kindex8,jindex8)
      local Lmat8(kindex8,jindex8)
      local LVEV8(kindex8,jindex8)
      local acoef9(kindex9,jindex9)
      local Lmat9(kindex9,jindex9)
      local LVEV9(kindex9,jindex9)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      local Lmat10(kindex10,jindex10)
      local LVEV10(kindex10,jindex10)
      local acoef10(kindex10,jindex10)
      local Lmat11(kindex11,jindex11)
      local LVEV11(kindex11,jindex11)
      local acoef11(kindex11,jindex11)
      local Lmat12(kindex12,jindex12)
      local LVEV12(kindex12,jindex12)
      local acoef12(kindex12,jindex12)
      local Lmat13(kindex13,jindex13)
      local LVEV13(kindex13,jindex13)
      local acoef13(kindex13,jindex13)
      local Lmat14(kindex14,jindex14)
      local LVEV14(kindex14,jindex14)
      local acoef14(kindex14,jindex14)
      local Lmat15(kindex15,jindex15)
      local LVEV15(kindex15,jindex15)
      local acoef15(kindex15,jindex15)
      local Lmat16(kindex16,jindex16)
      local LVEV16(kindex16,jindex16)
      local acoef16(kindex16,jindex16)
      local Lmat17(kindex17,jindex17)
      local LVEV17(kindex17,jindex17)
      local acoef17(kindex17,jindex17)
      local Lmat18(kindex18,jindex18)
      local LVEV18(kindex18,jindex18)
      local acoef18(kindex18,jindex18)
      local Lmat19(kindex19,jindex19)
      local LVEV19(kindex19,jindex19)
      local acoef19(kindex19,jindex19)
      local Lmat20(kindex20,jindex20)
      local LVEV20(kindex20,jindex20)
      local acoef20(kindex20,jindex20)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      local Rai(a,i)
      local Rbj(b,j)
      local Raiai(a,i,a1,i1)
      local Rbjbj(b,j,b1,j1)
      local Raibj(a,i,b,j)
#
#VVVV 
      distributed Ra_aa(a,kk1,a1,i) 
      distributed Rb_bb(b,kk1,b1,j) 
      distributed Ra_bb(a,kk1,b1,j) 
      distributed Rb_aa(b,kk1,a1,i) 
      distributed Ra(a,kk1) 
      distributed Rb(b,kk1) 
      distributed DDaa(a,a1)
      distributed DDii(i,i1)
      distributed DDia(i,a)
      distributed DDbb(b,b1)
      distributed DDjj(j,j1)
      distributed DDjb(j,b)
      temp tas(a,kk1) 
      temp t1as(a,kk1) 
      temp t2as(a,kk1) 
      temp tbs(b,kk1) 
      temp t1bs(b,kk1) 
      temp t2bs(b,kk1) 

      distributed Fae_a(a,a1)
      distributed Fae_b(b,b1)
      distributed Fmi_a(i1,i)
      distributed Fmi_b(j1,j)
      distributed Fia_a(i,a)
      distributed Fia_b(j,b)
      distributed Wmnijab(i,i1,j,j1)
      distributed Wmnijaa(i,i1,i2,i3)
      distributed Wmnijbb(j,j1,j2,j3)
#
#     distributed arrays used in EOM
#
      distributed VCE1A(a,i)
      distributed VCE1B(b,j)
#
      distributed VSTART1A1(a,i)
      distributed VSTART1A2(a,i)
      distributed VSTART1A3(a,i)
      distributed VSTART1A4(a,i)
      distributed VSTART1A5(a,i)
      distributed VSTART1A6(a,i)
      distributed VSTART1A7(a,i)
      distributed VSTART1A8(a,i)
      distributed VSTART1A9(a,i)
      distributed VSTART1A10(a,i)
      distributed VSTART1A11(a,i)
      distributed VSTART1A12(a,i)
#
      distributed VSTART1B1(b,j)
      distributed VSTART1B2(b,j)
      distributed VSTART1B3(b,j)
      distributed VSTART1B4(b,j)
      distributed VSTART1B5(b,j)
      distributed VSTART1B6(b,j)
      distributed VSTART1B7(b,j)
      distributed VSTART1B8(b,j)
      distributed VSTART1B9(b,j)
      distributed VSTART1B10(b,j)
      distributed VSTART1B11(b,j)
      distributed VSTART1B12(b,j)
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare scalars
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      scalar maxcycle
      scalar imaxc
      scalar amplthresh
      scalar ncount
      scalar aeigtemp
      scalar aeigtemp2
      scalar rootmax
      scalar evfev
      scalar eomthresh
      scalar sqr
      scalar sqr2
      scalar egvmax
      scalar lcount
      scalar icount
      scalar xcount
      scalar imax
      scalar emax
      scalar energaa
      scalar energbb
      scalar energab
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar eold
      scalar etemp
      scalar etemp1
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar etemp0
      scalar eetemp
      scalar ediff
      scalar xcor
      scalar xcor0
      scalar xcor1
      scalar xcor2
      scalar xcor3
      scalar count_iter
      scalar sval
      scalar sval2
      scalar sval3
      scalar sval4
      scalar sval5
      scalar sval6
      scalar sval7
      scalar sval8
      scalar sval9
#
#     eom scalars
#
      scalar ispdim
      scalar one
      scalar omega
      scalar omegam
      scalar residuum
      scalar square
      scalar squarert
      scalar mult
      scalar exponent
#
      scalar nsp
      scalar iroot
#
      scalar Aeig1
      scalar Aeig2
      scalar Aeig3
      scalar Aeig4
      scalar Aeig5
      scalar Aeig6
      scalar Aeig7
      scalar Aeig8
      scalar Aeig9
#
      scalar Aeigv1
      scalar Aeigv2
      scalar Aeigv3
      scalar Aeigv4
      scalar Aeigv5
      scalar Aeigv6
      scalar Aeigv7
      scalar Aeigv8
      scalar Aeigv9
#
      scalar Aeigvm1
      scalar Aeigvm2
      scalar Aeigvm3
      scalar Aeigvm4
      scalar Aeigvm5
      scalar Aeigvm6
      scalar Aeigvm7
      scalar Aeigvm8
      scalar Aeigvm9
#
      scalar xmax
#
      scalar xmax1
      scalar xmax2
      scalar xmax3
      scalar xmax4
      scalar xmax5
      scalar xmax6
      scalar xmax7
      scalar xmax8
      scalar xmax9
#
      scalar xtemp
      scalar xtemp1
#
      scalar xm1
      scalar xm2
      scalar xm3
      scalar xm4
      scalar xm5
      scalar xm6
      scalar xm7
      scalar xm8
      scalar xm9
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      scalar etemp2_1
      scalar etemp2_2
      scalar etemp2_3
      scalar etemp2_4
      scalar etemp2_5
      scalar etemp2_6
      scalar etemp2_7
      scalar etemp2_8
      scalar etemp2_9
      scalar etemp2_10
      scalar etemp2_11
      scalar etemp2_12
      scalar etemp2_13
      scalar etemp2_14
      scalar etemp2_15
      scalar etemp2_16
      scalar etemp2_17
      scalar etemp2_18
      scalar etemp2_19
      scalar etemp2_20
#
      scalar Vtemp_1
      scalar Vtemp_2
      scalar Vtemp_3
      scalar Vtemp_4
      scalar Vtemp_5
      scalar Vtemp_6
      scalar Vtemp_7
      scalar Vtemp_8
      scalar Vtemp_9
      scalar Vtemp_10
      scalar Vtemp_11
      scalar Vtemp_12
      scalar Vtemp_13
      scalar Vtemp_14
      scalar Vtemp_15
      scalar Vtemp_16
      scalar Vtemp_17
      scalar Vtemp_18
      scalar Vtemp_19
      scalar Vtemp_20
#
      scalar V1_1
      scalar V1_2
      scalar V1_3
      scalar V1_4
      scalar V1_5
      scalar V1_6
      scalar V1_7
      scalar V1_8
      scalar V1_9
      scalar V1_10
      scalar V1_11
      scalar V1_12
      scalar V1_13
      scalar V1_14
      scalar V1_15
      scalar V1_16
      scalar V1_17
      scalar V1_18
      scalar V1_19
      scalar V1_20
      scalar V2_1
      scalar V2_2
      scalar V2_3
      scalar V2_4
      scalar V2_5
      scalar V2_6
      scalar V2_7
      scalar V2_8
      scalar V2_9
      scalar V2_10
      scalar V2_11
      scalar V2_12
      scalar V2_13
      scalar V2_14
      scalar V2_15
      scalar V2_16
      scalar V2_17
      scalar V2_18
      scalar V2_19
      scalar V2_20
      scalar V3_1
      scalar V3_2
      scalar V3_3
      scalar V3_4
      scalar V3_5
      scalar V3_6
      scalar V3_7
      scalar V3_8
      scalar V3_9
      scalar V3_10
      scalar V3_11
      scalar V3_12
      scalar V3_13
      scalar V3_14
      scalar V3_15
      scalar V3_16
      scalar V3_17
      scalar V3_18
      scalar V3_19
      scalar V3_20
      scalar V4_1
      scalar V4_2
      scalar V4_3
      scalar V4_4
      scalar V4_5
      scalar V4_6
      scalar V4_7
      scalar V4_8
      scalar V4_9
      scalar V4_10
      scalar V4_11
      scalar V4_12
      scalar V4_13
      scalar V4_14
      scalar V4_15
      scalar V4_16
      scalar V4_17
      scalar V4_18
      scalar V4_19
      scalar V4_20
      scalar V5_1
      scalar V5_2
      scalar V5_3
      scalar V5_4
      scalar V5_5
      scalar V5_6
      scalar V5_7
      scalar V5_8
      scalar V5_9
      scalar V5_10
      scalar V5_11
      scalar V5_12
      scalar V5_13
      scalar V5_14
      scalar V5_15
      scalar V5_16
      scalar V5_17
      scalar V5_18
      scalar V5_19
      scalar V5_20
      scalar V6_1
      scalar V6_2
      scalar V6_3
      scalar V6_4
      scalar V6_5
      scalar V6_6
      scalar V6_7
      scalar V6_8
      scalar V6_9
      scalar V6_10
      scalar V6_11
      scalar V6_12
      scalar V6_13
      scalar V6_14
      scalar V6_15
      scalar V6_16
      scalar V6_17
      scalar V6_18
      scalar V6_19
      scalar V6_20
      scalar V7_1
      scalar V7_2
      scalar V7_3
      scalar V7_4
      scalar V7_5
      scalar V7_6
      scalar V7_7
      scalar V7_8
      scalar V7_9
      scalar V7_10
      scalar V7_11
      scalar V7_12
      scalar V7_13
      scalar V7_14
      scalar V7_15
      scalar V7_16
      scalar V7_17
      scalar V7_18
      scalar V7_19
      scalar V7_20
      scalar V8_1
      scalar V8_2
      scalar V8_3
      scalar V8_4
      scalar V8_5
      scalar V8_6
      scalar V8_7
      scalar V8_8
      scalar V8_9
      scalar V8_10
      scalar V8_11
      scalar V8_12
      scalar V8_13
      scalar V8_14
      scalar V8_15
      scalar V8_16
      scalar V8_17
      scalar V8_18
      scalar V8_19
      scalar V8_20
      scalar V9_1
      scalar V9_2
      scalar V9_3
      scalar V9_4
      scalar V9_5
      scalar V9_6
      scalar V9_7
      scalar V9_8
      scalar V9_9
      scalar V9_10
      scalar V9_11
      scalar V9_12
      scalar V9_13
      scalar V9_14
      scalar V9_15
      scalar V9_16
      scalar V9_17
      scalar V9_18
      scalar V9_19
      scalar V9_20
      scalar V10_1
      scalar V10_2
      scalar V10_3
      scalar V10_4
      scalar V10_5
      scalar V10_6
      scalar V10_7
      scalar V10_8
      scalar V10_9
      scalar V10_10
      scalar V10_11
      scalar V10_12
      scalar V10_13
      scalar V10_14
      scalar V10_15
      scalar V10_16
      scalar V10_17
      scalar V10_18
      scalar V10_19
      scalar V10_20
      scalar V11_1
      scalar V11_2
      scalar V11_3
      scalar V11_4
      scalar V11_5
      scalar V11_6
      scalar V11_7
      scalar V11_8
      scalar V11_9
      scalar V11_10
      scalar V11_11
      scalar V11_12
      scalar V11_13
      scalar V11_14
      scalar V11_15
      scalar V11_16
      scalar V11_17
      scalar V11_18
      scalar V11_19
      scalar V11_20
      scalar V12_1
      scalar V12_2
      scalar V12_3
      scalar V12_4
      scalar V12_5
      scalar V12_6
      scalar V12_7
      scalar V12_8
      scalar V12_9
      scalar V12_10
      scalar V12_11
      scalar V12_12
      scalar V12_13
      scalar V12_14
      scalar V12_15
      scalar V12_16
      scalar V12_17
      scalar V12_18
      scalar V12_19
      scalar V12_20
#
      scalar root1
      scalar root2
      scalar root3
      scalar root4
      scalar root5
      scalar root6
      scalar root7
      scalar root8
      scalar root9
      scalar root10
      scalar root11
      scalar root12
#
      scalar Aeig10
      scalar Aeigv10
      scalar Aeigvm10
      scalar xmax10
      scalar xm10
      scalar Aeig11
      scalar Aeigv11
      scalar Aeigvm11
      scalar xmax11
      scalar xm11
      scalar Aeig12
      scalar Aeigv12
      scalar Aeigvm12
      scalar xmax12
      scalar xm12
      scalar Aeig13
      scalar Aeigv13
      scalar Aeigvm13
      scalar xmax13
      scalar xm13
      scalar Aeig14
      scalar Aeigv14
      scalar Aeigvm14
      scalar xmax14
      scalar xm14
      scalar Aeig15
      scalar Aeigv15
      scalar Aeigvm15
      scalar xmax15
      scalar xm15
      scalar Aeig16
      scalar Aeigv16
      scalar Aeigvm16
      scalar xmax16
      scalar xm16
      scalar Aeig17
      scalar Aeigv17
      scalar Aeigvm17
      scalar xmax17
      scalar xm17
      scalar Aeig18
      scalar Aeigv18
      scalar Aeigvm18
      scalar xmax18
      scalar xm18
      scalar Aeig19
      scalar Aeigv19
      scalar Aeigvm19
      scalar xmax19
      scalar xm19
      scalar Aeig20
      scalar Aeigv20
      scalar Aeigvm20
      scalar xmax20
      scalar xm20
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      scalar sum0
      scalar sum1
      scalar sum2
      scalar sum3
      scalar sum4
      scalar sum5
      scalar sum6
      scalar sum7
      scalar sum8
      scalar sum9
      scalar sum10
      scalar sum11
      scalar sum12
      scalar sum13
      scalar sum14
      scalar sum15
      scalar sum16
      scalar sum17
      scalar sum18
      scalar sum19
      scalar sum20
      scalar sum21
      scalar sum22
      scalar sum23
      scalar sum24
      scalar sum25
      scalar sum26
      scalar sum27
      scalar sum28
      scalar sum29
      scalar sum30
      scalar sum31
      scalar sum32
      scalar sum33
      scalar sum34
      scalar sum35
      scalar sum36
      scalar sum37
      scalar sum38
      scalar sum39
#
      scalar etemp6
      scalar etemp7
      scalar etemp8
      scalar etemp9
      scalar etemp10
      scalar etemp11
      scalar etemp12
      scalar etemp13
      scalar etemp14
      scalar etemp15
      scalar etemp16
      scalar etemp17
      scalar etemp18
      scalar etemp19
      scalar etemp20
      scalar etemp21
      scalar etemp22
      scalar etemp23
      scalar etemp24
      scalar etemp25
      scalar etemp26
      scalar etemp27
      scalar etemp28
      scalar etemp29
      scalar etemp30
      scalar etemp31
      scalar etemp32
      scalar etemp33
      scalar etemp34
      scalar etemp35
      scalar etemp36
      scalar etemp37
      scalar etemp38
      scalar etemp39
#
# ------------------------------------------------------------------------
#
# ---------------------------------------------------------------------- 
#
     PROC UPDATE
#    ----------- 
#
     PARDO a, a1, i 
        DO kk1 
           GET                 HS2a_aa(a,kk1,a1,i) 
           taxai(a,kk1,a1,i) = HS2a_aa(a,kk1,a1,i) 
           DO k20 
              if k20 == spdim 
                 taxaix(a,kk1,a1,i,k20)           = taxai(a,kk1,a1,i) 
                 PREPARE HS2a_aah(a,kk1,a1,i,k20) = taxaix(a,kk1,a1,i,k20) 
              endif 
           ENDDO k20 
        ENDDO kk1 
     ENDPARDO a, a1, i 
#
     PARDO b, b1, j 
        DO kk1 
           GET                 HS2b_bb(b,kk1,b1,j) 
           tbxbj(b,kk1,b1,j) = HS2b_bb(b,kk1,b1,j) 
           DO k20 
              if k20 == spdim 
                 tbxbjx(b,kk1,b1,j,k20)           = tbxbj(b,kk1,b1,j) 
                 PREPARE HS2b_bbh(b,kk1,b1,j,k20) = tbxbjx(b,kk1,b1,j,k20) 
              endif 
           ENDDO k20 
        ENDDO kk1 
     ENDPARDO b, b1, j 
#
     PARDO b, a1, i 
        DO kk1 
           GET                 HS2b_aa(b,kk1,a1,i) 
           tbxai(b,kk1,a1,i) = HS2b_aa(b,kk1,a1,i) 
           DO k20 
              if k20 == spdim 
                 tbxaix(b,kk1,a1,i,k20)           = tbxai(b,kk1,a1,i) 
                 PREPARE HS2b_aah(b,kk1,a1,i,k20) = tbxaix(b,kk1,a1,i,k20) 
              endif 
           ENDDO k20 
        ENDDO kk1 
     ENDPARDO b, a1, i 
#
     PARDO a, b1, j 
        DO kk1 
           GET                 HS2a_bb(a,kk1,b1,j) 
           taxbj(a,kk1,b1,j) = HS2a_bb(a,kk1,b1,j) 
           DO k20 
              if k20 == spdim 
                 taxbjx(a,kk1,b1,j,k20)           = taxbj(a,kk1,b1,j) 
                 PREPARE HS2a_bbh(a,kk1,b1,j,k20) = taxbjx(a,kk1,b1,j,k20) 
              endif 
           ENDDO k20 
        ENDDO kk1 
     ENDPARDO a, b1, j 
#
#    one particle amplitudes
#
     PARDO a  
        DO kk1 
           GET          HS1a(a,kk1)
           tax(a,kk1) = HS1a(a,kk1)
            DO k20 
               if k20 == spdim 
                  t2axs(a,kk1,k20)      = tax(a,kk1) 
                  PUT HS1a_h(a,kk1,k20) = t2axs(a,kk1,k20) 
               endif 
            ENDDO k20 
        ENDDO kk1 
     ENDPARDO a  
#
     PARDO b  
        DO kk1 
           GET          HS1b(b,kk1)
           tbx(b,kk1) = HS1b(b,kk1)
            DO k20 
               if k20 == spdim 
                  t2bxs(b,kk1,k20)      = tbx(b,kk1) 
                  PUT HS1b_h(b,kk1,k20) = t2bxs(b,kk1,k20) 
               endif 
            ENDDO k20 
        ENDDO kk1 
     ENDPARDO b  
#
      sip_barrier 
     ENDPROC UPDATE
#    --------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_a 
#     -------------- 
#
      PARDO a   
            DO kk1  
            DO k20 
            IF k20 == spdim  
               GET           HS1a_h(a,kk1,k20)  
               t1ax(a,kk1) = HS1a_h(a,kk1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        GET                S1a_h(a,kk1,k21) 
                        tax(a,kk1)       = S1a_h(a,kk1,k21) 
                        etemp            = tax(a,kk1)*t1ax(a,kk1)
                        t20(j20,k20)     = etemp 
                        PUT ax(j20,k20) += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
            ENDDO kk1  
      ENDPARDO a   
#
      PARDO a   
            DO kk1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        GET          S1a_h(a,kk1,k21) 
                        tax(a,kk1) = S1a_h(a,kk1,k21) 
                        DO k20 
                          if k20 < spdim  
                             GET                HS1a_h(a,kk1,k20)  
                             t1ax(a,kk1)      = HS1a_h(a,kk1,k20) 
                             etemp            = tax(a,kk1)*t1ax(a,kk1)
                             t20(j20,k20)     = etemp 
                             PUT ax(j20,k20) += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO a   
#
      ENDPROC ConstrA_a 
#     ----------------- 

# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_b 
#     -------------- 
#
      PARDO b   
            DO kk1  
            DO k20 
            IF k20 == spdim  
               GET           HS1b_h(b,kk1,k20)  
               t1bx(b,kk1) = HS1b_h(b,kk1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        GET                S1b_h(b,kk1,k21) 
                        tbx(b,kk1)       = S1b_h(b,kk1,k21) 
                        etemp            = tbx(b,kk1)*t1bx(b,kk1)
                        t20(j20,k20)     = etemp 
                        PUT ax(j20,k20) += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
            ENDDO kk1  
      ENDPARDO b   
#
      PARDO b   
            DO kk1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        GET          S1b_h(b,kk1,k21) 
                        tbx(b,kk1) = S1b_h(b,kk1,k21) 
                        DO k20 
                          if k20 < spdim  
                             GET                HS1b_h(b,kk1,k20)  
                             t1bx(b,kk1)      = HS1b_h(b,kk1,k20) 
                             etemp            = tbx(b,kk1)*t1bx(b,kk1)
                             t20(j20,k20)     = etemp 
                             PUT ax(j20,k20) += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO b   
#
      ENDPROC ConstrA_b 
#     ----------------- 

# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_aa 
#     --------------- 
#
      PARDO a, a1, i1 
            DO kk1 
            DO k20 
            IF k20 == spdim  
               request               HS2a_aah(a,kk1,a1,i1,k20) i1 
               t1axai(a,kk1,a1,i1) = HS2a_aah(a,kk1,a1,i1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2a_aah(a,kk1,a1,i1,k21) i1
                        taxai(a,kk1,a1,i1) = S2a_aah(a,kk1,a1,i1,k21) 
                        etemp              = taxai(a,kk1,a1,i1)*t1axai(a,kk1,a1,i1)
                        etemp             *= 0.25 
                        t20(j20,k20)       = etemp 
                        PUT ax(j20,k20)   += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO a, a1, i1 
#
      PARDO a, a1, i1 
            DO kk1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2a_aah(a,kk1,a1,i1,k21) i1
                        taxai(a,kk1,a1,i1) = S2a_aah(a,kk1,a1,i1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request               HS2a_aah(a,kk1,a1,i1,k20) i1 
                             t1axai(a,kk1,a1,i1) = HS2a_aah(a,kk1,a1,i1,k20) 
                             etemp               = taxai(a,kk1,a1,i1)*t1axai(a,kk1,a1,i1)
                             etemp              *= 0.25 
                             t20(j20,k20)        = etemp 
                             PUT ax(j20,k20)    += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO a, a1, i1 
#
      ENDPROC ConstrA_aa 
#     ------------------ 
#
# ----------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrB_bb 
#     --------------- 
#
      PARDO b, b1, j1 
            DO kk1 
            DO k20 
            IF k20 == spdim  
               request               HS2b_bbh(b,kk1,b1,j1,k20) j1 
               t1bxbj(b,kk1,b1,j1) = HS2b_bbh(b,kk1,b1,j1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2b_bbh(b,kk1,b1,j1,k21) j1
                        tbxbj(b,kk1,b1,j1) = S2b_bbh(b,kk1,b1,j1,k21) 
                        etemp              = tbxbj(b,kk1,b1,j1)*t1bxbj(b,kk1,b1,j1)
                        etemp             *= 0.25 
                        t20(j20,k20)       = etemp 
                        PUT ax(j20,k20)   += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO b, b1, j1 
#
      PARDO b, b1, j1 
            DO kk1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2b_bbh(b,kk1,b1,j1,k21) j1
                        tbxbj(b,kk1,b1,j1) = S2b_bbh(b,kk1,b1,j1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request               HS2b_bbh(b,kk1,b1,j1,k20) j1 
                             t1bxbj(b,kk1,b1,j1) = HS2b_bbh(b,kk1,b1,j1,k20) 
                             etemp               = tbxbj(b,kk1,b1,j1)*t1bxbj(b,kk1,b1,j1)
                             etemp              *= 0.25 
                             t20(j20,k20)        = etemp 
                             PUT ax(j20,k20)    += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO b, b1, j1 
#
      ENDPROC ConstrB_bb 
#     ------------------ 
#
# ----------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_bb 
#     --------------- 
#
      PARDO a, b1, j1 
            DO kk1 
            DO k20 
            IF k20 == spdim  
               request               HS2a_bbh(a,kk1,b1,j1,k20) j1 
               t1axbj(a,kk1,b1,j1) = HS2a_bbh(a,kk1,b1,j1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2a_bbh(a,kk1,b1,j1,k21) j1
                        taxbj(a,kk1,b1,j1) = S2a_bbh(a,kk1,b1,j1,k21) 
                        etemp              = taxbj(a,kk1,b1,j1)*t1axbj(a,kk1,b1,j1)
                        t20(j20,k20)       = etemp 
                        PUT ax(j20,k20)   += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO a, b1, j1 
#
      PARDO a, b1, j1 
            DO kk1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2a_bbh(a,kk1,b1,j1,k21) j1
                        taxbj(a,kk1,b1,j1) = S2a_bbh(a,kk1,b1,j1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request               HS2a_bbh(a,kk1,b1,j1,k20) j1 
                             t1axbj(a,kk1,b1,j1) = HS2a_bbh(a,kk1,b1,j1,k20) 
                             etemp               = taxbj(a,kk1,b1,j1)*t1axbj(a,kk1,b1,j1)
                             t20(j20,k20)        = etemp 
                             PUT ax(j20,k20)    += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO a, b1, j1 
#
      ENDPROC ConstrA_bb 
#     ------------------ 
#
# ----------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrB_aa 
#     --------------- 
#
      PARDO b, a1, i1 
            DO kk1 
            DO k20 
            IF k20 == spdim  
               request               HS2b_aah(b,kk1,a1,i1,k20) i1 
               t1bxai(b,kk1,a1,i1) = HS2b_aah(b,kk1,a1,i1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2b_aah(b,kk1,a1,i1,k21) i1
                        tbxai(b,kk1,a1,i1) = S2b_aah(b,kk1,a1,i1,k21) 
                        etemp              = tbxai(b,kk1,a1,i1)*t1bxai(b,kk1,a1,i1)
                        t20(j20,k20)       = etemp 
                        PUT ax(j20,k20)   += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO b, a1, i1 
#
      PARDO b, a1, i1 
            DO kk1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request              S2b_aah(b,kk1,a1,i1,k21) i1
                        tbxai(b,kk1,a1,i1) = S2b_aah(b,kk1,a1,i1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request               HS2b_aah(b,kk1,a1,i1,k20) i1 
                             t1bxai(b,kk1,a1,i1) = HS2b_aah(b,kk1,a1,i1,k20) 
                             etemp               = tbxai(b,kk1,a1,i1)*t1bxai(b,kk1,a1,i1)
                             t20(j20,k20)        = etemp 
                             PUT ax(j20,k20)    += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO b, a1, i1 
#
      ENDPROC ConstrB_aa 
#     ------------------ 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC Aconstr_tr 
#     --------------- 
#
      do spdim 
      if spdim < 13 
#
      create ax 
       sip_barrier 
      CALL ConstrA_aa 
      CALL ConstrB_bb 
      CALL ConstrA_bb 
      CALL ConstrB_aa 
      CALL ConstrA_a 
      CALL ConstrA_b 
       server_barrier 
#
       DO kindex20
       DO jindex20
          if kindex20 == spdim  
          if jindex20 <= spdim  
             GET                             ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
          if kindex20 <= spdim  
          if jindex20 == spdim  
             GET                             ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
       ENDDO jindex20
       ENDDO kindex20
        sip_barrier 
#
       if spdim == 2
          DO kindex20
          DO jindex20
          DO kindex2
          DO jindex2
             if kindex20 == kindex2 
             if jindex20 == jindex2 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp2(jindex2,kindex2)    = etemp3 
                sMAT2(jindex2,kindex2) = atemp2(jindex2,kindex2)   
             endif 
             endif 
          ENDDO jindex2
          ENDDO kindex2
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 3
          DO kindex20
          DO jindex20
          DO kindex3
          DO jindex3
             if kindex20 == kindex3 
             if jindex20 == jindex3 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp3(jindex3,kindex3)    = etemp3 
                sMAT3(jindex3,kindex3) = atemp3(jindex3,kindex3)   
             endif 
             endif 
          ENDDO jindex3
          ENDDO kindex3
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 4
          DO kindex20
          DO jindex20
          DO kindex4
          DO jindex4
             if kindex20 == kindex4 
             if jindex20 == jindex4 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp4(jindex4,kindex4)    = etemp3 
                sMAT4(jindex4,kindex4) = atemp4(jindex4,kindex4)   
             endif 
             endif 
          ENDDO jindex4
          ENDDO kindex4
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 5
          DO kindex20
          DO jindex20
          DO kindex5
          DO jindex5
             if kindex20 == kindex5 
             if jindex20 == jindex5 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp5(jindex5,kindex5)    = etemp3 
                sMAT5(jindex5,kindex5) = atemp5(jindex5,kindex5)   
             endif 
             endif 
          ENDDO jindex5
          ENDDO kindex5
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 6
          DO kindex20
          DO jindex20
          DO kindex6
          DO jindex6
             if kindex20 == kindex6 
             if jindex20 == jindex6 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp6(jindex6,kindex6)    = etemp3 
                sMAT6(jindex6,kindex6) = atemp6(jindex6,kindex6)   
             endif 
             endif 
          ENDDO jindex6
          ENDDO kindex6
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 7
          DO kindex20
          DO jindex20
          DO kindex7
          DO jindex7
             if kindex20 == kindex7 
             if jindex20 == jindex7 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp7(jindex7,kindex7)    = etemp3 
                sMAT7(jindex7,kindex7) = atemp7(jindex7,kindex7)   
             endif 
             endif 
          ENDDO jindex7
          ENDDO kindex7
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 8
          DO kindex20
          DO jindex20
          DO kindex8
          DO jindex8
             if kindex20 == kindex8 
             if jindex20 == jindex8 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp8(jindex8,kindex8)    = etemp3 
                sMAT8(jindex8,kindex8) = atemp8(jindex8,kindex8)   
             endif 
             endif 
          ENDDO jindex8
          ENDDO kindex8
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 9
          DO kindex20
          DO jindex20
          DO kindex9
          DO jindex9
             if kindex20 == kindex9 
             if jindex20 == jindex9 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp9(jindex9,kindex9)    = etemp3 
                sMAT9(jindex9,kindex9) = atemp9(jindex9,kindex9)   
             endif 
             endif 
          ENDDO jindex9
          ENDDO kindex9
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 10  
          DO kindex20
          DO jindex20
          DO kindex10 
          DO jindex10 
             if kindex20 == kindex10  
             if jindex20 == jindex10 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp10(jindex10,kindex10)    = etemp3 
                sMAT10(jindex10,kindex10) = atemp10(jindex10,kindex10)   
             endif 
             endif 
          ENDDO jindex10 
          ENDDO kindex10 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 11  
          DO kindex20
          DO jindex20
          DO kindex11 
          DO jindex11 
             if kindex20 == kindex11  
             if jindex20 == jindex11 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp11(jindex11,kindex11)    = etemp3 
                sMAT11(jindex11,kindex11) = atemp11(jindex11,kindex11)   
             endif 
             endif 
          ENDDO jindex11 
          ENDDO kindex11 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 12  
          DO kindex20
          DO jindex20
          DO kindex12 
          DO jindex12 
             if kindex20 == kindex12  
             if jindex20 == jindex12 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp12(jindex12,kindex12)    = etemp3 
                sMAT12(jindex12,kindex12) = atemp12(jindex12,kindex12)   
             endif 
             endif 
          ENDDO jindex12 
          ENDDO kindex12 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       sip_barrier 
      delete ax 
#
      endif # spdim < 13 
      enddo spdim 
#
     ENDPROC Aconstr_tr 
#    ------------------ 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC Aconstr
#     ------------ 
#
      create ax 
       sip_barrier 
      CALL ConstrA_aa 
      CALL ConstrB_bb 
      CALL ConstrA_bb 
      CALL ConstrB_aa 
      CALL ConstrA_a 
      CALL ConstrA_b 
       server_barrier 
#
       DO kindex20
       DO jindex20
          if kindex20 == spdim  
          if jindex20 <= spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
          endif 
          endif 
          if kindex20 <= spdim  
          if jindex20 == spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
          endif 
          endif 
       ENDDO jindex20
       ENDDO kindex20
        sip_barrier 
#
       if spdim == 2
          DO kindex20
          DO jindex20
          DO kindex2
          DO jindex2
             if kindex20 == kindex2 
             if jindex20 == jindex2 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp2(jindex2,kindex2)    = etemp3 
                sMAT2(jindex2,kindex2) = atemp2(jindex2,kindex2)   
             endif 
             endif 
          ENDDO jindex2
          ENDDO kindex2
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 3
          DO kindex20
          DO jindex20
          DO kindex3
          DO jindex3
             if kindex20 == kindex3 
             if jindex20 == jindex3 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp3(jindex3,kindex3)    = etemp3 
                sMAT3(jindex3,kindex3) = atemp3(jindex3,kindex3)   
             endif 
             endif 
          ENDDO jindex3
          ENDDO kindex3
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 4
          DO kindex20
          DO jindex20
          DO kindex4
          DO jindex4
             if kindex20 == kindex4 
             if jindex20 == jindex4 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp4(jindex4,kindex4)    = etemp3 
                sMAT4(jindex4,kindex4) = atemp4(jindex4,kindex4)   
             endif 
             endif 
          ENDDO jindex4
          ENDDO kindex4
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 5
          DO kindex20
          DO jindex20
          DO kindex5
          DO jindex5
             if kindex20 == kindex5 
             if jindex20 == jindex5 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp5(jindex5,kindex5)    = etemp3 
                sMAT5(jindex5,kindex5) = atemp5(jindex5,kindex5)   
             endif 
             endif 
          ENDDO jindex5
          ENDDO kindex5
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 6
          DO kindex20
          DO jindex20
          DO kindex6
          DO jindex6
             if kindex20 == kindex6 
             if jindex20 == jindex6 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp6(jindex6,kindex6)    = etemp3 
                sMAT6(jindex6,kindex6) = atemp6(jindex6,kindex6)   
             endif 
             endif 
          ENDDO jindex6
          ENDDO kindex6
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 7
          DO kindex20
          DO jindex20
          DO kindex7
          DO jindex7
             if kindex20 == kindex7 
             if jindex20 == jindex7 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp7(jindex7,kindex7)    = etemp3 
                sMAT7(jindex7,kindex7) = atemp7(jindex7,kindex7)   
             endif 
             endif 
          ENDDO jindex7
          ENDDO kindex7
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 8
          DO kindex20
          DO jindex20
          DO kindex8
          DO jindex8
             if kindex20 == kindex8 
             if jindex20 == jindex8 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp8(jindex8,kindex8)    = etemp3 
                sMAT8(jindex8,kindex8) = atemp8(jindex8,kindex8)   
             endif 
             endif 
          ENDDO jindex8
          ENDDO kindex8
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 9
          DO kindex20
          DO jindex20
          DO kindex9
          DO jindex9
             if kindex20 == kindex9 
             if jindex20 == jindex9 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp9(jindex9,kindex9)    = etemp3 
                sMAT9(jindex9,kindex9) = atemp9(jindex9,kindex9)   
             endif 
             endif 
          ENDDO jindex9
          ENDDO kindex9
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 10  
          DO kindex20
          DO jindex20
          DO kindex10 
          DO jindex10 
             if kindex20 == kindex10  
             if jindex20 == jindex10 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp10(jindex10,kindex10)    = etemp3 
                sMAT10(jindex10,kindex10) = atemp10(jindex10,kindex10)   
             endif 
             endif 
          ENDDO jindex10 
          ENDDO kindex10 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 11  
          DO kindex20
          DO jindex20
          DO kindex11 
          DO jindex11 
             if kindex20 == kindex11  
             if jindex20 == jindex11 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp11(jindex11,kindex11)    = etemp3 
                sMAT11(jindex11,kindex11) = atemp11(jindex11,kindex11)   
             endif 
             endif 
          ENDDO jindex11 
          ENDDO kindex11 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 12  
          DO kindex20
          DO jindex20
          DO kindex12 
          DO jindex12 
             if kindex20 == kindex12  
             if jindex20 == jindex12 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp12(jindex12,kindex12)    = etemp3 
                sMAT12(jindex12,kindex12) = atemp12(jindex12,kindex12)   
             endif 
             endif 
          ENDDO jindex12 
          ENDDO kindex12 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 13  
          DO kindex20
          DO jindex20
          DO kindex13 
          DO jindex13 
             if kindex20 == kindex13  
             if jindex20 == jindex13 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp13(jindex13,kindex13)    = etemp3 
                sMAT13(jindex13,kindex13) = atemp13(jindex13,kindex13)   
             endif 
             endif 
          ENDDO jindex13 
          ENDDO kindex13 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 14  
          DO kindex20
          DO jindex20
          DO kindex14 
          DO jindex14 
             if kindex20 == kindex14  
             if jindex20 == jindex14 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp14(jindex14,kindex14)    = etemp3 
                sMAT14(jindex14,kindex14) = atemp14(jindex14,kindex14)   
             endif 
             endif 
          ENDDO jindex14 
          ENDDO kindex14 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 15  
          DO kindex20
          DO jindex20
          DO kindex15 
          DO jindex15 
             if kindex20 == kindex15  
             if jindex20 == jindex15 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp15(jindex15,kindex15)    = etemp3 
                sMAT15(jindex15,kindex15) = atemp15(jindex15,kindex15)   
             endif 
             endif 
          ENDDO jindex15 
          ENDDO kindex15 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 16  
          DO kindex20
          DO jindex20
          DO kindex16 
          DO jindex16 
             if kindex20 == kindex16  
             if jindex20 == jindex16 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp16(jindex16,kindex16)    = etemp3 
                sMAT16(jindex16,kindex16) = atemp16(jindex16,kindex16)   
             endif 
             endif 
          ENDDO jindex16 
          ENDDO kindex16 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 17  
          DO kindex20
          DO jindex20
          DO kindex17 
          DO jindex17 
             if kindex20 == kindex17  
             if jindex20 == jindex17 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp17(jindex17,kindex17)    = etemp3 
                sMAT17(jindex17,kindex17) = atemp17(jindex17,kindex17)   
             endif 
             endif 
          ENDDO jindex17 
          ENDDO kindex17 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 18  
          DO kindex20
          DO jindex20
          DO kindex18 
          DO jindex18 
             if kindex20 == kindex18  
             if jindex20 == jindex18 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp18(jindex18,kindex18)    = etemp3 
                sMAT18(jindex18,kindex18) = atemp18(jindex18,kindex18)   
             endif 
             endif 
          ENDDO jindex18 
          ENDDO kindex18 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 19  
          DO kindex20
          DO jindex20
          DO kindex19 
          DO jindex19 
             if kindex20 == kindex19  
             if jindex20 == jindex19 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp19(jindex19,kindex19)    = etemp3 
                sMAT19(jindex19,kindex19) = atemp19(jindex19,kindex19)   
             endif 
             endif 
          ENDDO jindex19 
          ENDDO kindex19 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       sip_barrier 
      delete ax 
#
     ENDPROC Aconstr
#    --------------- 
#
# ---------------------------------------------------------------------------------- 
#
     PROC startvec2
#    -------------- 
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A1(a,i)=tai(a,i)
     put VSTART1A2(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B1(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B2(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one2 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A3(a,i)=tai(a,i)
     put VSTART1A4(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one2 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B3(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one2 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B4(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one3 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A5(a,i)=tai(a,i)
     put VSTART1A6(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one3 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B5(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one3 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B6(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one4 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A7(a,i)=tai(a,i)
     put VSTART1A8(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one4 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B7(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one4 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B8(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one5 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A9(a,i)=tai(a,i)
     put VSTART1A10(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one5 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B9(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one5 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B10(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one6 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A11(a,i)=tai(a,i)
     put VSTART1A12(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one6 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B11(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one6 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B12(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     ENDPROC startvec2
#    ----------------- 
#
# ----------------------------------------------------------------------
#
     PROC startvec
#    ------------- 
#
     allocate lax(*,*) 
     allocate lbx(*,*) 
#####etemp3 = 0.707106781 # 1/sqrt(2)  
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp3=1.0/sqr
#
     PARDO a 
        DO kk1 
           lax(a,kk1) = 0.0 
           execute place_one lax etemp3 
           PUT SSTARTA1(a,kk1) = lax(a,kk1) 

           lax(a,kk1) = 0.0 
           execute place_one2 lax etemp3 
           PUT SSTARTA2(a,kk1) = lax(a,kk1) 

           lax(a,kk1) = 0.0 
           execute place_one3 lax etemp3 
           PUT SSTARTA3(a,kk1) = lax(a,kk1) 

           lax(a,kk1) = 0.0 
           execute place_one4 lax etemp3 
           PUT SSTARTA4(a,kk1) = lax(a,kk1) 

           lax(a,kk1) = 0.0 
           execute place_one5 lax etemp3 
           PUT SSTARTA5(a,kk1) = lax(a,kk1) 

           lax(a,kk1) = 0.0 
           execute place_one6 lax etemp3 
           PUT SSTARTA6(a,kk1) = lax(a,kk1) 
        ENDDO kk1 
     ENDPARDO a 
#
     PARDO b 
        DO kk1 
           lbx(b,kk1) = 0.0 
           execute place_oneb lbx etemp3 
           PUT SSTARTB1(b,kk1) = lbx(b,kk1) 

           lbx(b,kk1) = 0.0 
           execute place_one2b lbx etemp3 
           PUT SSTARTB2(b,kk1) = lbx(b,kk1) 

           lbx(b,kk1) = 0.0 
           execute place_one3b lbx etemp3 
           PUT SSTARTB3(b,kk1) = lbx(b,kk1) 

           lbx(b,kk1) = 0.0 
           execute place_one4b lbx etemp3 
           PUT SSTARTB4(b,kk1) = lbx(b,kk1) 

           lbx(b,kk1) = 0.0 
           execute place_one5b lbx etemp3 
           PUT SSTARTB5(b,kk1) = lbx(b,kk1) 

           lbx(b,kk1) = 0.0 
           execute place_one6b lbx etemp3 
           PUT SSTARTB6(b,kk1) = lbx(b,kk1) 
        ENDDO kk1 
     ENDPARDO b 
      sip_barrier 
     deallocate lax(*,*) 
     deallocate lbx(*,*) 
#
     ENDPROC startvec
#    --------------- 
#
     PROC copy_starttoev
#    ------------------- 
#
     PARDO a 
        DO kk1 
#
           GET              SSTARTA1(a,kk1)
           tax(a,kk1)     = SSTARTA1(a,kk1)
           PUT SE1A(a,kk1)= tax(a,kk1)
           PUT S1a(a,kk1) = tax(a,kk1)
#
           DO k21 
              if k21 == 1 
                taxS(a,kk1,k21)      = tax(a,kk1)  
                PUT S1a_h(a,kk1,k21) = taxS(a,kk1,k21) 
              endif 
           ENDDO k21 
#
        ENDDO kk1 
     ENDPARDO a 
#
     PARDO b 
        DO kk1 
#
           GET              SSTARTB1(b,kk1)
           tbx(b,kk1)     = SSTARTB1(b,kk1)
           PUT SE1B(b,kk1)= tbx(b,kk1)
           PUT S1b(b,kk1) = tbx(b,kk1)
#
           DO k21 
              if k21 == 1 
                tbxS(b,kk1,k21)      = tbx(b,kk1)  
                PUT S1b_h(b,kk1,k21) = tbxS(b,kk1,k21) 
              endif 
           ENDDO k21 
#
        ENDDO kk1 
     ENDPARDO b 
#
     PARDO a, a1, i1
        DO kk1 
#
           Taxai(a,kk1,a1,i1)      = 0.0
           PUT SE2a_aa(a,kk1,a1,i1)= Taxai(a,kk1,a1,i1)
           PUT S2a_aa(a,kk1,a1,i1) = Taxai(a,kk1,a1,i1)
           DO k21 
              if k21 == 1 
                 taxaiS(a,kk1,a1,i1,k21)          = 0.0 # Taiai(a,i,a1,i1)
                 PREPARE S2a_aah(a,kk1,a1,i1,k21) = taxais(a,kk1,a1,i1,k21) 
              endif 
           ENDDO k21 
#
        ENDDO kk1 
     ENDPARDO a, a1, i1
#
     PARDO b, b1, j1
        DO kk1 
#
           Tbxbj(b,kk1,b1,j1)      = 0.0
           PUT SE2b_bb(b,kk1,b1,j1)= Tbxbj(b,kk1,b1,j1)
           PUT S2b_bb(b,kk1,b1,j1) = Tbxbj(b,kk1,b1,j1)
           DO k21 
              if k21 == 1 
                 tbxbjS(b,kk1,b1,j1,k21)          = 0.0 # Tbjbj(b,j,b1,j1)
                 PREPARE S2b_bbh(b,kk1,b1,j1,k21) = tbxbjs(b,kk1,b1,j1,k21) 
              endif 
           ENDDO k21 
#
        ENDDO kk1 
     ENDPARDO b, b1, j1
#
     PARDO b, a1, i1
        DO kk1 
#
           Tbxai(b,kk1,a1,i1)      = 0.0
           PUT SE2b_aa(b,kk1,a1,i1)= Tbxai(b,kk1,a1,i1)
           PUT S2b_aa(b,kk1,a1,i1) = Tbxai(b,kk1,a1,i1)
           DO k21 
              if k21 == 1 
                 tbxaiS(b,kk1,a1,i1,k21)          = 0.0 # Tbiai(b,i,a1,i1)
                 PREPARE S2b_aah(b,kk1,a1,i1,k21) = tbxais(b,kk1,a1,i1,k21) 
              endif 
           ENDDO k21 
#
        ENDDO kk1 
     ENDPARDO b, a1, i1
#
     PARDO a, b1, j1
        DO kk1 
#
           Taxbj(a,kk1,b1,j1)      = 0.0
           PUT SE2a_bb(a,kk1,b1,j1)= Taxbj(a,kk1,b1,j1)
           PUT S2a_bb(a,kk1,b1,j1) = Taxbj(a,kk1,b1,j1)
           DO k21 
              if k21 == 1 
                 taxbjS(a,kk1,b1,j1,k21)          = 0.0 # Tbjbj(b,j,b1,j1)
                 PREPARE S2a_bbh(a,kk1,b1,j1,k21) = taxbjs(a,kk1,b1,j1,k21) 
              endif 
           ENDDO k21 
#
        ENDDO kk1 
     ENDPARDO a, b1, j1
#
      sip_barrier
      server_barrier
     ENDPROC copy_starttoev
#    ----------------------
#
# -----------------------------------------------------------------------------
#
     PROC copy_toVCactual_tr
#    ----------------------- 
#
     PARDO a  
        DO kk1 
           DO k21
              if k21 == 21
                 GET              S1a_h(a,kk1,k21)
                 tax(a,kk1)     = S1a_h(a,kk1,k21)
                 PUT S1a(a,kk1) = Tax(a,kk1)
                 DO j21 
                    if j21 == 13 
                       taxS(a,kk1,j21)      = Tax(a,kk1)
                       PUT S1a_h(a,kk1,j21) = taxS(a,kk1,j21) 
                    endif 
                 ENDDO j21 
              endif
           ENDDO k21 
        ENDDO kk1 
     ENDPARDO a  
#
     PARDO b  
        DO kk1 
           DO k21
              if k21 == 21
                 GET              S1b_h(b,kk1,k21)
                 tbx(b,kk1)     = S1b_h(b,kk1,k21)
                 PUT S1b(b,kk1) = Tbx(b,kk1)
                 DO j21 
                    if j21 == 13 
                       tbxS(b,kk1,j21)      = Tbx(b,kk1)
                       PUT S1b_h(b,kk1,j21) = tbxS(b,kk1,j21) 
                    endif 
                 ENDDO j21 
              endif
           ENDDO k21 
        ENDDO kk1 
     ENDPARDO b  
#
     PARDO a, a1, i1
        DO kk1 
           DO k21
              if k21 == 21
                 REQUEST                        S2a_aah(a,kk1,a1,i1,k21) i1
                 Taxai(a,kk1,a1,i1)             = S2a_aah(a,kk1,a1,i1,k21)
                 PREPARE VTEMP2AA1(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
              endif # k21 == 21
           ENDDO k21
        ENDDO kk1 
     ENDPARDO a, a1, i1
#
     PARDO b, b1, j1
        DO kk1 
           DO k21
              if k21 == 21
                 REQUEST                        S2b_bbh(b,kk1,b1,j1,k21) j1
                 Tbxbj(b,kk1,b1,j1)             = S2b_bbh(b,kk1,b1,j1,k21)
                 PREPARE VTEMP2BB1(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
              endif # k21 == 21
           ENDDO k21
        ENDDO kk1 
     ENDPARDO b, b1, j1
#
     PARDO b, a1, i1
        DO kk1 
           DO k21
              if k21 == 21
                 REQUEST                        S2b_aah(b,kk1,a1,i1,k21) i1
                 Tbxai(b,kk1,a1,i1)             = S2b_aah(b,kk1,a1,i1,k21)
                 PREPARE VTEMP2BA1(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)
              endif # k21 == 21
           ENDDO k21
        ENDDO kk1 
     ENDPARDO b, a1, i1
#
     PARDO a, b1, j1
        DO kk1 
           DO k21
              if k21 == 21
                 REQUEST                        S2a_bbh(a,kk1,b1,j1,k21) j1
                 Taxbj(a,kk1,b1,j1)             = S2a_bbh(a,kk1,b1,j1,k21)
                 PREPARE VTEMP2AB1(a,kk1,b1,j1) = taxbj(a,kk1,b1,j1)
              endif # k21 == 21
           ENDDO k21
        ENDDO kk1 
     ENDPARDO a, b1, j1
#
      server_barrier
#
     PARDO a, a1, i1
        DO kk1 
           REQUEST                   VTEMP2AA1(a,kk1,a1,i1) i1
           Taxai(a,kk1,a1,i1)      = VTEMP2AA1(a,kk1,a1,i1)
           PUT S2a_aa(a,kk1,a1,i1) = Taxai(a,kk1,a1,i1)
           DO k21
              if k21 == 13
                 taxaiS(a,kk1,a1,i1,k21)          = Taxai(a,kk1,a1,i1)
                 PREPARE S2a_aah(a,kk1,a1,i1,k21) = taxaiS(a,kk1,a1,i1,k21)
              endif
           ENDDO k21
        ENDDO kk1 
     ENDPARDO a, a1, i1
#
     PARDO b, b1, j1
        DO kk1 
           REQUEST                   VTEMP2bb1(b,kk1,b1,j1) j1
           Tbxbj(b,kk1,b1,j1)      = VTEMP2bb1(b,kk1,b1,j1)
           PUT S2b_bb(b,kk1,b1,j1) = Tbxbj(b,kk1,b1,j1)
           DO k21
              if k21 == 13
                 tbxbjS(b,kk1,b1,j1,k21)          = Tbxbj(b,kk1,b1,j1)
                 PREPARE S2b_bbh(b,kk1,b1,j1,k21) = tbxbjS(b,kk1,b1,j1,k21)
              endif
           ENDDO k21
        ENDDO kk1 
     ENDPARDO b, b1, j1
#
     PARDO b, a1, i1
        DO kk1 
           REQUEST                   VTEMP2bA1(b,kk1,a1,i1) i1
           Tbxai(b,kk1,a1,i1)      = VTEMP2bA1(b,kk1,a1,i1)
           PUT S2b_aa(b,kk1,a1,i1) = Tbxai(b,kk1,a1,i1)
           DO k21
              if k21 == 13
                 tbxaiS(b,kk1,a1,i1,k21)          = Tbxai(b,kk1,a1,i1)
                 PREPARE S2b_aah(b,kk1,a1,i1,k21) = tbxaiS(b,kk1,a1,i1,k21)
              endif
           ENDDO k21
        ENDDO kk1 
     ENDPARDO b, a1, i1
#
     PARDO a, b1, j1
        DO kk1 
           REQUEST                   VTEMP2ab1(a,kk1,b1,j1) j1
           Taxbj(a,kk1,b1,j1)      = VTEMP2ab1(a,kk1,b1,j1)
           PUT S2a_bb(a,kk1,b1,j1) = Taxbj(a,kk1,b1,j1)
           DO k21
              if k21 == 13
                 taxbjS(a,kk1,b1,j1,k21)          = Taxbj(a,kk1,b1,j1)
                 PREPARE S2a_bbh(a,kk1,b1,j1,k21) = taxbjS(a,kk1,b1,j1,k21)
              endif
           ENDDO k21
        ENDDO kk1 
     ENDPARDO a, b1, j1
#
#
     ENDPROC copy_toVCactual_tr
#    -------------------------- 
#
# -----------------------------------------------------------------------------
#
     PROC copy_toVCactual
#    -------------------- 
#
     PARDO a 
        DO kk1 
           DO k21
              if k21 == spdim
                 GET                S1a_h(a,kk1,k21)
                 tax(a,kk1)       = S1a_h(a,kk1,k21)
                 PUT S1a(a,kk1) = tax(a,kk1)
              endif
           ENDDO k21
        ENDDO kk1 
     ENDPARDO a 
#
     PARDO b 
        DO kk1 
           DO k21
              if k21 == spdim
                 GET                S1b_h(b,kk1,k21)
                 tbx(b,kk1)       = S1b_h(b,kk1,k21)
                 PUT S1b(b,kk1) = tbx(b,kk1)
              endif
           ENDDO k21
        ENDDO kk1 
     ENDPARDO b 
#
     PARDO a, a1, i1 
        DO kk1 
           DO k21 
              if k21 == spdim 
                 REQUEST                   S2a_aah(a,kk1,a1,i1,k21) a 
                 taxai(a,kk1,a1,i1)      = S2a_aah(a,kk1,a1,i1,k21) 
                 PUT S2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)  
              endif 
           ENDDO k21 
        ENDDO kk1 
     ENDPARDO a, a1, i1 
#
     PARDO b, b1, j1 
        DO kk1 
           DO k21 
              if k21 == spdim 
                 REQUEST                   S2b_bbh(b,kk1,b1,j1,k21) b 
                 tbxbj(b,kk1,b1,j1)      = S2b_bbh(b,kk1,b1,j1,k21) 
                 PUT S2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)  
              endif 
           ENDDO k21 
        ENDDO kk1 
     ENDPARDO b, b1, j1 
#
     PARDO b, a1, i1 
        DO kk1 
           DO k21 
              if k21 == spdim 
                 REQUEST                   S2b_aah(b,kk1,a1,i1,k21) b 
                 tbxai(b,kk1,a1,i1)      = S2b_aah(b,kk1,a1,i1,k21) 
                 PUT S2b_aa(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)  
              endif 
           ENDDO k21 
        ENDDO kk1 
     ENDPARDO b, a1, i1 
#
     PARDO a, b1, j1 
        DO kk1 
           DO k21 
              if k21 == spdim 
                 REQUEST                   S2a_bbh(a,kk1,b1,j1,k21) a 
                 taxbj(a,kk1,b1,j1)      = S2a_bbh(a,kk1,b1,j1,k21) 
                 PUT S2a_bb(a,kk1,b1,j1) = taxbj(a,kk1,b1,j1)  
              endif 
           ENDDO k21 
        ENDDO kk1 
     ENDPARDO a, b1, j1 
#
      sip_barrier
      server_barrier
#
     ENDPROC copy_toVCactual
#
# ------------------------------------------------------------------------ 
#
     PROC SYMMETRHC_A
#    ---------------- 
#
     PARDO a, a1, i1
        DO kk1
           taxai(a,kk1,a1,i1) = 0.0
           PUT HS2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
        ENDDO kk1
     ENDPARDO a, a1, i1
      sip_barrier
#
     PARDO a, a1, i1
        DO kk1 
        DO k20
           IF k20 == spdim 
              REQUEST              HS2a_aah(a,kk1,a1,i1,k20) a
              taxai(a,kk1,a1,i1) = 0.0
              t1axai(a1,kk1,a,i1) = 0.0
#    
              if a == a1 
                 taxai(a,kk1,a1,i1) = HS2a_aah(a,kk1,a1,i1,k20)
                 execute symm_force_a  taxai
              endif
#       
              if a < a1
                 taxai(a,kk1,a1,i1)   = HS2a_aah(a,kk1,a1,i1,k20)
                 t1axai(a1,kk1,a,i1)  = taxai(a,kk1,a1,i1)
                 t1axai(a1,kk1,a,i1) *= -1.0
              endif
#       
              PUT HS2a_aa(a,kk1,a1,i1) += taxai(a,kk1,a1,i1)
              PUT HS2a_aa(a1,kk1,a,i1) += t1axai(a1,kk1,a,i1)
#
           ENDIF # k21 > spdim
        ENDDO k20
        ENDDO kk1
     ENDPARDO a, a1, i1
      sip_barrier
      server_barrier
#
     PARDO a, a1, i1
        DO kk1
           GET HS2a_aa(a,kk1,a1,i1)
           DO k20
              if k20 == spdim
                 taxaix(a,kk1,a1,i1,k20) = HS2a_aa(a,kk1,a1,i1)
                 PREPARE HS2a_aah(a,kk1,a1,i1,k20) = taxaix(a,kk1,a1,i1,k20)
              endif
           ENDDO k20
        ENDDO kk1
     ENDPARDO a, a1, i1
#
     ENDPROC SYMMETRHC_A
#    ------------------- 
#
     PROC SYMMETRHC_B
#    ----------------
#
     PARDO b, b1, j1
        DO kk1
           tbxbj(b,kk1,b1,j1) = 0.0
           PUT HS2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
        ENDDO kk1
     ENDPARDO b, b1, j1
      sip_barrier
#
     PARDO b, b1, j1
        DO kk1 
        DO k20
           IF k20 == spdim 
              REQUEST              HS2b_bbh(b,kk1,b1,j1,k20) b
              tbxbj(b,kk1,b1,j1)  = 0.0
              t1bxbj(b1,kk1,b,j1) = 0.0
#    
              if b == b1 
                 tbxbj(b,kk1,b1,j1) = HS2b_bbh(b,kk1,b1,j1,k20)
                 execute symm_force_a  tbxbj
              endif
#       
              if b < b1
                 tbxbj(b,kk1,b1,j1) = HS2b_bbh(b,kk1,b1,j1,k20)
                 t1bxbj(b1,kk1,b,j1) = tbxbj(b,kk1,b1,j1)
                 t1bxbj(b1,kk1,b,j1) *= -1.0
              endif
#       
              PUT HS2b_bb(b,kk1,b1,j1) += tbxbj(b,kk1,b1,j1)
              PUT HS2b_bb(b1,kk1,b,j1) += t1bxbj(b1,kk1,b,j1)
#
           ENDIF # k21 > spdim
        ENDDO k20
        ENDDO kk1
     ENDPARDO b, b1, j1
      sip_barrier
      server_barrier
#
     PARDO b, b1, j1
        DO kk1
           GET HS2b_bb(b,kk1,b1,j1)
           DO k20
              if k20 == spdim
                 tbxbjx(b,kk1,b1,j1,k20) = HS2b_bb(b,kk1,b1,j1)
                 PREPARE HS2b_bbh(b,kk1,b1,j1,k20) = tbxbjx(b,kk1,b1,j1,k20)
              endif
           ENDDO k20
        ENDDO kk1
     ENDPARDO b, b1, j1
#
     ENDPROC SYMMETRHC_B
#    -------------------
#
# ------------------------------------------------------------------------ 
#
      PROC READ_DATA 
#     -------------- 
#
      create t1a 
      create t1b 
      create Uaa
      create Ubb
      create Uii
      create Ujj
      create Uia
      create Ujb
#
      execute list_to_blocks                VSpipi(p,i,p1,i1)
      execute list_to_blocks                Vaaii  
      execute list_to_blocks                Viaai  
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj(q,j,q1,j1)
      execute list_to_blocks                Vbbjj   
      execute list_to_blocks                Vjbbj   
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj(p,i,q,j)
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Vbbii 
#
      execute list_to_blocks                t1a
      execute list_to_blocks                t1b
      execute list_to_blocks                T2aa
      execute list_to_blocks                T2ab
      execute list_to_blocks                T2bb
#
      execute list_to_blocks                Uaa
      execute list_to_blocks                Ubb
      execute list_to_blocks                Uii
      execute list_to_blocks                Ujj
      execute list_to_blocks                Uia
      execute list_to_blocks                Ujb
#
      execute list_to_blocks                Wiiii
      execute list_to_blocks                Wjjjj
      execute list_to_blocks                Wiijj
#
      execute list_to_blocks                Waiaa # HBAR_AIBC_aaaa
      execute list_to_blocks                Wbjbb # HBAR_AIBC_bbbb
      execute list_to_blocks                Waibb # HBAR_AIBC_aabb
      execute list_to_blocks                Wbjaa # HBAR_AIBC_bbaa
#
      execute list_to_blocks                Wiiia # HBAR_JKIA_aaaa
      execute list_to_blocks                Wjjjb # HBAR_JKIA_bbbb
      execute list_to_blocks                Wiijb # HBAR_JKIA_aabb
      execute list_to_blocks                Wjjia # HBAR_JKIA_bbaa
#
     #execute list_to_blocks                Wiaii # HBAR_IAJK_aaaa
     #execute list_to_blocks                Wiajj # HBAR_IAJK_aabb
     #execute list_to_blocks                Wjbii # HBAR_IAJK_bbaa
     #execute list_to_blocks                Wjbjj # HBAR_IAJK_bbbb
#
      execute list_to_blocks                Wiaai # HBAR_AJIB_aaaa
      execute list_to_blocks                Wjbbj # HBAR_AJIB_bbbb
      execute list_to_blocks                Wiabj # HBAR_AJIB_aabb
      execute list_to_blocks                Wjbai # HBAR_AJIB_BBAA
      execute list_to_blocks                Wiibb # HBAR_AJIB_iibb
      execute list_to_blocks                Wjjaa # HBAR_AJIB_jjaa
#
      execute list_to_blocks                Waaai # HBAR_ABCI_aaaa
      execute list_to_blocks                Wbbbj # HBAR_ABCI_bbbb
      execute list_to_blocks                Waabj # HBAR_ABCI_aabb
      execute list_to_blocks                Wbbai # HBAR_ABCI_bbaa
#
      execute read_list_to_blocks 
       server_barrier
#
      ENDPROC READ_DATA 
#     ----------------- 
# 
# ------------------------------------------------------------------------ 
#
      PROC HS_MULT 
#     ------------ 
#
      PARDO a 
         DO kk1 
            tax(a,kk1) = 0.0 
            put HS1a(a,kk1) = tax(a,kk1) 
         ENDDO kk1 
      ENDPARDO a 
#
      PARDO b 
         DO kk1 
            tbx(b,kk1) = 0.0 
            put HS1b(b,kk1) = tbx(b,kk1) 
         ENDDO kk1 
      ENDPARDO b 
#
      PARDO a, a1, i  
         DO kk1 
            taxaa(a,kk1,a1,i) = 0.0 
            put HS2a_aa(a,kk1,a1,i) = taxaa(a,kk1,a1,i) 
         ENDDO kk1 
      ENDPARDO a, a1, i  
#
      PARDO a, b1, j  
         DO kk1 
            taxbb(a,kk1,b1,j) = 0.0 
            put HS2a_bb(a,kk1,b1,j) = taxbb(a,kk1,b1,j) 
         ENDDO kk1 
      ENDPARDO a, b1, j  
#
      PARDO b, b1, j  
         DO kk1 
            tbxbb(b,kk1,b1,j) = 0.0 
            put HS2b_bb(b,kk1,b1,j) = tbxbb(b,kk1,b1,j) 
         ENDDO kk1 
      ENDPARDO b, b1, j  
#
      PARDO b, a1, i  
         DO kk1 
            tbxaa(b,kk1,a1,i) = 0.0 
            put HS2b_aa(b,kk1,a1,i) = tbxaa(b,kk1,a1,i) 
         ENDDO kk1 
      ENDPARDO b, a1, i  
#
      create Iix 
      create Ijx 
       sip_barrier 
#
#     (HS)(a) 
#     ------- 
#
      PARDO a, a1 
            DO kk1 
               GET          Uaa(a,a1) 
               GET          S1a(a1,kk1) 
               tax(a,kk1) = Uaa(a,a1)*S1a(a1,kk1)  
               PUT HS1a(a,kk1) += tax(a,kk1) 
            ENDDO kk1 
      ENDPARDO a, a1 
#
      PARDO a, i, a1 
            DO kk1  
               GET                S2a_aa(a,kk1,a1,i) 
               GET                Uia(i,a1) 
               tax(a,kk1)       = S2a_aa(a,kk1,a1,i)*Uia(i,a1) 
               PUT HS1a(a,kk1) += tax(a,kk1) 
            ENDDO kk1  
      ENDPARDO a, i, a1 
#
      PARDO a, j, b 
            DO kk1  
               GET                S2a_bb(a,kk1,b,j) 
               GET                Ujb(j,b) 
               tax(a,kk1)       = S2a_bb(a,kk1,b,j)*Ujb(j,b) 
               PUT HS1a(a,kk1) += tax(a,kk1) 
            ENDDO kk1  
      ENDPARDO a, j, b 
#
      PARDO a, a1, i, a2 
       #WHERE a1 < a2 
            DO kk1 
               REQUEST            Waiaa(a,a1,i,a2) a 
               GET                S2a_aa(a1,kk1,a2,i) 
               tax(a,kk1)       = Waiaa(a,a1,i,a2)*S2a_aa(a1,kk1,a2,i) 
               tax(a,kk1)      *= 0.5  
               PUT HS1a(a,kk1) += tax(a,kk1) 

              #REQUEST            Waaai(a1,a,a2,i) a 
              #GET                S2a_aa(a1,kk1,a2,i) 
              #tax(a,kk1)       = Waaai(a1,a,a2,i)*S2a_aa(a1,kk1,a2,i) 
              #PUT HS1a(a,kk1) += tax(a,kk1) 
            ENDDO kk1  
      ENDPARDO a, a1, i, a2 
#
      PARDO a, a1, j, b 
            DO kk1 
               REQUEST            Waibb(a,a1,j,b) a 
               GET                S2a_bb(a1,kk1,b,j) 
               tax(a,kk1)       = Waibb(a,a1,j,b)*S2a_bb(a1,kk1,b,j) 
               PUT HS1a(a,kk1) += tax(a,kk1) 

              #REQUEST            Waabj(a1,a,b,j) a 
              #GET                S2a_bb(a1,kk1,b,j) 
              #tax(a,kk1)       = Waabj(a1,a,b,j)*S2a_bb(a1,kk1,b,j) 
              #PUT HS1a(a,kk1) += tax(a,kk1) 
            ENDDO kk1  
      ENDPARDO a, a1, j, b 
#
#     (HS)(b) 
#     ------- 
#
      PARDO b, b1 
            DO kk1 
               GET          Ubb(b,b1) 
               GET          S1b(b1,kk1) 
               tbx(b,kk1) = Ubb(b,b1)*S1b(b1,kk1)  
               PUT HS1b(b,kk1) += tbx(b,kk1) 
            ENDDO kk1 
      ENDPARDO b, b1 
#
      PARDO b, j, b1 
            DO kk1  
               GET                S2b_bb(b,kk1,b1,j) 
               GET                Ujb(j,b1) 
               tbx(b,kk1)       = S2b_bb(b,kk1,b1,j)*Ujb(j,b1) 
               PUT HS1b(b,kk1) += tbx(b,kk1) 
            ENDDO kk1  
      ENDPARDO b, j, b1 
#
      PARDO b, i, a 
            DO kk1  
               GET                S2b_aa(b,kk1,a,i) 
               GET                Uia(i,a) 
               tbx(b,kk1)       = S2b_aa(b,kk1,a,i)*Uia(i,a) 
               PUT HS1b(b,kk1) += tbx(b,kk1) 
            ENDDO kk1  
      ENDPARDO b, i, a 
#
      PARDO b, b1, j, b2 
       #WHERE b1 < b2 
            DO kk1 
               REQUEST            Wbjbb(b,b1,j,b2) b 
               GET                S2b_bb(b1,kk1,b2,j) 
               tbx(b,kk1)       = Wbjbb(b,b1,j,b2)*S2b_bb(b1,kk1,b2,j) 
               tbx(b,kk1)      *= 0.5  
               PUT HS1b(b,kk1) += tbx(b,kk1) 

              #REQUEST            Wbbbj(b1,b,b2,j) b 
              #GET                S2b_bb(b1,kk1,b2,j) 
              #tbx(b,kk1)       = Wbbbj(b1,b,b2,j)*S2b_bb(b1,kk1,b2,j) 
              #PUT HS1b(b,kk1) += tbx(b,kk1) 
            ENDDO kk1  
      ENDPARDO b, b1, j, b2 
#
      PARDO b, b1, i, a 
            DO kk1 
               REQUEST            Wbjaa(b,b1,i,a) b 
               GET                S2b_aa(b1,kk1,a,i) 
               tbx(b,kk1)       = Wbjaa(b,b1,i,a)*S2b_aa(b1,kk1,a,i) 
               PUT HS1b(b,kk1) += tbx(b,kk1) 

              #REQUEST            Wbbai(b1,b,a,i) b 
              #GET                S2b_aa(b1,kk1,a,i) 
              #tbx(b,kk1)       = Wbbai(b1,b,a,i)*S2b_aa(b1,kk1,a,i) 
              #PUT HS1b(b,kk1) += tbx(b,kk1) 
            ENDDO kk1  
      ENDPARDO b, b1, i, a 
#
#     (HS)(a,ai) 
#     ---------- 
#
      PARDO a, a1, a2, i   
            DO kk1 
               REQUEST                    Waaai(a,a2,a1,i) a 
        ####   REQUEST                    Waiaa(a2,a,i,a1) a 
               GET                        S1a(a2,kk1) 
               taxai(a,kk1,a1,i)        = Waaai(a,a2,a1,i)*S1a(a2,kk1) 
        ####   taxai(a,kk1,a1,i)        = Waiaa(a2,a,i,a1)*S1a(a2,kk1) 
               PUT HS2a_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i) 
            ENDDO kk1 
      ENDPARDO a, a1, a2, i   
#
      PARDO a, a1, a2, i 
            DO kk1 
               GET                        S2a_aa(a2,kk1,a1,i) 
               GET                        Uaa(a,a2) 
               taxai(a,kk1,a1,i)        = S2a_aa(a2,kk1,a1,i)*Uaa(a,a2) 
               PUT HS2a_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i) 

              #t1axai(a1,kk1,a,i)       = taxai(a,kk1,a1,i) 
              #t1axai(a1,kk1,a,i)      *= -1.0  
              #PUT HS2a_aa(a1,kk1,a,i) += t1axai(a1,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO a, a1, a2, i 
#
      PARDO a, a1, a2, i 
            DO kk1 
               GET                        S2a_aa(a,kk1,a2,i) 
               GET                        Uaa(a1,a2) 
               taxai(a,kk1,a1,i)        = S2a_aa(a,kk1,a2,i)*Uaa(a1,a2) 
               PUT HS2a_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i)  

              #t1axai(a1,kk1,a,i)       = taxai(a,kk1,a1,i) 
              #t1axai(a1,kk1,a,i)      *= -1.0  
              #PUT HS2a_aa(a1,kk1,a,i) += t1axai(a1,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO a, a1, a2, i 
#
      PARDO a, a1, i1, i 
            DO kk1 
               GET                        S2a_aa(a,kk1,a1,i1) 
               GET                        Uii(i1,i) 
               taxai(a,kk1,a1,i)        = S2a_aa(a,kk1,a1,i1)*Uii(i1,i)  
               taxai(a,kk1,a1,i)       *= -1.0  
               PUT HS2a_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i)  
            ENDDO kk1 
      ENDPARDO a, a1, i1, i 
#
      PARDO a1, i1, a2, i 
            DO kk1 
               REQUEST              Wiaai(i1,a2,a1,i) i1 
               taiai(a2,i1,a1,i) =  Wiaai(i1,a2,a1,i)
               DO a 
                  GET                        S2a_aa(a,kk1,a2,i1) 
                  taxai(a,kk1,a1,i)        = S2a_aa(a,kk1,a2,i1)*taiai(a2,i1,a1,i) 
                  PUT HS2a_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i) 

                  t1axai(a1,kk1,a,i)       = taxai(a,kk1,a1,i) 
                  t1axai(a1,kk1,a,i)      *= -1.0  
                  PUT HS2a_aa(a1,kk1,a,i) += t1axai(a1,kk1,a,i) 
               ENDDO a 
            ENDDO kk1 
      ENDPARDO a1, i1, a2, i 
#
      PARDO a1, j1, b2, i 
            DO kk1 
               REQUEST              Wjbai(j1,b2,a1,i) j1 
               tbjai(b2,j1,a1,i)  = Wjbai(j1,b2,a1,i) 
               DO a 
                  GET                        S2a_bb(a,kk1,b2,j1) 
                  taxai(a,kk1,a1,i)        = S2a_bb(a,kk1,b2,j1)*tbjai(b2,j1,a1,i) 
                  PUT HS2a_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i) 

                  t1axai(a1,kk1,a,i)       = taxai(a,kk1,a1,i) 
                  t1axai(a1,kk1,a,i)      *= -1.0  
                  PUT HS2a_aa(a1,kk1,a,i) += t1axai(a1,kk1,a,i) 
               ENDDO a 
            ENDDO kk1 
      ENDPARDO a1, j1, b2, i 
#
      PARDO i, i1, a, a1  
           #WHERE a < a1 
            DO kk1 
               REQUEST           VSpipi(a,i,a1,i1) a 
               GET               S2a_aa(a,kk1,a1,i1) 
               tix(i,kk1)      = VSpipi(a,i,a1,i1)*S2a_aa(a,kk1,a1,i1) 
               tix(i,kk1)     *= 0.5  
               PUT Iix(i,kk1) += tix(i,kk1) 
            ENDDO kk1 
      ENDPARDO i, i1, a, a1 
#
      PARDO i, j1, a, b1  
            DO kk1 
               REQUEST           Vpiqj(a,i,b1,j1) a 
               GET               S2a_bb(a,kk1,b1,j1) 
               tix(i,kk1)      = Vpiqj(a,i,b1,j1)*S2a_bb(a,kk1,b1,j1) 
               PUT Iix(i,kk1) += tix(i,kk1) 
            ENDDO kk1 
      ENDPARDO i, j1, a, b1 
#
      PARDO j, j1, b, b1  
           #WHERE b < b1 
            DO kk1 
               REQUEST           VSqjqj(b,j,b1,j1) b 
               GET               S2b_bb(b,kk1,b1,j1) 
               tjx(j,kk1)      = VSqjqj(b,j,b1,j1)*S2b_bb(b,kk1,b1,j1) 
               tjx(j,kk1)     *= 0.5  
               PUT Ijx(j,kk1) += tjx(j,kk1) 
            ENDDO kk1 
      ENDPARDO j, j1, b, b1 
#
      PARDO j, i1, b, a1  
            DO kk1 
               REQUEST           Vpiqj(a1,i1,b,j) b 
               GET               S2b_aa(b,kk1,a1,i1) 
               tjx(j,kk1)      = Vpiqj(a1,i1,b,j)*S2b_aa(b,kk1,a1,i1) 
               PUT Ijx(j,kk1) += tjx(j,kk1) 
            ENDDO kk1 
      ENDPARDO j, i1, b, a1 
#
       sip_barrier 
#
      PARDO a, a1, i1, i 
            DO kk1 
               REQUEST                    T2aa(a,i1,a1,i) a 
               GET                        Iix(i1,kk1) 
               taxaa(a,kk1,a1,i)        = T2aa(a,i1,a1,i)*Iix(i1,kk1) 
               taxaa(a,kk1,a1,i)       *= -1.0  
               PUT HS2a_aa(a,kk1,a1,i) += taxaa(a,kk1,a1,i) 
            ENDDO kk1 
      ENDPARDO a, a1, i1, i 
#
#     (HS)(b,bj) 
#     ---------- 
#
      PARDO b, b1, b2, j   
            DO kk1 
               REQUEST                    Wbbbj(b,b2,b1,j) b 
           ####REQUEST                    Wbjbb(b2,b,j,b1) b 
               GET                        S1b(b2,kk1) 
               tbxbj(b,kk1,b1,j)        = Wbbbj(b,b2,b1,j)*S1b(b2,kk1) 
           ####tbxbj(b,kk1,b1,j)        = Wbjbb(b2,b,j,b1)*S1b(b2,kk1) 
               PUT HS2b_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j) 
            ENDDO kk1 
      ENDPARDO b, b1, b2, j   
#
      PARDO b, b1, b2, j 
            DO kk1 
               GET                        S2b_bb(b2,kk1,b1,j) 
               GET                        Ubb(b,b2) 
               tbxbj(b,kk1,b1,j)        = S2b_bb(b2,kk1,b1,j)*Ubb(b,b2) 
               PUT HS2b_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j) 

              #t1bxbj(b1,kk1,b,j)       = tbxbj(b,kk1,b1,j) 
              #t1bxbj(b1,kk1,b,j)      *= -1.0  
              #PUT HS2b_bb(b1,kk1,b,j) += t1bxbj(b1,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO b, b1, b2, j 
#
      PARDO b, b1, b2, j 
            DO kk1 
               GET                        S2b_bb(b,kk1,b2,j) 
               GET                        Ubb(b1,b2) 
               tbxbj(b,kk1,b1,j)        = S2b_bb(b,kk1,b2,j)*Ubb(b1,b2) 
               PUT HS2b_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j)  

              #t1bxbj(b1,kk1,b,j)       = tbxbj(b,kk1,b1,j) 
              #t1bxbj(b1,kk1,b,j)      *= -1.0  
              #PUT HS2b_bb(b1,kk1,b,j) += t1bxbj(b1,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO b, b1, b2, j 
#
      PARDO b, b1, j1, j 
            DO kk1 
               GET                        S2b_bb(b,kk1,b1,j1) 
               GET                        Ujj(j1,j) 
               tbxbj(b,kk1,b1,j)        = S2b_bb(b,kk1,b1,j1)*Ujj(j1,j)  
               tbxbj(b,kk1,b1,j)       *= -1.0  
               PUT HS2b_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j)  
            ENDDO kk1 
      ENDPARDO b, b1, j1, j 
#
      PARDO b1, j1, b2, j 
            DO kk1 
               REQUEST              Wjbbj(j1,b2,b1,j) j1 
               tbjbj(b2,j1,b1,j) =  Wjbbj(j1,b2,b1,j)
               DO b 
                  GET                        S2b_bb(b,kk1,b2,j1) 
                  tbxbj(b,kk1,b1,j)        = S2b_bb(b,kk1,b2,j1)*tbjbj(b2,j1,b1,j) 
                  PUT HS2b_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j) 

                  t1bxbj(b1,kk1,b,j)       = tbxbj(b,kk1,b1,j) 
                  t1bxbj(b1,kk1,b,j)      *= -1.0  
                  PUT HS2b_bb(b1,kk1,b,j) += t1bxbj(b1,kk1,b,j) 
               ENDDO b 
            ENDDO kk1 
      ENDPARDO b1, j1, b2, j 
#
      PARDO b1, i1, a2, j 
            DO kk1 
               REQUEST              Wiabj(i1,a2,b1,j) i1 
               taibj(a2,i1,b1,j)  = Wiabj(i1,a2,b1,j) 
               DO b 
                  GET                        S2b_aa(b,kk1,a2,i1) 
                  tbxbj(b,kk1,b1,j)        = S2b_aa(b,kk1,a2,i1)*taibj(a2,i1,b1,j) 
                  PUT HS2b_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j) 

                  t1bxbj(b1,kk1,b,j)       = tbxbj(b,kk1,b1,j) 
                  t1bxbj(b1,kk1,b,j)      *= -1.0  
                  PUT HS2b_bb(b1,kk1,b,j) += t1bxbj(b1,kk1,b,j) 
               ENDDO b 
            ENDDO kk1 
      ENDPARDO b1, i1, a2, j 
#
      PARDO b, b1, j1, j 
            DO kk1 
               REQUEST                    T2bb(b,j1,b1,j) b 
               GET                        Ijx(j1,kk1) 
               tbxbb(b,kk1,b1,j)        = T2bb(b,j1,b1,j)*Ijx(j1,kk1) 
               tbxbb(b,kk1,b1,j)       *= -1.0  
               PUT HS2b_bb(b,kk1,b1,j) += tbxbb(b,kk1,b1,j) 
            ENDDO kk1 
      ENDPARDO b, b1, j1, j 
#
#     (HS)(a,BJ) 
#     ---------- 
#
      PARDO a, b, a1, j 
            DO kk1 
               REQUEST                   Waabj(a,a1,b,j) a 
           ####REQUEST                   Waibb(a1,a,j,b) a 
               GET                       S1a(a1,kk1) 
               taxbb(a,kk1,b,j)        = Waabj(a,a1,b,j)*S1a(a1,kk1) 
           ####taxbb(a,kk1,b,j)        = Waibb(a1,a,j,b)*S1a(a1,kk1) 
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b, a1, j 
#
      PARDO a, b, a1, j 
            DO kk1 
               GET                       S2a_bb(a1,kk1,b,j)  
               GET                       Uaa(a,a1) 
               taxbb(a,kk1,b,j)        = S2a_bb(a1,kk1,b,j)*Uaa(a,a1)  
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b, a1, j 
#
      PARDO a, b1, j, b 
            DO kk1 
               GET                       S2a_bb(a,kk1,b1,j) 
               GET                       Ubb(b,b1) 
               taxbb(a,kk1,b,j)        = S2a_bb(a,kk1,b1,j)*Ubb(b,b1) 
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b1, j, b 
#
      PARDO a, b, j1, j 
            DO kk1 
               GET                       S2a_bb(a,kk1,b,j1) 
               GET                       Ujj(j1,j) 
               taxbb(a,kk1,b,j)        = S2a_bb(a,kk1,b,j1)*Ujj(j1,j) 
               taxbb(a,kk1,b,j)       *= -1.0  
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b, j1, j 
# 
      PARDO b1, j1, b, j 
            REQUEST Wjbbj(j1,b1,b,j) j1 
            DO a  
            DO kk1
               GET                       S2a_bb(a,kk1,b1,j1) 
               taxbb(a,kk1,b,j)        = S2a_bb(a,kk1,b1,j1)*Wjbbj(j1,b1,b,j) 
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
            ENDDO a  
      ENDPARDO b1, j1, b, j 
# 
      PARDO a1, i1, b, j 
            REQUEST Wiabj(i1,a1,b,j) i1 
            DO a  
            DO kk1
               GET                       S2a_aa(a,kk1,a1,i1) 
               taxbb(a,kk1,b,j)        = S2a_aa(a,kk1,a1,i1)*Wiabj(i1,a1,b,j) 
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
            ENDDO a  
      ENDPARDO a1, i1, b, j 
#
      PARDO a, j1, a1, j  
            REQUEST            Wjjaa(j1,j,a,a1) a 
            tppqq(a,a1,j1,j) = Wjjaa(j1,j,a,a1) 
            DO b 
            DO kk1 
               GET                       S2a_bb(a1,kk1,b,j1) 
               taxbb(a,kk1,b,j)        = tppqq(a,a1,j1,j)*S2a_bb(a1,kk1,b,j1) 
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
            ENDDO b 
      ENDPARDO a, j1, a1, j  
#
      PARDO a, b, i, j 
            DO kk1 
               REQUEST                   T2ab(a,i,b,j) a 
               GET                       Iix(i,kk1) 
               taxbb(a,kk1,b,j)        = T2ab(a,i,b,j)*Iix(i,kk1)  
               taxbb(a,kk1,b,j)       *= -1.0  
               PUT HS2a_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b, i, j 
#
#     (HS)(B,ai) 
#     ---------- 
#
      PARDO b, a, b1, i 
            DO kk1 
               REQUEST                   Wbbai(b,b1,a,i) b 
           ####REQUEST                   Wbjaa(b1,b,i,a) b 
               GET                       S1b(b1,kk1) 
               tbxaa(b,kk1,a,i)        = Wbbai(b,b1,a,i)*S1b(b1,kk1) 
           ####tbxaa(b,kk1,a,i)        = Wbjaa(b1,b,i,a)*S1b(b1,kk1) 
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO b, a, b1, i 
#
      PARDO b, a, b1, i 
            DO kk1 
               GET                       S2b_aa(b1,kk1,a,i)  
               GET                       Ubb(b,b1) 
               tbxaa(b,kk1,a,i)        = S2b_aa(b1,kk1,a,i)*Ubb(b,b1)  
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO b, a, b1, i 
#
      PARDO b, a1, i, a 
            DO kk1 
               GET                       S2b_aa(b,kk1,a1,i) 
               GET                       Uaa(a,a1) 
               tbxaa(b,kk1,a,i)        = S2b_aa(b,kk1,a1,i)*Uaa(a,a1) 
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO b, a1, i, a 
#
      PARDO b, a, i1, i 
            DO kk1 
               GET                       S2b_aa(b,kk1,a,i1) 
               GET                       Uii(i1,i) 
               tbxaa(b,kk1,a,i)        = S2b_aa(b,kk1,a,i1)*Uii(i1,i) 
               tbxaa(b,kk1,a,i)       *= -1.0  
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO b, a, i1, i 
# 
      PARDO a1, i1, a, i 
            REQUEST Wiaai(i1,a1,a,i) i1 
            DO b  
            DO kk1
               GET                       S2b_aa(b,kk1,a1,i1) 
               tbxaa(b,kk1,a,i)        = S2b_aa(b,kk1,a1,i1)*Wiaai(i1,a1,a,i) 
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
            ENDDO b  
      ENDPARDO a1, i1, a, i 
# 
      PARDO b1, j1, a, i 
            REQUEST Wjbai(j1,b1,a,i) j1 
            DO b  
            DO kk1
               GET                       S2b_bb(b,kk1,b1,j1) 
               tbxaa(b,kk1,a,i)        = S2b_bb(b,kk1,b1,j1)*Wjbai(j1,b1,a,i) 
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
            ENDDO b  
      ENDPARDO b1, j1, a, i 
#
      PARDO b, i1, b1, i  
            REQUEST            Wiibb(i1,i,b,b1) b 
            tqqpp(b,b1,i1,i) = Wiibb(i1,i,b,b1) 
            DO a 
            DO kk1 
               GET                       S2b_aa(b1,kk1,a,i1) 
               tbxaa(b,kk1,a,i)        = tqqpp(b,b1,i1,i)*S2b_aa(b1,kk1,a,i1) 
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
            ENDDO a 
      ENDPARDO b, i1, b1, i  
#
      PARDO a, b, i, j 
            DO kk1 
               REQUEST                   T2ab(a,i,b,j) a 
               GET                       Ijx(j,kk1) 
               tbxaa(b,kk1,a,i)        = T2ab(a,i,b,j)*Ijx(j,kk1)  
               tbxaa(b,kk1,a,i)       *= -1.0  
               PUT HS2b_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO a, b, i, j 
# 
# 
# Direct contribution 
# ------------------- 
#
#    Backtransform S2a_aa and S2a_bb 
#    S2a_aa(a,kk1,a1,i) -> S2Xa_aa(mu,kk1,nu,i)  
#    S2a_bb(a,kk1,b1,j) -> S2Xa_bb(mu,kk1,nu,j)  
#    S2b_aa(b,kk1,a1,i) -> G2Xb_aa(mu,kk1,nu,i)  
#    S2b_bb(b,kk1,b1,j) -> G2Xb_bb(mu,kk1,nu,j)  
#    ------------------------------------------ 
#
     create S2x_aa 
     create S2x_bb 
     create G2x_aa 
     create G2x_bb 
      sip_barrier 
#
     PARDO a, a1, i  
           DO kk1 
              GET                  S2a_aa(a,kk1,a1,i) 
              GET                  S2a_aa(a1,kk1,a,i) 
              taxai(a,kk1,a1,i)  = S2a_aa(a,kk1,a1,i) 
              t1axai(a,kk1,a1,i) = S2a_aa(a1,kk1,a,i) 
              taxai(a,kk1,a1,i) -= t1axai(a,kk1,a1,i) 
              DO mu 
                 tmxai(mu,kk1,a1,i)       = taxai(a,kk1,a1,i)*ca(mu,a) 
                 PUT S2x_aa(mu,kk1,a1,i) += tmxai(mu,kk1,a1,i)  
              ENDDO mu 
           ENDDO kk1 
     ENDPARDO a, a1, i  
#
     PARDO a, b1, j  
           DO kk1 
              GET S2a_bb(a,kk1,b1,j) 
              DO mu 
                 tmxbj(mu,kk1,b1,j)       = S2a_bb(a,kk1,b1,j)*ca(mu,a) 
                 PUT S2x_bb(mu,kk1,b1,j) += tmxbj(mu,kk1,b1,j)  
              ENDDO mu 
           ENDDO kk1 
     ENDPARDO a, b1, j  
#
     PARDO b, a1, i  
           DO kk1 
              GET S2b_aa(b,kk1,a1,i) 
              DO mu 
                 tmxai(mu,kk1,a1,i)       = S2b_aa(b,kk1,a1,i)*cb(mu,b) 
                 PUT G2x_aa(mu,kk1,a1,i) += tmxai(mu,kk1,a1,i)  
              ENDDO mu 
           ENDDO kk1 
     ENDPARDO b, a1, i  
#
     PARDO b, b1, j  
           DO kk1 
              GET                  S2b_bb(b,kk1,b1,j) 
              GET                  S2b_bb(b1,kk1,b,j) 
              tbxbj(b,kk1,b1,j)  = S2b_bb(b,kk1,b1,j) 
              t1bxbj(b,kk1,b1,j) = S2b_bb(b1,kk1,b,j) 
              tbxbj(b,kk1,b1,j) -= t1bxbj(b,kk1,b1,j) 
              DO mu 
                 tmxbj(mu,kk1,b1,j)       = tbxbj(b,kk1,b1,j)*cb(mu,b) 
                 PUT G2x_bb(mu,kk1,b1,j) += tmxbj(mu,kk1,b1,j)  
              ENDDO mu 
           ENDDO kk1 
     ENDPARDO b, b1, j  
#
     create S2x_xa 
     create S2x_xb 
     create G2x_xa 
     create G2x_xb 
      sip_barrier 
#
     PARDO mu, a1, i 
           DO kk1 
              GET S2x_aa(mu,kk1,a1,i) 
              DO nu 
                 tmxmi(mu,kk1,nu,i)       = S2x_aa(mu,kk1,a1,i)*ca(nu,a1)   
                 PUT S2x_xa(mu,kk1,nu,i) += tmxmi(mu,kk1,nu,i)  
              ENDDO nu 
           ENDDO kk1 
     ENDPARDO mu, a1, i 
#
     PARDO mu, b1, j 
           DO kk1 
              GET S2x_bb(mu,kk1,b1,j) 
              DO nu 
                 tmxmj(mu,kk1,nu,j)       = S2x_bb(mu,kk1,b1,j)*cb(nu,b1)   
                 PUT S2x_xb(mu,kk1,nu,j) += tmxmj(mu,kk1,nu,j)  
              ENDDO nu 
           ENDDO kk1 
     ENDPARDO mu, b1, j 
#
     PARDO mu, a1, i 
           DO kk1 
              GET G2x_aa(mu,kk1,a1,i) 
              DO nu 
                 tmxmi(mu,kk1,nu,i)       = G2x_aa(mu,kk1,a1,i)*ca(nu,a1)   
                 PUT G2x_xa(mu,kk1,nu,i) += tmxmi(mu,kk1,nu,i)  
              ENDDO nu 
           ENDDO kk1 
     ENDPARDO mu, a1, i 
#
     PARDO mu, b1, j 
           DO kk1 
              GET G2x_bb(mu,kk1,b1,j) 
              DO nu 
                 tmxmj(mu,kk1,nu,j)       = G2x_bb(mu,kk1,b1,j)*cb(nu,b1)   
                 PUT G2x_xb(mu,kk1,nu,j) += tmxmj(mu,kk1,nu,j)  
              ENDDO nu 
           ENDDO kk1 
     ENDPARDO mu, b1, j 
# 
     create CS2x_xa 
     create CS2x_xb 
     create CG2x_xa 
     create CG2x_xb 
      sip_barrier 
     delete S2x_aa 
     delete S2x_bb 
     delete G2x_aa 
     delete G2x_bb 
# 
# Contraction with integrals 
#
     PARDO mu, nu, lambda, sigma 
#
              execute compute_integrals aoint(mu,lambda,nu,sigma)
#          
              DO i
              DO kk1  
#
                 GET                         S2x_xa(lambda,kk1,sigma,i) 
                 tmxmi(mu,kk1,nu,i)        = aoint(mu,lambda,nu,sigma)*S2x_xa(lambda,kk1,sigma,i)
                 PUT CS2x_xa(mu,kk1,nu,i) += tmxmi(mu,kk1,nu,i)
#                
              ENDDO kk1  
              ENDDO i
#          
              DO j
              DO kk1  
#
                 GET                         S2x_xb(lambda,kk1,sigma,j) 
                 tmxmj(mu,kk1,nu,j)        = aoint(mu,lambda,nu,sigma)*S2x_xb(lambda,kk1,sigma,j)
                 PUT CS2x_xb(mu,kk1,nu,j) += tmxmj(mu,kk1,nu,j)
#                
              ENDDO kk1  
              ENDDO j
#          
              DO i
              DO kk1  
#
                 GET                         G2x_xa(lambda,kk1,sigma,i) 
                 tmxmi(mu,kk1,nu,i)        = aoint(mu,lambda,nu,sigma)*G2x_xa(lambda,kk1,sigma,i)
                 PUT CG2x_xa(mu,kk1,nu,i) += tmxmi(mu,kk1,nu,i)
#                
              ENDDO kk1  
              ENDDO i
#          
              DO j
              DO kk1  
#
                 GET                         G2x_xb(lambda,kk1,sigma,j) 
                 tmxmj(mu,kk1,nu,j)        = aoint(mu,lambda,nu,sigma)*G2x_xb(lambda,kk1,sigma,j)
                 PUT CG2x_xb(mu,kk1,nu,j) += tmxmj(mu,kk1,nu,j)
#                
              ENDDO kk1  
              ENDDO j
#
     ENDPARDO mu, nu, lambda, sigma 
#
     create CS2x_aa 
     create CS2x_bb 
     create CG2x_aa 
     create CG2x_bb 
      sip_barrier 
     delete S2x_xa 
     delete S2x_xb 
     delete G2x_xa 
     delete G2x_xb 
#
     PARDO mu, nu, i 
           DO kk1 
              GET CS2x_xa(mu,kk1,nu,i) 
              DO a 
                 tmxai(mu,kk1,a,i)        = CS2x_xa(mu,kk1,nu,i)*ca(nu,a) 
                 PUT CS2x_aa(mu,kk1,a,i) += tmxai(mu,kk1,a,i)  
              ENDDO a 
           ENDDO kk1 
     ENDPARDO mu, nu, i 
#
     PARDO mu, nu, j 
           DO kk1 
              GET CS2x_xb(mu,kk1,nu,j) 
              DO b 
                 tmxbj(mu,kk1,b,j)        = CS2x_xb(mu,kk1,nu,j)*cb(nu,b) 
                 PUT CS2x_bb(mu,kk1,b,j) += tmxbj(mu,kk1,b,j)  
              ENDDO b 
           ENDDO kk1 
     ENDPARDO mu, nu, j 
#
     PARDO mu, nu, i 
           DO kk1 
              GET CG2x_xa(mu,kk1,nu,i) 
              DO a 
                 tmxai(mu,kk1,a,i)        = CG2x_xa(mu,kk1,nu,i)*ca(nu,a) 
                 PUT CG2x_aa(mu,kk1,a,i) += tmxai(mu,kk1,a,i)  
              ENDDO a 
           ENDDO kk1 
     ENDPARDO mu, nu, i 
#
     PARDO mu, nu, j 
           DO kk1 
              GET CG2x_xb(mu,kk1,nu,j) 
              DO b 
                 tmxbj(mu,kk1,b,j)        = CG2x_xb(mu,kk1,nu,j)*cb(nu,b) 
                 PUT CG2x_bb(mu,kk1,b,j) += tmxbj(mu,kk1,b,j)  
              ENDDO b 
           ENDDO kk1 
     ENDPARDO mu, nu, j 
#
      sip_barrier 
     delete CS2x_xa 
     delete CS2x_xb 
     delete CG2x_xa 
     delete CG2x_xb 
#
     PARDO mu, a, i 
           DO kk1 
              GET CS2x_aa(mu,kk1,a,i) 
              DO a1  
                 taxai(a1,kk1,a,i)        = CS2x_aa(mu,kk1,a,i)*ca(mu,a1) 
                 taxai(a1,kk1,a,i)       *= 0.5  
                 PUT HS2a_aa(a1,kk1,a,i) += taxai(a1,kk1,a,i)  
              ENDDO a1  
           ENDDO kk1 
     ENDPARDO mu, a, i 
#
     PARDO mu, b, j 
           DO kk1 
              GET CS2x_bb(mu,kk1,b,j) 
              DO a1  
                 taxbj(a1,kk1,b,j)        = CS2x_bb(mu,kk1,b,j)*ca(mu,a1) 
                 PUT HS2a_bb(a1,kk1,b,j) += taxbj(a1,kk1,b,j)  
              ENDDO a1  
           ENDDO kk1 
     ENDPARDO mu, b, j 
#
     PARDO mu, a, i 
           DO kk1 
              GET CG2x_aa(mu,kk1,a,i) 
              DO b1  
                 tbxai(b1,kk1,a,i)        = CG2x_aa(mu,kk1,a,i)*cb(mu,b1) 
                 PUT HS2b_aa(b1,kk1,a,i) += tbxai(b1,kk1,a,i)  
              ENDDO b1  
           ENDDO kk1 
     ENDPARDO mu, a, i 
#
     PARDO mu, b, j 
           DO kk1 
              GET CG2x_bb(mu,kk1,b,j) 
              DO b1  
                 tbxbj(b1,kk1,b,j)        = CG2x_bb(mu,kk1,b,j)*cb(mu,b1) 
                 tbxbj(b1,kk1,b,j)       *= 0.5  
                 PUT HS2b_bb(b1,kk1,b,j) += tbxbj(b1,kk1,b,j)  
              ENDDO b1  
           ENDDO kk1 
     ENDPARDO mu, b, j 
#
# Finish with W-V part 
# -------------------- 
#
      create Xixii 
      create Xjxjj 
      create Xixjj 
      create Xjxii 
       sip_barrier 
#
      PARDO a1, a3, i, i1 
            REQUEST VSpipi(a1,i,a3,i1) i 
            DO i2 
            DO kk1 
               GET                       S2a_aa(a1,kk1,a3,i2) 
               tixii(i,kk1,i1,i2)      = S2a_aa(a1,kk1,a3,i2)*VSpipi(a1,i,a3,i1)  
               PUT Xixii(i,kk1,i1,i2) += tixii(i,kk1,i1,i2) 
            ENDDO kk1 
            ENDDO i2 
      ENDPARDO a1, a3, i, i1 
#
      PARDO b1, b3, j, j1 
            REQUEST VSqjqj(b1,j,b3,j1) j 
            DO j2 
            DO kk1 
               GET                       S2b_bb(b1,kk1,b3,j2) 
               tjxjj(j,kk1,j1,j2)      = S2b_bb(b1,kk1,b3,j2)*VSqjqj(b1,j,b3,j1)  
               PUT Xjxjj(j,kk1,j1,j2) += tjxjj(j,kk1,j1,j2) 
            ENDDO kk1 
            ENDDO j2 
      ENDPARDO b1, b3, j, j1 
#
      PARDO a1, b3, i1, j1 
            REQUEST              Vpiqj(a1,i1,b3,j1) a1 
            tppqq(i1,a1,b3,j1) = Vpiqj(a1,i1,b3,j1) 
            DO j 
            DO kk1 
               GET                       S2a_bb(a1,kk1,b3,j) 
               tixjj(i1,kk1,j1,j)      = S2a_bb(a1,kk1,b3,j)*Vpiqj(a1,i1,b3,j1)  
              #tixjj(i1,kk1,j,j1)      = t1ixjj(i1,kk1,j1,j) 
              #tixjj(i1,kk1,j,j1)      = Vpiqj(a1,i1,b3,j1)*S2a_bb(a1,kk1,b3,j) 
               PUT Xixjj(i1,kk1,j1,j) += tixjj(i1,kk1,j1,j) 
            ENDDO kk1 
            ENDDO j 
            tqqpp(b3,j1,a1,i1) = Vpiqj(a1,i1,b3,j1)
            DO i 
            DO kk1 
               GET                       S2b_aa(b3,kk1,a1,i) 
               tjxii(j1,kk1,i1,i)      = S2b_aa(b3,kk1,a1,i)*tqqpp(b3,j1,a1,i1)  
              #tjxii(j1,kk1,i,i1)      = Vpiqj(a1,i1,b3,j1)*S2b_aa(b3,kk1,a1,i) 
               PUT Xjxii(j1,kk1,i1,i) += tjxii(j1,kk1,i1,i) 
            ENDDO kk1 
            ENDDO i 
      ENDPARDO a1, b3, i1, j1 
#
       sip_barrier 
#
      PARDO a, a2, i, i1 
#
            REQUEST               T2aa(a,i,a2,i1) i1
            GET                   t1a(a,i)
            GET                   t1a(a2,i1)
            GET                   t1a(a,i1)
            GET                   t1a(a2,i)
#
            tpp(a2,i1)          = t1a(a2,i1)
            t1pp(a2,i)          = t1a(a2,i)
#
            t1pppp(a,i,a2,i1)   = T2aa(a,i,a2,i1)
            t2pppp(a,i,a2,i1)   = t1a(a,i)^tpp(a2,i1)
            t3pppp(a,i,a2,i1)   = t1a(a,i1)^t1pp(a2,i)
            t1pppp(a,i,a2,i1)  += t2pppp(a,i,a2,i1)
            t1pppp(a,i,a2,i1)  -= t3pppp(a,i,a2,i1)
            t1pppp(a,i,a2,i1)  *= 0.25  
#
            DO i2 
            DO kk1 
               GET                         Xixii(i,kk1,i1,i2) 
               taxai(a,kk1,a2,i2)        = t1pppp(a,i,a2,i1)*Xixii(i,kk1,i1,i2)  
               PUT HS2a_aa(a,kk1,a2,i2) += taxai(a,kk1,a2,i2)  
            ENDDO kk1 
            ENDDO i2 
#
      ENDPARDO a, a2, i, i1 
#
      PARDO b, b2, j, j1 
#
            REQUEST               T2bb(b,j,b2,j1) j1
            GET                   t1b(b,j)
            GET                   t1b(b2,j1)
            GET                   t1b(b,j1)
            GET                   t1b(b2,j)
#
            tqq(b2,j1)          = t1b(b2,j1)
            t1qq(b2,j)          = t1b(b2,j)
#
            t1qqqq(b,j,b2,j1)   = T2bb(b,j,b2,j1)
            t2qqqq(b,j,b2,j1)   = t1b(b,j)^tqq(b2,j1)
            t3qqqq(b,j,b2,j1)   = t1b(b,j1)^t1qq(b2,j)
            t1qqqq(b,j,b2,j1)  += t2qqqq(b,j,b2,j1)
            t1qqqq(b,j,b2,j1)  -= t3qqqq(b,j,b2,j1)
            t1qqqq(b,j,b2,j1)  *= 0.25  
#
            DO j2 
            DO kk1 
               GET                         Xjxjj(j,kk1,j1,j2) 
               tbxbj(b,kk1,b2,j2)        = t1qqqq(b,j,b2,j1)*Xjxjj(j,kk1,j1,j2)  
               PUT HS2b_bb(b,kk1,b2,j2) += tbxbj(b,kk1,b2,j2)  
            ENDDO kk1 
            ENDDO j2 
#
      ENDPARDO b, b2, j, j1 
#
      PARDO a, b2, i1, j1 
#
            REQUEST               T2ab(a,i1,b2,j1) j1
            GET                   t1a(a,i1)
            GET                   t1b(b2,j1)
#
            t1ppqq(a,i1,b2,j1)   = T2ab(a,i1,b2,j1)
            t2ppqq(a,i1,b2,j1)   = t1a(a,i1)^t1b(b2,j1)
            t1ppqq(a,i1,b2,j1)  += t2ppqq(a,i1,b2,j1)
#
            tqpqp(j1,a,b2,i1) = t1ppqq(a,i1,b2,j1) 
            DO j 
            DO kk1 
               GET                        Xixjj(i1,kk1,j1,j) 
               taxbj(a,kk1,b2,j)        = t1ppqq(a,i1,b2,j1)*Xixjj(i1,kk1,j1,j) 
               PUT HS2a_bb(a,kk1,b2,j) += taxbj(a,kk1,b2,j) 
            ENDDO kk1 
            ENDDO j 
#
            tqppq(b2,i1,a,j1) = t1ppqq(a,i1,b2,j1) 
            DO i 
            DO kk1 
               GET                        Xjxii(j1,kk1,i1,i) 
               tbxai(b2,kk1,a,i)        = tqppq(b2,i1,a,j1)*Xjxii(j1,kk1,i1,i) 
               PUT HS2b_aa(b2,kk1,a,i) += tbxai(b2,kk1,a,i) 
            ENDDO kk1 
            ENDDO i 
#
      ENDPARDO a, b2, i1, j1 
# 
      PARDO a, a2, a1, a3
#
            tpppp(a,a1,a2,a3) = 0.0
#
            DO i
               REQUEST              VSaaai(a1,a,a3,i) i
               GET                  t1a(a2,i)
               t1pppp(a,a1,a2,a3) = VSaaai(a1,a,a3,i)*t1a(a2,i)
               tpppp(a,a1,a2,a3) -= t1pppp(a,a1,a2,a3)
            ENDDO i
#
            DO i
               REQUEST              VSaaai(a1,a2,a3,i) i
               GET                  t1a(a,i)
               t1pppp(a,a1,a2,a3) = VSaaai(a1,a2,a3,i)*t1a(a,i)
               tpppp(a,a1,a2,a3) += t1pppp(a,a1,a2,a3)
            ENDDO i
#
            DO i 
            DO kk1 
               GET                        S2a_aa(a1,kk1,a3,i) 
               taxai(a,kk1,a2,i)        = tpppp(a,a1,a2,a3)*S2a_aa(a1,kk1,a3,i) 
               taxai(a,kk1,a2,i)       *= 0.5  
               PUT HS2a_aa(a,kk1,a2,i) += taxai(a,kk1,a2,i)  
            ENDDO kk1 
            ENDDO i 
#
      ENDPARDO a, a2, a1, a3
#
      PARDO a, b2, a1, b3           
#
            tppqq(a,a1,b2,b3) = 0.0
#           
            DO j
               REQUEST              Vaabj(a1,a,b3,j) j
               GET                  t1b(b2,j)
               t1ppqq(a,a1,b2,b3) = Vaabj(a1,a,b3,j)*t1b(b2,j)
               tppqq(a,a1,b2,b3) -= t1ppqq(a,a1,b2,b3)
            ENDDO j
#              
            DO i 
               REQUEST              Vbbai(b3,b2,a1,i) i
               GET                  t1a(a,i) 
               t1ppqq(a,a1,b2,b3) = Vbbai(b3,b2,a1,i)*t1a(a,i)
               tppqq(a,a1,b2,b3) -= t1ppqq(a,a1,b2,b3)
            ENDDO i
#
            DO j 
            DO kk1 
               GET                        S2a_bb(a1,kk1,b3,j) 
               taxbj(a,kk1,b2,j)        = tppqq(a,a1,b2,b3)*S2a_bb(a1,kk1,b3,j) 
               PUT HS2a_bb(a,kk1,b2,j) += taxbj(a,kk1,b2,j)  
            ENDDO kk1 
            ENDDO j 
#
            DO i 
            DO kk1 
               GET                        S2b_aa(b3,kk1,a1,i) 
               tbxai(b2,kk1,a,i)        = tppqq(a,a1,b2,b3)*S2b_aa(b3,kk1,a1,i) 
               PUT HS2b_aa(b2,kk1,a,i) += tbxai(b2,kk1,a,i)  
            ENDDO kk1 
            ENDDO i 
#
      ENDPARDO a, b2, a1, b3 
#
      PARDO b, b2, b1, b3
#              
            tqqqq(b,b1,b2,b3) = 0.0  
#              
            DO j 
               REQUEST              VSbbbj(b1,b,b3,j) j
               GET                  t1b(b2,j) 
               t1qqqq(b,b1,b2,b3) = VSbbbj(b1,b,b3,j)*t1b(b2,j)
               tqqqq(b,b1,b2,b3) -= t1qqqq(b,b1,b2,b3) 
            ENDDO j 
#              
            DO j
               REQUEST              VSbbbj(b1,b2,b3,j) j
               GET                  t1b(b,j) 
               t1qqqq(b,b1,b2,b3) = VSbbbj(b1,b2,b3,j)*t1b(b,j)
               tqqqq(b,b1,b2,b3) += t1qqqq(b,b1,b2,b3)
            ENDDO j
#
            DO j 
            DO kk1 
               GET                        S2b_bb(b1,kk1,b3,j) 
               tbxbj(b,kk1,b2,j)        = tqqqq(b,b1,b2,b3)*S2b_bb(b1,kk1,b3,j) 
               tbxbj(b,kk1,b2,j)       *= 0.5  
               PUT HS2b_bb(b,kk1,b2,j) += tbxbj(b,kk1,b2,j)  
            ENDDO kk1 
            ENDDO j 
#
      ENDPARDO b, b2, b1, b3 
#
       sip_barrier 
#
      delete Iix 
      delete Ijx 
      delete CS2x_aa 
      delete CS2x_bb 
      delete CG2x_aa 
      delete CG2x_bb 
#
      delete Xixii 
      delete Xjxjj 
      delete Xixjj 
      delete Xjxii 
#
      CALL UPDATE 
#
       server_barrier
      call SYMMETRHC_A
      call SYMMETRHC_B
       server_barrier
#
      ENDPROC HS_MULT 
#     --------------- 
# 
# ------------------------------------------------------------------------ 
#
      PROC CREATE_SARRAYS 
#     ------------------- 
#
      create SSTARTA1
      create SSTARTA2
      create SSTARTA3
      create SSTARTA4
      create SSTARTA5
      create SSTARTA6
      create SSTARTA7
      create SSTARTB1
      create SSTARTB2
      create SSTARTB3
      create SSTARTB4
      create SSTARTB5
      create SSTARTB6
      create SSTARTB7
#
      create SE1A
      create SE1B
      create SE2a_aa 
      create SE2b_bb 
      create SE2b_aa 
      create SE2a_bb 
#
      create S1a 
      create S1b 
      create S2a_aa 
      create S2a_bb 
      create S2b_bb 
      create S2b_aa 
#
      create HS1a 
      create HS1b 
      create HS2a_aa 
      create HS2a_bb 
      create HS2b_bb 
      create HS2b_aa 
#
      create S1a_h 
      create S1b_h 
#
      create HS1a_h 
      create HS1b_h 
#
      ENDPROC CREATE_SARRAYS 
#     --------------------- 
# 
# ------------------------------------------------------------------------ 
#
# ------------------------------------------------------------------------------------------ 
#
     PROC Adiag
#
     Aeig1=0.0
     Aeig2=0.0
     Aeig3=0.0
     Aeig4=0.0
     Aeig5=0.0
     Aeig6=0.0
     Aeig7=0.0
     Aeig8=0.0
     Aeig9=0.0
     Aeig10=0.0
     Aeig11=0.0
     Aeig12=0.0
     Aeig13=0.0
     Aeig14=0.0
     Aeig15=0.0
     Aeig16=0.0
     Aeig17=0.0
     Aeig18=0.0
     Aeig19=0.0
     Aeig20=0.0
#
#    FIRST ITERATION
#
     if spdim == 1
#
    #Aeig1=a1_1
#
     do jindex20 
     do kindex20 
         if jindex20 == 1 
         if kindex20 == 1 
            t20(kindex20,jindex20) = sMAT20(kindex20,jindex20) 
            execute return_sval t20  Aeig1
         endif 
         endif 
     enddo kindex20 
     enddo jindex20 
#
     endif
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#    --------------2th iteration-----------------
     if spdim == 2
#
     execute eig_nonsymm Smat2 SVEV2
#
     do jindex2
     do kindex2
        tcoef2(kindex2,jindex2)=Smat2(kindex2,jindex2)
        if kindex2 == 1
        if jindex2 == 1
           execute return_sval tcoef2  Aeig1
        endif
        endif
        if kindex2 == 2
        if jindex2 == 2
           execute return_sval tcoef2  Aeig2
        endif
        endif
#
     enddo kindex2
     enddo jindex2
#
     endif
#
#    --------------end 2th iteration-----------------
#
#    --------------3th iteration-----------------
     if spdim == 3
#
     execute eig_nonsymm Smat3 SVEV3
#
     do jindex3
     do kindex3
#
     tcoef3(kindex3,jindex3)=Smat3(kindex3,jindex3)
#
     if kindex3 == 1
     if jindex3 == 1
     execute return_sval tcoef3  Aeig1
     endif
     endif
     if kindex3 == 2
     if jindex3 == 2
     execute return_sval tcoef3  Aeig2
     endif
     endif
     if kindex3 == 3
     if jindex3 == 3
     execute return_sval tcoef3  Aeig3
     endif
     endif
#
     enddo kindex3
     enddo jindex3
#
     endif
#
#    --------------end 3th iteration-----------------
#
#    --------------4th iteration-----------------
     if spdim == 4
#
     execute eig_nonsymm Smat4 SVEV4
#
     do jindex4
     do kindex4
#
     tcoef4(kindex4,jindex4)=Smat4(kindex4,jindex4)
#
     if kindex4 == 1
     if jindex4 == 1
     execute return_sval tcoef4  Aeig1
     endif
     endif
     if kindex4 == 2
     if jindex4 == 2
     execute return_sval tcoef4  Aeig2
     endif
     endif
     if kindex4 == 3
     if jindex4 == 3
     execute return_sval tcoef4  Aeig3
     endif
     endif
     if kindex4 == 4
     if jindex4 == 4
     execute return_sval tcoef4  Aeig4
     endif
     endif
#
     enddo kindex4
     enddo jindex4
#
     endif
#
#    --------------end 4th iteration-----------------
#
#    --------------5th iteration-----------------
     if spdim == 5
#
     execute eig_nonsymm Smat5 SVEV5
#
     do jindex5
     do kindex5
#
     tcoef5(kindex5,jindex5)=Smat5(kindex5,jindex5)
#
     if kindex5 == 1
     if jindex5 == 1
     execute return_sval tcoef5  Aeig1
     endif
     endif
     if kindex5 == 2
     if jindex5 == 2
     execute return_sval tcoef5  Aeig2
     endif
     endif
     if kindex5 == 3
     if jindex5 == 3
     execute return_sval tcoef5  Aeig3
     endif
     endif
     if kindex5 == 4
     if jindex5 == 4
     execute return_sval tcoef5  Aeig4
     endif
     endif
     if kindex5 == 5
     if jindex5 == 5
     execute return_sval tcoef5  Aeig5
     endif
     endif
#
     enddo kindex5
     enddo jindex5
#
     endif
#
#
#    --------------end 5th iteration-----------------
#
#
#    --------------6th iteration-----------------
     if spdim == 6
#
     execute eig_nonsymm Smat6 SVEV6
#
     do jindex6
     do kindex6
#
     tcoef6(kindex6,jindex6)=Smat6(kindex6,jindex6)
#
     if kindex6 == 1
     if jindex6 == 1
     execute return_sval tcoef6  Aeig1
     endif
     endif
     if kindex6 == 2
     if jindex6 == 2
     execute return_sval tcoef6  Aeig2
     endif
     endif
     if kindex6 == 3
     if jindex6 == 3
     execute return_sval tcoef6  Aeig3
     endif
     endif
     if kindex6 == 4
     if jindex6 == 4
     execute return_sval tcoef6  Aeig4
     endif
     endif
     if kindex6 == 5
     if jindex6 == 5
     execute return_sval tcoef6  Aeig5
     endif
     endif
     if kindex6 == 6
     if jindex6 == 6
     execute return_sval tcoef6  Aeig6
     endif
     endif
#
     enddo kindex6
     enddo jindex6
#
     endif
#
#
#    --------------end 6th iteration-----------------
#
#
#    --------------7th iteration-----------------
     if spdim == 7
#
     execute eig_nonsymm Smat7 SVEV7
#
     do jindex7
     do kindex7
#
     tcoef7(kindex7,jindex7)=Smat7(kindex7,jindex7)
#
     if kindex7 == 1
     if jindex7 == 1
     execute return_sval tcoef7  Aeig1
     endif
     endif
     if kindex7 == 2
     if jindex7 == 2
     execute return_sval tcoef7  Aeig2
     endif
     endif
     if kindex7 == 3
     if jindex7 == 3
     execute return_sval tcoef7  Aeig3
     endif
     endif
     if kindex7 == 4
     if jindex7 == 4
     execute return_sval tcoef7  Aeig4
     endif
     endif
     if kindex7 == 5
     if jindex7 == 5
     execute return_sval tcoef7  Aeig5
     endif
     endif
     if kindex7 == 6
     if jindex7 == 6
     execute return_sval tcoef7  Aeig6
     endif
     endif
     if kindex7 == 7
     if jindex7 == 7
     execute return_sval tcoef7  Aeig7
     endif
     endif
#
     enddo kindex7
     enddo jindex7
#
     endif
#
#
#    --------------end 7th iteration-----------------
#
#
#    --------------8th iteration-----------------
     if spdim == 8
#
     execute eig_nonsymm Smat8 SVEV8
#
     do jindex8
     do kindex8
#
     tcoef8(kindex8,jindex8)=Smat8(kindex8,jindex8)
#
     if kindex8 == 1
     if jindex8 == 1
     execute return_sval tcoef8  Aeig1
     endif
     endif
     if kindex8 == 2
     if jindex8 == 2
     execute return_sval tcoef8  Aeig2
     endif
     endif
     if kindex8 == 3
     if jindex8 == 3
     execute return_sval tcoef8  Aeig3
     endif
     endif
     if kindex8 == 4
     if jindex8 == 4
     execute return_sval tcoef8  Aeig4
     endif
     endif
     if kindex8 == 5
     if jindex8 == 5
     execute return_sval tcoef8  Aeig5
     endif
     endif
     if kindex8 == 6
     if jindex8 == 6
     execute return_sval tcoef8  Aeig6
     endif
     endif
     if kindex8 == 7
     if jindex8 == 7
     execute return_sval tcoef8  Aeig7
     endif
     endif
     if kindex8 == 8
     if jindex8 == 8
     execute return_sval tcoef8  Aeig8
     endif
     endif
#
     enddo kindex8
     enddo jindex8
#
     endif
#
#
#    --------------end 8th iteration-----------------
#
#
#    --------------9th iteration-----------------
     if spdim == 9
#
     execute eig_nonsymm Smat9 SVEV9
#
     do jindex9
     do kindex9
#
     tcoef9(kindex9,jindex9)=Smat9(kindex9,jindex9)
#
     if kindex9 == 1
     if jindex9 == 1
     execute return_sval tcoef9  Aeig1
     endif
     endif
     if kindex9 == 2
     if jindex9 == 2
     execute return_sval tcoef9  Aeig2
     endif
     endif
     if kindex9 == 3
     if jindex9 == 3
     execute return_sval tcoef9  Aeig3
     endif
     endif
     if kindex9 == 4
     if jindex9 == 4
     execute return_sval tcoef9  Aeig4
     endif
     endif
     if kindex9 == 5
     if jindex9 == 5
     execute return_sval tcoef9  Aeig5
     endif
     endif
     if kindex9 == 6
     if jindex9 == 6
     execute return_sval tcoef9  Aeig6
     endif
     endif
     if kindex9 == 7
     if jindex9 == 7
     execute return_sval tcoef9  Aeig7
     endif
     endif
     if kindex9 == 8
     if jindex9 == 8
     execute return_sval tcoef9  Aeig8
     endif
     endif
     if kindex9 == 9
     if jindex9 == 9
     execute return_sval tcoef9  Aeig9
     endif
     endif
#
     enddo kindex9
     enddo jindex9
#
     endif
#
#
#    --------------end 9th iteration-----------------
#
#
#    --------------10th iteration-----------------
     if spdim == 10
#
     execute eig_nonsymm Smat10 SVEV10
#
     do jindex10
     do kindex10
#
     tcoef10(kindex10,jindex10)=Smat10(kindex10,jindex10)
#
     if kindex10 == 1
     if jindex10 == 1
     execute return_sval tcoef10  Aeig1
     endif
     endif
     if kindex10 == 2
     if jindex10 == 2
     execute return_sval tcoef10  Aeig2
     endif
     endif
     if kindex10 == 3
     if jindex10 == 3
     execute return_sval tcoef10  Aeig3
     endif
     endif
     if kindex10 == 4
     if jindex10 == 4
     execute return_sval tcoef10  Aeig4
     endif
     endif
     if kindex10 == 5
     if jindex10 == 5
     execute return_sval tcoef10  Aeig5
     endif
     endif
     if kindex10 == 6
     if jindex10 == 6
     execute return_sval tcoef10  Aeig6
     endif
     endif
     if kindex10 == 7
     if jindex10 == 7
     execute return_sval tcoef10  Aeig7
     endif
     endif
     if kindex10 == 8
     if jindex10 == 8
     execute return_sval tcoef10  Aeig8
     endif
     endif
     if kindex10 == 9
     if jindex10 == 9
     execute return_sval tcoef10  Aeig9
     endif
     endif
     if kindex10 == 10
     if jindex10 == 10
     execute return_sval tcoef10  Aeig10
     endif
     endif
#
     enddo kindex10
     enddo jindex10
#
     endif
#
#
#    --------------end 10th iteration-----------------
#
#
#    --------------11th iteration-----------------
     if spdim == 11
#
     execute eig_nonsymm Smat11 SVEV11
#
     do jindex11
     do kindex11
#
     tcoef11(kindex11,jindex11)=Smat11(kindex11,jindex11)
#
     if kindex11 == 1
     if jindex11 == 1
     execute return_sval tcoef11  Aeig1
     endif
     endif
     if kindex11 == 2
     if jindex11 == 2
     execute return_sval tcoef11  Aeig2
     endif
     endif
     if kindex11 == 3
     if jindex11 == 3
     execute return_sval tcoef11  Aeig3
     endif
     endif
     if kindex11 == 4
     if jindex11 == 4
     execute return_sval tcoef11  Aeig4
     endif
     endif
     if kindex11 == 5
     if jindex11 == 5
     execute return_sval tcoef11  Aeig5
     endif
     endif
     if kindex11 == 6
     if jindex11 == 6
     execute return_sval tcoef11  Aeig6
     endif
     endif
     if kindex11 == 7
     if jindex11 == 7
     execute return_sval tcoef11  Aeig7
     endif
     endif
     if kindex11 == 8
     if jindex11 == 8
     execute return_sval tcoef11  Aeig8
     endif
     endif
     if kindex11 == 9
     if jindex11 == 9
     execute return_sval tcoef11  Aeig9
     endif
     endif
     if kindex11 == 10
     if jindex11 == 10
     execute return_sval tcoef11  Aeig10
     endif
     endif
     if kindex11 == 11
     if jindex11 == 11
     execute return_sval tcoef11  Aeig11
     endif
     endif
#
     enddo kindex11
     enddo jindex11
#
     endif
#
#
#    --------------end 11th iteration-----------------
#
#
#    --------------12th iteration-----------------
     if spdim == 12
#
     execute eig_nonsymm Smat12 SVEV12
#
     do jindex12
     do kindex12
#
     tcoef12(kindex12,jindex12)=Smat12(kindex12,jindex12)
#
     if kindex12 == 1
     if jindex12 == 1
     execute return_sval tcoef12  Aeig1
     endif
     endif
     if kindex12 == 2
     if jindex12 == 2
     execute return_sval tcoef12  Aeig2
     endif
     endif
     if kindex12 == 3
     if jindex12 == 3
     execute return_sval tcoef12  Aeig3
     endif
     endif
     if kindex12 == 4
     if jindex12 == 4
     execute return_sval tcoef12  Aeig4
     endif
     endif
     if kindex12 == 5
     if jindex12 == 5
     execute return_sval tcoef12  Aeig5
     endif
     endif
     if kindex12 == 6
     if jindex12 == 6
     execute return_sval tcoef12  Aeig6
     endif
     endif
     if kindex12 == 7
     if jindex12 == 7
     execute return_sval tcoef12  Aeig7
     endif
     endif
     if kindex12 == 8
     if jindex12 == 8
     execute return_sval tcoef12  Aeig8
     endif
     endif
     if kindex12 == 9
     if jindex12 == 9
     execute return_sval tcoef12  Aeig9
     endif
     endif
     if kindex12 == 10
     if jindex12 == 10
     execute return_sval tcoef12  Aeig10
     endif
     endif
     if kindex12 == 11
     if jindex12 == 11
     execute return_sval tcoef12  Aeig11
     endif
     endif
     if kindex12 == 12
     if jindex12 == 12
     execute return_sval tcoef12  Aeig12
     endif
     endif
#
     enddo kindex12
     enddo jindex12
#
     endif
#
#
#    --------------end 12th iteration-----------------
#
#
#    --------------13th iteration-----------------
     if spdim == 13
#
     execute eig_nonsymm Smat13 SVEV13
#
     do jindex13
     do kindex13
#
     tcoef13(kindex13,jindex13)=Smat13(kindex13,jindex13)
#
     if kindex13 == 1
     if jindex13 == 1
     execute return_sval tcoef13  Aeig1
     endif
     endif
     if kindex13 == 2
     if jindex13 == 2
     execute return_sval tcoef13  Aeig2
     endif
     endif
     if kindex13 == 3
     if jindex13 == 3
     execute return_sval tcoef13  Aeig3
     endif
     endif
     if kindex13 == 4
     if jindex13 == 4
     execute return_sval tcoef13  Aeig4
     endif
     endif
     if kindex13 == 5
     if jindex13 == 5
     execute return_sval tcoef13  Aeig5
     endif
     endif
     if kindex13 == 6
     if jindex13 == 6
     execute return_sval tcoef13  Aeig6
     endif
     endif
     if kindex13 == 7
     if jindex13 == 7
     execute return_sval tcoef13  Aeig7
     endif
     endif
     if kindex13 == 8
     if jindex13 == 8
     execute return_sval tcoef13  Aeig8
     endif
     endif
     if kindex13 == 9
     if jindex13 == 9
     execute return_sval tcoef13  Aeig9
     endif
     endif
     if kindex13 == 10
     if jindex13 == 10
     execute return_sval tcoef13  Aeig10
     endif
     endif
     if kindex13 == 11
     if jindex13 == 11
     execute return_sval tcoef13  Aeig11
     endif
     endif
     if kindex13 == 12
     if jindex13 == 12
     execute return_sval tcoef13  Aeig12
     endif
     endif
     if kindex13 == 13
     if jindex13 == 13
     execute return_sval tcoef13  Aeig13
     endif
     endif
#
     enddo kindex13
     enddo jindex13
#
     endif
#
#
#    --------------end 13th iteration-----------------
#
#
#    --------------14th iteration-----------------
     if spdim == 14
#
     execute eig_nonsymm Smat14 SVEV14
#
     do jindex14
     do kindex14
#
     tcoef14(kindex14,jindex14)=Smat14(kindex14,jindex14)
#
     if kindex14 == 1
     if jindex14 == 1
     execute return_sval tcoef14  Aeig1
     endif
     endif
     if kindex14 == 2
     if jindex14 == 2
     execute return_sval tcoef14  Aeig2
     endif
     endif
     if kindex14 == 3
     if jindex14 == 3
     execute return_sval tcoef14  Aeig3
     endif
     endif
     if kindex14 == 4
     if jindex14 == 4
     execute return_sval tcoef14  Aeig4
     endif
     endif
     if kindex14 == 5
     if jindex14 == 5
     execute return_sval tcoef14  Aeig5
     endif
     endif
     if kindex14 == 6
     if jindex14 == 6
     execute return_sval tcoef14  Aeig6
     endif
     endif
     if kindex14 == 7
     if jindex14 == 7
     execute return_sval tcoef14  Aeig7
     endif
     endif
     if kindex14 == 8
     if jindex14 == 8
     execute return_sval tcoef14  Aeig8
     endif
     endif
     if kindex14 == 9
     if jindex14 == 9
     execute return_sval tcoef14  Aeig9
     endif
     endif
     if kindex14 == 10
     if jindex14 == 10
     execute return_sval tcoef14  Aeig10
     endif
     endif
     if kindex14 == 11
     if jindex14 == 11
     execute return_sval tcoef14  Aeig11
     endif
     endif
     if kindex14 == 12
     if jindex14 == 12
     execute return_sval tcoef14  Aeig12
     endif
     endif
     if kindex14 == 13
     if jindex14 == 13
     execute return_sval tcoef14  Aeig13
     endif
     endif
     if kindex14 == 14
     if jindex14 == 14
     execute return_sval tcoef14  Aeig14
     endif
     endif
#
     enddo kindex14
     enddo jindex14
#
     endif
#
#
#    --------------end 14th iteration-----------------
#
#
#    --------------15th iteration-----------------
     if spdim == 15
#
     execute eig_nonsymm Smat15 SVEV15
#
     do jindex15
     do kindex15
#
     tcoef15(kindex15,jindex15)=Smat15(kindex15,jindex15)
#
     if kindex15 == 1
     if jindex15 == 1
     execute return_sval tcoef15  Aeig1
     endif
     endif
     if kindex15 == 2
     if jindex15 == 2
     execute return_sval tcoef15  Aeig2
     endif
     endif
     if kindex15 == 3
     if jindex15 == 3
     execute return_sval tcoef15  Aeig3
     endif
     endif
     if kindex15 == 4
     if jindex15 == 4
     execute return_sval tcoef15  Aeig4
     endif
     endif
     if kindex15 == 5
     if jindex15 == 5
     execute return_sval tcoef15  Aeig5
     endif
     endif
     if kindex15 == 6
     if jindex15 == 6
     execute return_sval tcoef15  Aeig6
     endif
     endif
     if kindex15 == 7
     if jindex15 == 7
     execute return_sval tcoef15  Aeig7
     endif
     endif
     if kindex15 == 8
     if jindex15 == 8
     execute return_sval tcoef15  Aeig8
     endif
     endif
     if kindex15 == 9
     if jindex15 == 9
     execute return_sval tcoef15  Aeig9
     endif
     endif
     if kindex15 == 10
     if jindex15 == 10
     execute return_sval tcoef15  Aeig10
     endif
     endif
     if kindex15 == 11
     if jindex15 == 11
     execute return_sval tcoef15  Aeig11
     endif
     endif
     if kindex15 == 12
     if jindex15 == 12
     execute return_sval tcoef15  Aeig12
     endif
     endif
     if kindex15 == 13
     if jindex15 == 13
     execute return_sval tcoef15  Aeig13
     endif
     endif
     if kindex15 == 14
     if jindex15 == 14
     execute return_sval tcoef15  Aeig14
     endif
     endif
     if kindex15 == 15
     if jindex15 == 15
     execute return_sval tcoef15  Aeig15
     endif
     endif
#
     enddo kindex15
     enddo jindex15
#
     endif
#
#
#    --------------end 15th iteration-----------------
#
#
#    --------------16th iteration-----------------
     if spdim == 16
#
     execute eig_nonsymm Smat16 SVEV16
#
     do jindex16
     do kindex16
#
     tcoef16(kindex16,jindex16)=Smat16(kindex16,jindex16)
#
     if kindex16 == 1
     if jindex16 == 1
     execute return_sval tcoef16  Aeig1
     endif
     endif
     if kindex16 == 2
     if jindex16 == 2
     execute return_sval tcoef16  Aeig2
     endif
     endif
     if kindex16 == 3
     if jindex16 == 3
     execute return_sval tcoef16  Aeig3
     endif
     endif
     if kindex16 == 4
     if jindex16 == 4
     execute return_sval tcoef16  Aeig4
     endif
     endif
     if kindex16 == 5
     if jindex16 == 5
     execute return_sval tcoef16  Aeig5
     endif
     endif
     if kindex16 == 6
     if jindex16 == 6
     execute return_sval tcoef16  Aeig6
     endif
     endif
     if kindex16 == 7
     if jindex16 == 7
     execute return_sval tcoef16  Aeig7
     endif
     endif
     if kindex16 == 8
     if jindex16 == 8
     execute return_sval tcoef16  Aeig8
     endif
     endif
     if kindex16 == 9
     if jindex16 == 9
     execute return_sval tcoef16  Aeig9
     endif
     endif
     if kindex16 == 10
     if jindex16 == 10
     execute return_sval tcoef16  Aeig10
     endif
     endif
     if kindex16 == 11
     if jindex16 == 11
     execute return_sval tcoef16  Aeig11
     endif
     endif
     if kindex16 == 12
     if jindex16 == 12
     execute return_sval tcoef16  Aeig12
     endif
     endif
     if kindex16 == 13
     if jindex16 == 13
     execute return_sval tcoef16  Aeig13
     endif
     endif
     if kindex16 == 14
     if jindex16 == 14
     execute return_sval tcoef16  Aeig14
     endif
     endif
     if kindex16 == 15
     if jindex16 == 15
     execute return_sval tcoef16  Aeig15
     endif
     endif
     if kindex16 == 16
     if jindex16 == 16
     execute return_sval tcoef16  Aeig16
     endif
     endif
#
     enddo kindex16
     enddo jindex16
#
     endif
#
#
#    --------------end 16th iteration-----------------
#
#
#    --------------17th iteration-----------------
     if spdim == 17
#
     execute eig_nonsymm Smat17 SVEV17
#
     do jindex17
     do kindex17
#
     tcoef17(kindex17,jindex17)=Smat17(kindex17,jindex17)
#
     if kindex17 == 1
     if jindex17 == 1
     execute return_sval tcoef17  Aeig1
     endif
     endif
     if kindex17 == 2
     if jindex17 == 2
     execute return_sval tcoef17  Aeig2
     endif
     endif
     if kindex17 == 3
     if jindex17 == 3
     execute return_sval tcoef17  Aeig3
     endif
     endif
     if kindex17 == 4
     if jindex17 == 4
     execute return_sval tcoef17  Aeig4
     endif
     endif
     if kindex17 == 5
     if jindex17 == 5
     execute return_sval tcoef17  Aeig5
     endif
     endif
     if kindex17 == 6
     if jindex17 == 6
     execute return_sval tcoef17  Aeig6
     endif
     endif
     if kindex17 == 7
     if jindex17 == 7
     execute return_sval tcoef17  Aeig7
     endif
     endif
     if kindex17 == 8
     if jindex17 == 8
     execute return_sval tcoef17  Aeig8
     endif
     endif
     if kindex17 == 9
     if jindex17 == 9
     execute return_sval tcoef17  Aeig9
     endif
     endif
     if kindex17 == 10
     if jindex17 == 10
     execute return_sval tcoef17  Aeig10
     endif
     endif
     if kindex17 == 11
     if jindex17 == 11
     execute return_sval tcoef17  Aeig11
     endif
     endif
     if kindex17 == 12
     if jindex17 == 12
     execute return_sval tcoef17  Aeig12
     endif
     endif
     if kindex17 == 13
     if jindex17 == 13
     execute return_sval tcoef17  Aeig13
     endif
     endif
     if kindex17 == 14
     if jindex17 == 14
     execute return_sval tcoef17  Aeig14
     endif
     endif
     if kindex17 == 15
     if jindex17 == 15
     execute return_sval tcoef17  Aeig15
     endif
     endif
     if kindex17 == 16
     if jindex17 == 16
     execute return_sval tcoef17  Aeig16
     endif
     endif
     if kindex17 == 17
     if jindex17 == 17
     execute return_sval tcoef17  Aeig17
     endif
     endif
#
     enddo kindex17
     enddo jindex17
#
     endif
#
#
#    --------------end 17th iteration-----------------
#
#
#    --------------18th iteration-----------------
     if spdim == 18
#
     execute eig_nonsymm Smat18 SVEV18
#
     do jindex18
     do kindex18
#
     tcoef18(kindex18,jindex18)=Smat18(kindex18,jindex18)
#
     if kindex18 == 1
     if jindex18 == 1
     execute return_sval tcoef18  Aeig1
     endif
     endif
     if kindex18 == 2
     if jindex18 == 2
     execute return_sval tcoef18  Aeig2
     endif
     endif
     if kindex18 == 3
     if jindex18 == 3
     execute return_sval tcoef18  Aeig3
     endif
     endif
     if kindex18 == 4
     if jindex18 == 4
     execute return_sval tcoef18  Aeig4
     endif
     endif
     if kindex18 == 5
     if jindex18 == 5
     execute return_sval tcoef18  Aeig5
     endif
     endif
     if kindex18 == 6
     if jindex18 == 6
     execute return_sval tcoef18  Aeig6
     endif
     endif
     if kindex18 == 7
     if jindex18 == 7
     execute return_sval tcoef18  Aeig7
     endif
     endif
     if kindex18 == 8
     if jindex18 == 8
     execute return_sval tcoef18  Aeig8
     endif
     endif
     if kindex18 == 9
     if jindex18 == 9
     execute return_sval tcoef18  Aeig9
     endif
     endif
     if kindex18 == 10
     if jindex18 == 10
     execute return_sval tcoef18  Aeig10
     endif
     endif
     if kindex18 == 11
     if jindex18 == 11
     execute return_sval tcoef18  Aeig11
     endif
     endif
     if kindex18 == 12
     if jindex18 == 12
     execute return_sval tcoef18  Aeig12
     endif
     endif
     if kindex18 == 13
     if jindex18 == 13
     execute return_sval tcoef18  Aeig13
     endif
     endif
     if kindex18 == 14
     if jindex18 == 14
     execute return_sval tcoef18  Aeig14
     endif
     endif
     if kindex18 == 15
     if jindex18 == 15
     execute return_sval tcoef18  Aeig15
     endif
     endif
     if kindex18 == 16
     if jindex18 == 16
     execute return_sval tcoef18  Aeig16
     endif
     endif
     if kindex18 == 17
     if jindex18 == 17
     execute return_sval tcoef18  Aeig17
     endif
     endif
     if kindex18 == 18
     if jindex18 == 18
     execute return_sval tcoef18  Aeig18
     endif
     endif
#
     enddo kindex18
     enddo jindex18
#
     endif
#
#
#    --------------end 18th iteration-----------------
#
#
#    --------------19th iteration-----------------
     if spdim == 19
#
     execute eig_nonsymm Smat19 SVEV19
#
     do jindex19
     do kindex19
#
     tcoef19(kindex19,jindex19)=Smat19(kindex19,jindex19)
#
     if kindex19 == 1
     if jindex19 == 1
     execute return_sval tcoef19  Aeig1
     endif
     endif
     if kindex19 == 2
     if jindex19 == 2
     execute return_sval tcoef19  Aeig2
     endif
     endif
     if kindex19 == 3
     if jindex19 == 3
     execute return_sval tcoef19  Aeig3
     endif
     endif
     if kindex19 == 4
     if jindex19 == 4
     execute return_sval tcoef19  Aeig4
     endif
     endif
     if kindex19 == 5
     if jindex19 == 5
     execute return_sval tcoef19  Aeig5
     endif
     endif
     if kindex19 == 6
     if jindex19 == 6
     execute return_sval tcoef19  Aeig6
     endif
     endif
     if kindex19 == 7
     if jindex19 == 7
     execute return_sval tcoef19  Aeig7
     endif
     endif
     if kindex19 == 8
     if jindex19 == 8
     execute return_sval tcoef19  Aeig8
     endif
     endif
     if kindex19 == 9
     if jindex19 == 9
     execute return_sval tcoef19  Aeig9
     endif
     endif
     if kindex19 == 10
     if jindex19 == 10
     execute return_sval tcoef19  Aeig10
     endif
     endif
     if kindex19 == 11
     if jindex19 == 11
     execute return_sval tcoef19  Aeig11
     endif
     endif
     if kindex19 == 12
     if jindex19 == 12
     execute return_sval tcoef19  Aeig12
     endif
     endif
     if kindex19 == 13
     if jindex19 == 13
     execute return_sval tcoef19  Aeig13
     endif
     endif
     if kindex19 == 14
     if jindex19 == 14
     execute return_sval tcoef19  Aeig14
     endif
     endif
     if kindex19 == 15
     if jindex19 == 15
     execute return_sval tcoef19  Aeig15
     endif
     endif
     if kindex19 == 16
     if jindex19 == 16
     execute return_sval tcoef19  Aeig16
     endif
     endif
     if kindex19 == 17
     if jindex19 == 17
     execute return_sval tcoef19  Aeig17
     endif
     endif
     if kindex19 == 18
     if jindex19 == 18
     execute return_sval tcoef19  Aeig18
     endif
     endif
     if kindex19 == 19
     if jindex19 == 19
     execute return_sval tcoef19  Aeig19
     endif
     endif
#
     enddo kindex19
     enddo jindex19
#
     endif
#
#
#    --------------end 19th iteration-----------------
#
#
#    --------------20th iteration-----------------
     if spdim == 20
#
     execute eig_nonsymm Smat20 SVEV20
#
     do jindex20
     do kindex20
#
     tcoef20(kindex20,jindex20)=Smat20(kindex20,jindex20)
#
     if kindex20 == 1
     if jindex20 == 1
     execute return_sval tcoef20  Aeig1
     endif
     endif
     if kindex20 == 2
     if jindex20 == 2
     execute return_sval tcoef20  Aeig2
     endif
     endif
     if kindex20 == 3
     if jindex20 == 3
     execute return_sval tcoef20  Aeig3
     endif
     endif
     if kindex20 == 4
     if jindex20 == 4
     execute return_sval tcoef20  Aeig4
     endif
     endif
     if kindex20 == 5
     if jindex20 == 5
     execute return_sval tcoef20  Aeig5
     endif
     endif
     if kindex20 == 6
     if jindex20 == 6
     execute return_sval tcoef20  Aeig6
     endif
     endif
     if kindex20 == 7
     if jindex20 == 7
     execute return_sval tcoef20  Aeig7
     endif
     endif
     if kindex20 == 8
     if jindex20 == 8
     execute return_sval tcoef20  Aeig8
     endif
     endif
     if kindex20 == 9
     if jindex20 == 9
     execute return_sval tcoef20  Aeig9
     endif
     endif
     if kindex20 == 10
     if jindex20 == 10
     execute return_sval tcoef20  Aeig10
     endif
     endif
     if kindex20 == 11
     if jindex20 == 11
     execute return_sval tcoef20  Aeig11
     endif
     endif
     if kindex20 == 12
     if jindex20 == 12
     execute return_sval tcoef20  Aeig12
     endif
     endif
     if kindex20 == 13
     if jindex20 == 13
     execute return_sval tcoef20  Aeig13
     endif
     endif
     if kindex20 == 14
     if jindex20 == 14
     execute return_sval tcoef20  Aeig14
     endif
     endif
     if kindex20 == 15
     if jindex20 == 15
     execute return_sval tcoef20  Aeig15
     endif
     endif
     if kindex20 == 16
     if jindex20 == 16
     execute return_sval tcoef20  Aeig16
     endif
     endif
     if kindex20 == 17
     if jindex20 == 17
     execute return_sval tcoef20  Aeig17
     endif
     endif
     if kindex20 == 18
     if jindex20 == 18
     execute return_sval tcoef20  Aeig18
     endif
     endif
     if kindex20 == 19
     if jindex20 == 19
     execute return_sval tcoef20  Aeig19
     endif
     endif
     if kindex20 == 20
     if jindex20 == 20
     execute return_sval tcoef20  Aeig20
     endif
     endif
#
     enddo kindex20
     enddo jindex20
#
      server_barrier
#
     endif
#
#    --------------end 20th iteration-----------------
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     ENDPROC Adiag
#    ------------- 
#
     PROC SELVEC
#
     if spdim==1 
#
    #omega=a1_1
#
     do jindex20 
     do kindex20 
         if jindex20 == 1 
         if kindex20 == 1 
            t20(kindex20,jindex20) = sMAT20(kindex20,jindex20) 
            execute return_sval t20  omega  
         endif 
         endif 
     enddo kindex20 
     enddo jindex20 
#
     imax=1.0
#
     endif
#
#    SECOND AND FURTHER ITERATIONS
#
     if spdim >= 2
#
      Aeigvm1=0.0
      Aeigvm2=0.0
      Aeigvm3=0.0
      Aeigvm4=0.0
      Aeigvm5=0.0
      Aeigvm6=0.0
      Aeigvm7=0.0
      Aeigvm8=0.0
      Aeigvm9=0.0
      Aeigvm10=0.0
      Aeigvm11=0.0
      Aeigvm12=0.0
      Aeigvm13=0.0
      Aeigvm14=0.0
      Aeigvm15=0.0
      Aeigvm16=0.0
      Aeigvm17=0.0
      Aeigvm18=0.0
      Aeigvm19=0.0
      Aeigvm20=0.0
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#----------find the lowest eigenvalue not being the previous root------
#
      xmax=1000.0
      ncount=0.0
#
      do spdim20
#
      ncount+=1.0
#
     if ncount > nsp
     exit
     endif
#
     if spdim20 == 1
     aeigtemp=Aeig1
     endif
     if spdim20 == 2
     aeigtemp=Aeig2
     endif
     if spdim20 == 3
     aeigtemp=Aeig3
     endif
     if spdim20 == 4
     aeigtemp=Aeig4
     endif
     if spdim20 == 5
     aeigtemp=Aeig5
     endif
     if spdim20 == 6
     aeigtemp=Aeig6
     endif
     if spdim20 == 7
     aeigtemp=Aeig7
     endif
     if spdim20 == 8
     aeigtemp=Aeig8
     endif
     if spdim20 == 9
     aeigtemp=Aeig9
     endif
     if spdim20 == 10
     aeigtemp=Aeig10
     endif
     if spdim20 == 11
     aeigtemp=Aeig11
     endif
     if spdim20 == 12
     aeigtemp=Aeig12
     endif
     if spdim20 == 13
     aeigtemp=Aeig13
     endif
     if spdim20 == 14
     aeigtemp=Aeig14
     endif
     if spdim20 == 15
     aeigtemp=Aeig15
     endif
     if spdim20 == 16
     aeigtemp=Aeig16
     endif
     if spdim20 == 17
     aeigtemp=Aeig17
     endif
     if spdim20 == 18
     aeigtemp=Aeig18
     endif
     if spdim20 == 19
     aeigtemp=Aeig19
     endif
     if spdim20 == 20
     aeigtemp=Aeig20
     endif
#
      aeigtemp2=aeigtemp
      if aeigtemp2 < 0.0
      aeigtemp2*=-1.0
      endif
      if aeigtemp2 < eomthresh
      aeigtemp=1111.0
      endif
#
      aeigtemp2=aeigtemp
#
      do jindex12
#
     if jindex12 == 1
     xtemp=root1-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 2
     xtemp=root2-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 3
     xtemp=root3-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 4
     xtemp=root4-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 5
     xtemp=root5-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 6
     xtemp=root6-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 7
     xtemp=root7-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 8
     xtemp=root8-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 9
     xtemp=root9-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 10
     xtemp=root10-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 11
     xtemp=root11-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 12
     xtemp=root12-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
#
      enddo jindex12
#
      aeigtemp=aeigtemp2
#
     if aeigtemp < xmax
     xmax=aeigtemp
     imax=ncount
     endif
#
      enddo spdim20
#
#
#----------get the chosen eigenvector------------
      ncount=0.0
#
      do spdim20
#
      ncount+=1.0
#
      if imax == ncount
#
      if spdim20 == 1
      omega=Aeig1
      endif
#
      if spdim20 == 2
      omega=Aeig2
      endif
#
      if spdim20 == 3
      omega=Aeig3
      endif
#
      if spdim20 == 4
      omega=Aeig4
      endif
#
      if spdim20 == 5
      omega=Aeig5
      endif
#
      if spdim20 == 6
      omega=Aeig6
      endif
#
      if spdim20 == 7
      omega=Aeig7
      endif
#
      if spdim20 == 8
      omega=Aeig8
      endif
#
      if spdim20 == 9
      omega=Aeig9
      endif
#
      if spdim20 == 10
      omega=Aeig10
      endif
#
      if spdim20 == 11
      omega=Aeig11
      endif
#
      if spdim20 == 12
      omega=Aeig12
      endif
#
      if spdim20 == 13
      omega=Aeig13
      endif
#
      if spdim20 == 14
      omega=Aeig14
      endif
#
      if spdim20 == 15
      omega=Aeig15
      endif
#
      if spdim20 == 16
      omega=Aeig16
      endif
#
      if spdim20 == 17
      omega=Aeig17
      endif
#
      if spdim20 == 18
      omega=Aeig18
      endif
#
      if spdim20 == 19
      omega=Aeig19
      endif
#
      if spdim20 == 20
      omega=Aeig20
      endif
#
#
#    --------------2th iteration-----------------
     if spdim == 2
#
     do jindex2
     do kindex2
#
     tcoef2(kindex2,jindex2)=Svev2(kindex2,jindex2)
#
     if jindex2 == spdim20
#
     if kindex2 == 1
     execute return_sval tcoef2  Aeigvm1
     endif
     if kindex2 == 2
     execute return_sval tcoef2  Aeigvm2
     endif
#
     endif
#
     enddo kindex2
     enddo jindex2
#
     endif
#
#
#    --------------end 2th iteration-----------------
#
#
#    --------------3th iteration-----------------
     if spdim == 3
#
     do jindex3
     do kindex3
#
     tcoef3(kindex3,jindex3)=Svev3(kindex3,jindex3)
#
     if jindex3 == spdim20
#
     if kindex3 == 1
     execute return_sval tcoef3  Aeigvm1
     endif
     if kindex3 == 2
     execute return_sval tcoef3  Aeigvm2
     endif
     if kindex3 == 3
     execute return_sval tcoef3  Aeigvm3
     endif
#
     endif
#
     enddo kindex3
     enddo jindex3
#
     endif
#
#
#    --------------end 3th iteration-----------------
#
#
#    --------------4th iteration-----------------
     if spdim == 4
#
     do jindex4
     do kindex4
#
     tcoef4(kindex4,jindex4)=Svev4(kindex4,jindex4)
#
     if jindex4 == spdim20
#
     if kindex4 == 1
     execute return_sval tcoef4  Aeigvm1
     endif
     if kindex4 == 2
     execute return_sval tcoef4  Aeigvm2
     endif
     if kindex4 == 3
     execute return_sval tcoef4  Aeigvm3
     endif
     if kindex4 == 4
     execute return_sval tcoef4  Aeigvm4
     endif
#
     endif
#
     enddo kindex4
     enddo jindex4
#
     endif
#
#
#    --------------end 4th iteration-----------------
#
#
#    --------------5th iteration-----------------
     if spdim == 5
#
     do jindex5
     do kindex5
#
     tcoef5(kindex5,jindex5)=Svev5(kindex5,jindex5)
#
     if jindex5 == spdim20
#
     if kindex5 == 1
     execute return_sval tcoef5  Aeigvm1
     endif
     if kindex5 == 2
     execute return_sval tcoef5  Aeigvm2
     endif
     if kindex5 == 3
     execute return_sval tcoef5  Aeigvm3
     endif
     if kindex5 == 4
     execute return_sval tcoef5  Aeigvm4
     endif
     if kindex5 == 5
     execute return_sval tcoef5  Aeigvm5
     endif
#
     endif
#
     enddo kindex5
     enddo jindex5
#
     endif
#
#
#    --------------end 5th iteration-----------------
#
#
#    --------------6th iteration-----------------
     if spdim == 6
#
     do jindex6
     do kindex6
#
     tcoef6(kindex6,jindex6)=Svev6(kindex6,jindex6)
#
     if jindex6 == spdim20
#
     if kindex6 == 1
     execute return_sval tcoef6  Aeigvm1
     endif
     if kindex6 == 2
     execute return_sval tcoef6  Aeigvm2
     endif
     if kindex6 == 3
     execute return_sval tcoef6  Aeigvm3
     endif
     if kindex6 == 4
     execute return_sval tcoef6  Aeigvm4
     endif
     if kindex6 == 5
     execute return_sval tcoef6  Aeigvm5
     endif
     if kindex6 == 6
     execute return_sval tcoef6  Aeigvm6
     endif
#
     endif
#
     enddo kindex6
     enddo jindex6
#
     endif
#
#
#    --------------end 6th iteration-----------------
#
#
#    --------------7th iteration-----------------
     if spdim == 7
#
     do jindex7
     do kindex7
#
     tcoef7(kindex7,jindex7)=Svev7(kindex7,jindex7)
#
     if jindex7 == spdim20
#
     if kindex7 == 1
     execute return_sval tcoef7  Aeigvm1
     endif
     if kindex7 == 2
     execute return_sval tcoef7  Aeigvm2
     endif
     if kindex7 == 3
     execute return_sval tcoef7  Aeigvm3
     endif
     if kindex7 == 4
     execute return_sval tcoef7  Aeigvm4
     endif
     if kindex7 == 5
     execute return_sval tcoef7  Aeigvm5
     endif
     if kindex7 == 6
     execute return_sval tcoef7  Aeigvm6
     endif
     if kindex7 == 7
     execute return_sval tcoef7  Aeigvm7
     endif
#
     endif
#
     enddo kindex7
     enddo jindex7
#
     endif
#
#
#    --------------end 7th iteration-----------------
#
#
#    --------------8th iteration-----------------
     if spdim == 8
#
     do jindex8
     do kindex8
#
     tcoef8(kindex8,jindex8)=Svev8(kindex8,jindex8)
#
     if jindex8 == spdim20
#
     if kindex8 == 1
     execute return_sval tcoef8  Aeigvm1
     endif
     if kindex8 == 2
     execute return_sval tcoef8  Aeigvm2
     endif
     if kindex8 == 3
     execute return_sval tcoef8  Aeigvm3
     endif
     if kindex8 == 4
     execute return_sval tcoef8  Aeigvm4
     endif
     if kindex8 == 5
     execute return_sval tcoef8  Aeigvm5
     endif
     if kindex8 == 6
     execute return_sval tcoef8  Aeigvm6
     endif
     if kindex8 == 7
     execute return_sval tcoef8  Aeigvm7
     endif
     if kindex8 == 8
     execute return_sval tcoef8  Aeigvm8
     endif
#
     endif
#
     enddo kindex8
     enddo jindex8
#
     endif
#
#
#    --------------end 8th iteration-----------------
#
#
#    --------------9th iteration-----------------
     if spdim == 9
#
     do jindex9
     do kindex9
#
     tcoef9(kindex9,jindex9)=Svev9(kindex9,jindex9)
#
     if jindex9 == spdim20
#
     if kindex9 == 1
     execute return_sval tcoef9  Aeigvm1
     endif
     if kindex9 == 2
     execute return_sval tcoef9  Aeigvm2
     endif
     if kindex9 == 3
     execute return_sval tcoef9  Aeigvm3
     endif
     if kindex9 == 4
     execute return_sval tcoef9  Aeigvm4
     endif
     if kindex9 == 5
     execute return_sval tcoef9  Aeigvm5
     endif
     if kindex9 == 6
     execute return_sval tcoef9  Aeigvm6
     endif
     if kindex9 == 7
     execute return_sval tcoef9  Aeigvm7
     endif
     if kindex9 == 8
     execute return_sval tcoef9  Aeigvm8
     endif
     if kindex9 == 9
     execute return_sval tcoef9  Aeigvm9
     endif
#
     endif
#
     enddo kindex9
     enddo jindex9
#
     endif
#
#
#    --------------end 9th iteration-----------------
#
#
#    --------------10th iteration-----------------
     if spdim == 10
#
     do jindex10
     do kindex10
#
     tcoef10(kindex10,jindex10)=Svev10(kindex10,jindex10)
#
     if jindex10 == spdim20
#
     if kindex10 == 1
     execute return_sval tcoef10  Aeigvm1
     endif
     if kindex10 == 2
     execute return_sval tcoef10  Aeigvm2
     endif
     if kindex10 == 3
     execute return_sval tcoef10  Aeigvm3
     endif
     if kindex10 == 4
     execute return_sval tcoef10  Aeigvm4
     endif
     if kindex10 == 5
     execute return_sval tcoef10  Aeigvm5
     endif
     if kindex10 == 6
     execute return_sval tcoef10  Aeigvm6
     endif
     if kindex10 == 7
     execute return_sval tcoef10  Aeigvm7
     endif
     if kindex10 == 8
     execute return_sval tcoef10  Aeigvm8
     endif
     if kindex10 == 9
     execute return_sval tcoef10  Aeigvm9
     endif
     if kindex10 == 10
     execute return_sval tcoef10  Aeigvm10
     endif
#
     endif
#
     enddo kindex10
     enddo jindex10
#
     endif
#
#
#    --------------end 10th iteration-----------------
#
#
#    --------------11th iteration-----------------
     if spdim == 11
#
     do jindex11
     do kindex11
#
     tcoef11(kindex11,jindex11)=Svev11(kindex11,jindex11)
#
     if jindex11 == spdim20
#
     if kindex11 == 1
     execute return_sval tcoef11  Aeigvm1
     endif
     if kindex11 == 2
     execute return_sval tcoef11  Aeigvm2
     endif
     if kindex11 == 3
     execute return_sval tcoef11  Aeigvm3
     endif
     if kindex11 == 4
     execute return_sval tcoef11  Aeigvm4
     endif
     if kindex11 == 5
     execute return_sval tcoef11  Aeigvm5
     endif
     if kindex11 == 6
     execute return_sval tcoef11  Aeigvm6
     endif
     if kindex11 == 7
     execute return_sval tcoef11  Aeigvm7
     endif
     if kindex11 == 8
     execute return_sval tcoef11  Aeigvm8
     endif
     if kindex11 == 9
     execute return_sval tcoef11  Aeigvm9
     endif
     if kindex11 == 10
     execute return_sval tcoef11  Aeigvm10
     endif
     if kindex11 == 11
     execute return_sval tcoef11  Aeigvm11
     endif
#
     endif
#
     enddo kindex11
     enddo jindex11
#
     endif
#
#
#    --------------end 11th iteration-----------------
#
#
#    --------------12th iteration-----------------
     if spdim == 12
#
     do jindex12
     do kindex12
#
     tcoef12(kindex12,jindex12)=Svev12(kindex12,jindex12)
#
     if jindex12 == spdim20
#
     if kindex12 == 1
     execute return_sval tcoef12  Aeigvm1
     endif
     if kindex12 == 2
     execute return_sval tcoef12  Aeigvm2
     endif
     if kindex12 == 3
     execute return_sval tcoef12  Aeigvm3
     endif
     if kindex12 == 4
     execute return_sval tcoef12  Aeigvm4
     endif
     if kindex12 == 5
     execute return_sval tcoef12  Aeigvm5
     endif
     if kindex12 == 6
     execute return_sval tcoef12  Aeigvm6
     endif
     if kindex12 == 7
     execute return_sval tcoef12  Aeigvm7
     endif
     if kindex12 == 8
     execute return_sval tcoef12  Aeigvm8
     endif
     if kindex12 == 9
     execute return_sval tcoef12  Aeigvm9
     endif
     if kindex12 == 10
     execute return_sval tcoef12  Aeigvm10
     endif
     if kindex12 == 11
     execute return_sval tcoef12  Aeigvm11
     endif
     if kindex12 == 12
     execute return_sval tcoef12  Aeigvm12
     endif
#
     endif
#
     enddo kindex12
     enddo jindex12
#
     endif
#
#
#    --------------end 12th iteration-----------------
#
#
#    --------------13th iteration-----------------
     if spdim == 13
#
     do jindex13
     do kindex13
#
     tcoef13(kindex13,jindex13)=Svev13(kindex13,jindex13)
#
     if jindex13 == spdim20
#
     if kindex13 == 1
     execute return_sval tcoef13  Aeigvm1
     endif
     if kindex13 == 2
     execute return_sval tcoef13  Aeigvm2
     endif
     if kindex13 == 3
     execute return_sval tcoef13  Aeigvm3
     endif
     if kindex13 == 4
     execute return_sval tcoef13  Aeigvm4
     endif
     if kindex13 == 5
     execute return_sval tcoef13  Aeigvm5
     endif
     if kindex13 == 6
     execute return_sval tcoef13  Aeigvm6
     endif
     if kindex13 == 7
     execute return_sval tcoef13  Aeigvm7
     endif
     if kindex13 == 8
     execute return_sval tcoef13  Aeigvm8
     endif
     if kindex13 == 9
     execute return_sval tcoef13  Aeigvm9
     endif
     if kindex13 == 10
     execute return_sval tcoef13  Aeigvm10
     endif
     if kindex13 == 11
     execute return_sval tcoef13  Aeigvm11
     endif
     if kindex13 == 12
     execute return_sval tcoef13  Aeigvm12
     endif
     if kindex13 == 13
     execute return_sval tcoef13  Aeigvm13
     endif
#
     endif
#
     enddo kindex13
     enddo jindex13
#
     endif
#
#
#    --------------end 13th iteration-----------------
#
#
#    --------------14th iteration-----------------
     if spdim == 14
#
     do jindex14
     do kindex14
#
     tcoef14(kindex14,jindex14)=Svev14(kindex14,jindex14)
#
     if jindex14 == spdim20
#
     if kindex14 == 1
     execute return_sval tcoef14  Aeigvm1
     endif
     if kindex14 == 2
     execute return_sval tcoef14  Aeigvm2
     endif
     if kindex14 == 3
     execute return_sval tcoef14  Aeigvm3
     endif
     if kindex14 == 4
     execute return_sval tcoef14  Aeigvm4
     endif
     if kindex14 == 5
     execute return_sval tcoef14  Aeigvm5
     endif
     if kindex14 == 6
     execute return_sval tcoef14  Aeigvm6
     endif
     if kindex14 == 7
     execute return_sval tcoef14  Aeigvm7
     endif
     if kindex14 == 8
     execute return_sval tcoef14  Aeigvm8
     endif
     if kindex14 == 9
     execute return_sval tcoef14  Aeigvm9
     endif
     if kindex14 == 10
     execute return_sval tcoef14  Aeigvm10
     endif
     if kindex14 == 11
     execute return_sval tcoef14  Aeigvm11
     endif
     if kindex14 == 12
     execute return_sval tcoef14  Aeigvm12
     endif
     if kindex14 == 13
     execute return_sval tcoef14  Aeigvm13
     endif
     if kindex14 == 14
     execute return_sval tcoef14  Aeigvm14
     endif
#
     endif
#
     enddo kindex14
     enddo jindex14
#
     endif
#
#
#    --------------end 14th iteration-----------------
#
#
#    --------------15th iteration-----------------
     if spdim == 15
#
     do jindex15
     do kindex15
#
     tcoef15(kindex15,jindex15)=Svev15(kindex15,jindex15)
#
     if jindex15 == spdim20
#
     if kindex15 == 1
     execute return_sval tcoef15  Aeigvm1
     endif
     if kindex15 == 2
     execute return_sval tcoef15  Aeigvm2
     endif
     if kindex15 == 3
     execute return_sval tcoef15  Aeigvm3
     endif
     if kindex15 == 4
     execute return_sval tcoef15  Aeigvm4
     endif
     if kindex15 == 5
     execute return_sval tcoef15  Aeigvm5
     endif
     if kindex15 == 6
     execute return_sval tcoef15  Aeigvm6
     endif
     if kindex15 == 7
     execute return_sval tcoef15  Aeigvm7
     endif
     if kindex15 == 8
     execute return_sval tcoef15  Aeigvm8
     endif
     if kindex15 == 9
     execute return_sval tcoef15  Aeigvm9
     endif
     if kindex15 == 10
     execute return_sval tcoef15  Aeigvm10
     endif
     if kindex15 == 11
     execute return_sval tcoef15  Aeigvm11
     endif
     if kindex15 == 12
     execute return_sval tcoef15  Aeigvm12
     endif
     if kindex15 == 13
     execute return_sval tcoef15  Aeigvm13
     endif
     if kindex15 == 14
     execute return_sval tcoef15  Aeigvm14
     endif
     if kindex15 == 15
     execute return_sval tcoef15  Aeigvm15
     endif
#
     endif
#
     enddo kindex15
     enddo jindex15
#
     endif
#
#
#    --------------end 15th iteration-----------------
#
#
#    --------------16th iteration-----------------
     if spdim == 16
#
     do jindex16
     do kindex16
#
     tcoef16(kindex16,jindex16)=Svev16(kindex16,jindex16)
#
     if jindex16 == spdim20
#
     if kindex16 == 1
     execute return_sval tcoef16  Aeigvm1
     endif
     if kindex16 == 2
     execute return_sval tcoef16  Aeigvm2
     endif
     if kindex16 == 3
     execute return_sval tcoef16  Aeigvm3
     endif
     if kindex16 == 4
     execute return_sval tcoef16  Aeigvm4
     endif
     if kindex16 == 5
     execute return_sval tcoef16  Aeigvm5
     endif
     if kindex16 == 6
     execute return_sval tcoef16  Aeigvm6
     endif
     if kindex16 == 7
     execute return_sval tcoef16  Aeigvm7
     endif
     if kindex16 == 8
     execute return_sval tcoef16  Aeigvm8
     endif
     if kindex16 == 9
     execute return_sval tcoef16  Aeigvm9
     endif
     if kindex16 == 10
     execute return_sval tcoef16  Aeigvm10
     endif
     if kindex16 == 11
     execute return_sval tcoef16  Aeigvm11
     endif
     if kindex16 == 12
     execute return_sval tcoef16  Aeigvm12
     endif
     if kindex16 == 13
     execute return_sval tcoef16  Aeigvm13
     endif
     if kindex16 == 14
     execute return_sval tcoef16  Aeigvm14
     endif
     if kindex16 == 15
     execute return_sval tcoef16  Aeigvm15
     endif
     if kindex16 == 16
     execute return_sval tcoef16  Aeigvm16
     endif
#
     endif
#
     enddo kindex16
     enddo jindex16
#
     endif
#
#
#    --------------end 16th iteration-----------------
#
#
#    --------------17th iteration-----------------
     if spdim == 17
#
     do jindex17
     do kindex17
#
     tcoef17(kindex17,jindex17)=Svev17(kindex17,jindex17)
#
     if jindex17 == spdim20
#
     if kindex17 == 1
     execute return_sval tcoef17  Aeigvm1
     endif
     if kindex17 == 2
     execute return_sval tcoef17  Aeigvm2
     endif
     if kindex17 == 3
     execute return_sval tcoef17  Aeigvm3
     endif
     if kindex17 == 4
     execute return_sval tcoef17  Aeigvm4
     endif
     if kindex17 == 5
     execute return_sval tcoef17  Aeigvm5
     endif
     if kindex17 == 6
     execute return_sval tcoef17  Aeigvm6
     endif
     if kindex17 == 7
     execute return_sval tcoef17  Aeigvm7
     endif
     if kindex17 == 8
     execute return_sval tcoef17  Aeigvm8
     endif
     if kindex17 == 9
     execute return_sval tcoef17  Aeigvm9
     endif
     if kindex17 == 10
     execute return_sval tcoef17  Aeigvm10
     endif
     if kindex17 == 11
     execute return_sval tcoef17  Aeigvm11
     endif
     if kindex17 == 12
     execute return_sval tcoef17  Aeigvm12
     endif
     if kindex17 == 13
     execute return_sval tcoef17  Aeigvm13
     endif
     if kindex17 == 14
     execute return_sval tcoef17  Aeigvm14
     endif
     if kindex17 == 15
     execute return_sval tcoef17  Aeigvm15
     endif
     if kindex17 == 16
     execute return_sval tcoef17  Aeigvm16
     endif
     if kindex17 == 17
     execute return_sval tcoef17  Aeigvm17
     endif
#
     endif
#
     enddo kindex17
     enddo jindex17
#
     endif
#
#
#    --------------end 17th iteration-----------------
#
#
#    --------------18th iteration-----------------
     if spdim == 18
#
     do jindex18
     do kindex18
#
     tcoef18(kindex18,jindex18)=Svev18(kindex18,jindex18)
#
     if jindex18 == spdim20
#
     if kindex18 == 1
     execute return_sval tcoef18  Aeigvm1
     endif
     if kindex18 == 2
     execute return_sval tcoef18  Aeigvm2
     endif
     if kindex18 == 3
     execute return_sval tcoef18  Aeigvm3
     endif
     if kindex18 == 4
     execute return_sval tcoef18  Aeigvm4
     endif
     if kindex18 == 5
     execute return_sval tcoef18  Aeigvm5
     endif
     if kindex18 == 6
     execute return_sval tcoef18  Aeigvm6
     endif
     if kindex18 == 7
     execute return_sval tcoef18  Aeigvm7
     endif
     if kindex18 == 8
     execute return_sval tcoef18  Aeigvm8
     endif
     if kindex18 == 9
     execute return_sval tcoef18  Aeigvm9
     endif
     if kindex18 == 10
     execute return_sval tcoef18  Aeigvm10
     endif
     if kindex18 == 11
     execute return_sval tcoef18  Aeigvm11
     endif
     if kindex18 == 12
     execute return_sval tcoef18  Aeigvm12
     endif
     if kindex18 == 13
     execute return_sval tcoef18  Aeigvm13
     endif
     if kindex18 == 14
     execute return_sval tcoef18  Aeigvm14
     endif
     if kindex18 == 15
     execute return_sval tcoef18  Aeigvm15
     endif
     if kindex18 == 16
     execute return_sval tcoef18  Aeigvm16
     endif
     if kindex18 == 17
     execute return_sval tcoef18  Aeigvm17
     endif
     if kindex18 == 18
     execute return_sval tcoef18  Aeigvm18
     endif
#
     endif
#
     enddo kindex18
     enddo jindex18
#
     endif
#
#
#    --------------end 18th iteration-----------------
#
#
#    --------------19th iteration-----------------
     if spdim == 19
#
     do jindex19
     do kindex19
#
     tcoef19(kindex19,jindex19)=Svev19(kindex19,jindex19)
#
     if jindex19 == spdim20
#
     if kindex19 == 1
     execute return_sval tcoef19  Aeigvm1
     endif
     if kindex19 == 2
     execute return_sval tcoef19  Aeigvm2
     endif
     if kindex19 == 3
     execute return_sval tcoef19  Aeigvm3
     endif
     if kindex19 == 4
     execute return_sval tcoef19  Aeigvm4
     endif
     if kindex19 == 5
     execute return_sval tcoef19  Aeigvm5
     endif
     if kindex19 == 6
     execute return_sval tcoef19  Aeigvm6
     endif
     if kindex19 == 7
     execute return_sval tcoef19  Aeigvm7
     endif
     if kindex19 == 8
     execute return_sval tcoef19  Aeigvm8
     endif
     if kindex19 == 9
     execute return_sval tcoef19  Aeigvm9
     endif
     if kindex19 == 10
     execute return_sval tcoef19  Aeigvm10
     endif
     if kindex19 == 11
     execute return_sval tcoef19  Aeigvm11
     endif
     if kindex19 == 12
     execute return_sval tcoef19  Aeigvm12
     endif
     if kindex19 == 13
     execute return_sval tcoef19  Aeigvm13
     endif
     if kindex19 == 14
     execute return_sval tcoef19  Aeigvm14
     endif
     if kindex19 == 15
     execute return_sval tcoef19  Aeigvm15
     endif
     if kindex19 == 16
     execute return_sval tcoef19  Aeigvm16
     endif
     if kindex19 == 17
     execute return_sval tcoef19  Aeigvm17
     endif
     if kindex19 == 18
     execute return_sval tcoef19  Aeigvm18
     endif
     if kindex19 == 19
     execute return_sval tcoef19  Aeigvm19
     endif
#
     endif
#
     enddo kindex19
     enddo jindex19
#
     endif
#
#
#    --------------end 19th iteration-----------------
#
#
#    --------------20th iteration-----------------
     if spdim == 20
#
     do jindex20
     do kindex20
#
     tcoef20(kindex20,jindex20)=Svev20(kindex20,jindex20)
#
     if jindex20 == spdim20
#
     if kindex20 == 1
     execute return_sval tcoef20  Aeigvm1
     endif
     if kindex20 == 2
     execute return_sval tcoef20  Aeigvm2
     endif
     if kindex20 == 3
     execute return_sval tcoef20  Aeigvm3
     endif
     if kindex20 == 4
     execute return_sval tcoef20  Aeigvm4
     endif
     if kindex20 == 5
     execute return_sval tcoef20  Aeigvm5
     endif
     if kindex20 == 6
     execute return_sval tcoef20  Aeigvm6
     endif
     if kindex20 == 7
     execute return_sval tcoef20  Aeigvm7
     endif
     if kindex20 == 8
     execute return_sval tcoef20  Aeigvm8
     endif
     if kindex20 == 9
     execute return_sval tcoef20  Aeigvm9
     endif
     if kindex20 == 10
     execute return_sval tcoef20  Aeigvm10
     endif
     if kindex20 == 11
     execute return_sval tcoef20  Aeigvm11
     endif
     if kindex20 == 12
     execute return_sval tcoef20  Aeigvm12
     endif
     if kindex20 == 13
     execute return_sval tcoef20  Aeigvm13
     endif
     if kindex20 == 14
     execute return_sval tcoef20  Aeigvm14
     endif
     if kindex20 == 15
     execute return_sval tcoef20  Aeigvm15
     endif
     if kindex20 == 16
     execute return_sval tcoef20  Aeigvm16
     endif
     if kindex20 == 17
     execute return_sval tcoef20  Aeigvm17
     endif
     if kindex20 == 18
     execute return_sval tcoef20  Aeigvm18
     endif
     if kindex20 == 19
     execute return_sval tcoef20  Aeigvm19
     endif
     if kindex20 == 20
     execute return_sval tcoef20  Aeigvm20
     endif
#
     endif
#
     enddo kindex20
     enddo jindex20
#
     endif
#
#
#    --------------end 20th iteration-----------------
#
#
#
      endif
#
      enddo spdim20
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     endif
#
     ENDPROC SELVEC
#
# -----------------------------------------------------------------------------
#
     PROC RESID_ALL
#    -------------- 
#
     omegam=omega
     omegam*=-1.0
#
# ----------------------------------------------------------------- 
      DO k20  
         if k20 == 1 
            Aeig(k20,k20) = Aeigvm1 
         endif 
         if k20 == 2 
            Aeig(k20,k20) = Aeigvm2 
         endif 
         if k20 == 3 
            Aeig(k20,k20) = Aeigvm3 
         endif 
         if k20 == 4 
            Aeig(k20,k20) = Aeigvm4 
         endif 
         if k20 == 5 
            Aeig(k20,k20) = Aeigvm5 
         endif 
         if k20 == 6 
            Aeig(k20,k20) = Aeigvm6 
         endif 
         if k20 == 7 
            Aeig(k20,k20) = Aeigvm7 
         endif 
         if k20 == 8 
            Aeig(k20,k20) = Aeigvm8 
         endif 
         if k20 == 9 
            Aeig(k20,k20) = Aeigvm9 
         endif 
         if k20 == 10
            Aeig(k20,k20) = Aeigvm10
         endif 
         if k20 == 11
            Aeig(k20,k20) = Aeigvm11
         endif 
         if k20 == 12
            Aeig(k20,k20) = Aeigvm12
         endif 
         if k20 == 13
            Aeig(k20,k20) = Aeigvm13
         endif 
         if k20 == 14
            Aeig(k20,k20) = Aeigvm14
         endif 
         if k20 == 15
            Aeig(k20,k20) = Aeigvm15
         endif 
         if k20 == 16
            Aeig(k20,k20) = Aeigvm16
         endif 
         if k20 == 17
            Aeig(k20,k20) = Aeigvm17
         endif 
         if k20 == 18
            Aeig(k20,k20) = Aeigvm18
         endif 
         if k20 == 19
            Aeig(k20,k20) = Aeigvm19
         endif 
         if k20 == 20
            Aeig(k20,k20) = Aeigvm20
         endif 
      ENDDO k20  
#
# VFL -> Needs to be updated 
#
       sip_barrier 
# ----------------------------------------------------------------- 
#
      PARDO a 
         DO kk1 
            GET Ra(a,kk1)
            t1ax(a,kk1) = 0.0
            t2ax(a,kk1) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     GET S1a_h(a,kk1,k21)
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3ax(a,kk1) = S1a_h(a,kk1,k21)
                          t3ax(a,kk1) *= xtemp
                          t1ax(a,kk1) += t3ax(a,kk1)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     GET             HS1a_h(a,kk1,k20)
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3ax(a,kk1) = HS1a_h(a,kk1,k20)
                     t3ax(a,kk1) *= xtemp
                     t2ax(a,kk1) += t3ax(a,kk1)
                  endif
               ENDDO k20
            endif
#
            if spdim == 1
               get S1a(a,kk1)
               get HS1a(a,kk1)
               t1ax(a,kk1) = S1a(a,kk1)
               t2ax(a,kk1) = HS1a(a,kk1)
            endif
#
            PUT SE1A(a,kk1) = t1ax(a,kk1)
#
            t1ax(a,kk1)      *= omegam
            t1ax(a,kk1)      += t2ax(a,kk1)
#
            t3ax(a,kk1)       = Ra(a,kk1) # 0.0 # VCONV1A(a,i)
            t3ax(a,kk1)      *= -1.0
            t2ax(a,kk1)       = omega
            t3ax(a,kk1)      += t2ax(a,kk1)
            execute apply_den2 t1ax t3ax
#
            DO j21
               if j21 > spdim
                  taxS(a,kk1,j21)      = t1ax(a,kk1)
                  PUT S1a_h(a,kk1,j21) = taxS(a,kk1,j21)
                  exit
               ENDIF
            ENDDO j21
#
         ENDDO kk1 
      ENDPARDO a 
#
# ----------------------------------------------------------------- 
#
      PARDO b 
         DO kk1 
            GET Rb(b,kk1)
            t1bx(b,kk1) = 0.0
            t2bx(b,kk1) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     GET S1b_h(b,kk1,k21)
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3bx(b,kk1) = S1b_h(b,kk1,k21)
                          t3bx(b,kk1) *= xtemp
                          t1bx(b,kk1) += t3bx(b,kk1)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     GET             HS1b_h(b,kk1,k20)
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3bx(b,kk1) = HS1b_h(b,kk1,k20)
                     t3bx(b,kk1) *= xtemp
                     t2bx(b,kk1) += t3bx(b,kk1)
                  endif
               ENDDO k20
            endif
#
            if spdim == 1
               get S1b(b,kk1)
               get HS1b(b,kk1)
               t1bx(b,kk1) = S1b(b,kk1)
               t2bx(b,kk1) = HS1b(b,kk1)
            endif
#
            PUT SE1B(b,kk1) = t1bx(b,kk1)
#
            t1bx(b,kk1)      *= omegam
            t1bx(b,kk1)      += t2bx(b,kk1)
#
            t3bx(b,kk1)       = Rb(b,kk1) # 0.0 # VCONV1A(b,i)
            t3bx(b,kk1)      *= -1.0
            t2bx(b,kk1)       = omega
            t3bx(b,kk1)      += t2bx(b,kk1)
            execute apply_den2 t1bx t3bx
#
            DO j21
               if j21 > spdim
                  tbxS(b,kk1,j21)      = t1bx(b,kk1)
                  PUT S1b_h(b,kk1,j21) = tbxS(b,kk1,j21)
                  exit
               ENDIF
            ENDDO j21
#
         ENDDO kk1 
      ENDPARDO b 
#
# ----------------------------------------------------------------- 
#
      PARDO a, a1, i1
         DO kk1 
            GET                   Ra_aa(a,kk1,a1,i1) 
            t1axai(a,kk1,a1,i1) = 0.0
            t2axai(a,kk1,a1,i1) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     REQUEST S2a_aah(a,kk1,a1,i1,k21) a
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3axai(a,kk1,a1,i1) = S2a_aah(a,kk1,a1,i1,k21)
                          t3axai(a,kk1,a1,i1) *= xtemp
                          t1axai(a,kk1,a1,i1) += t3axai(a,kk1,a1,i1)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     REQUEST             HS2a_aah(a,kk1,a1,i1,k20) a
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3axai(a,kk1,a1,i1) = HS2a_aah(a,kk1,a1,i1,k20)
                     t3axai(a,kk1,a1,i1) *= xtemp
                     t2axai(a,kk1,a1,i1) += t3axai(a,kk1,a1,i1)
                  endif
               ENDDO k20
            endif
            if spdim == 1
               GET                 S2a_aa(a,kk1,a1,i1) 
               GET                 HS2a_aa(a,kk1,a1,i1) 
               t1axai(a,kk1,a1,i1) = S2a_aa(a,kk1,a1,i1)
               t2axai(a,kk1,a1,i1) = HS2a_aa(a,kk1,a1,i1)
            endif
#
            PUT SE2a_aa(a,kk1,a1,i1) = t1axai(a,kk1,a1,i1)
#
            t1axai(a,kk1,a1,i1)      *= omegam
            t1axai(a,kk1,a1,i1)      += t2axai(a,kk1,a1,i1)
#
            t3axai(a,kk1,a1,i1)       = Ra_aa(a,kk1,a1,i1) # VCONV2AA(a,i,a1,i1)
        ### t3axai(a,kk1,a1,i1)      *= -1.0
            t2axai(a,kk1,a1,i1)       = omega
            t3axai(a,kk1,a1,i1)      += t2axai(a,kk1,a1,i1)
            execute apply_den4 t1axai t3axai
#
            PREPARE VTEMP2AA1(a,kk1,a1,i1) = t1axai(a,kk1,a1,i1)
#
         ENDDO kk1 
      ENDPARDO a, a1, i1
#
# -----------------------------------------------------------------
#
      PARDO b, b1, j1
         DO kk1 
            GET                   Rb_bb(b,kk1,b1,j1) 
            t1bxbj(b,kk1,b1,j1) = 0.0
            t2bxbj(b,kk1,b1,j1) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     REQUEST S2b_bbh(b,kk1,b1,j1,k21) b
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3bxbj(b,kk1,b1,j1) = S2b_bbh(b,kk1,b1,j1,k21)
                          t3bxbj(b,kk1,b1,j1) *= xtemp
                          t1bxbj(b,kk1,b1,j1) += t3bxbj(b,kk1,b1,j1)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     REQUEST             HS2b_bbh(b,kk1,b1,j1,k20) b
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3bxbj(b,kk1,b1,j1) = HS2b_bbh(b,kk1,b1,j1,k20)
                     t3bxbj(b,kk1,b1,j1) *= xtemp
                     t2bxbj(b,kk1,b1,j1) += t3bxbj(b,kk1,b1,j1)
                  endif
               ENDDO k20
            endif
            if spdim == 1
               GET                 S2b_bb(b,kk1,b1,j1) 
               GET                 HS2b_bb(b,kk1,b1,j1) 
               t1bxbj(b,kk1,b1,j1) = S2b_bb(b,kk1,b1,j1)
               t2bxbj(b,kk1,b1,j1) = HS2b_bb(b,kk1,b1,j1)
            endif
#
            PUT SE2b_bb(b,kk1,b1,j1) = t1bxbj(b,kk1,b1,j1)
#
            t1bxbj(b,kk1,b1,j1)      *= omegam
            t1bxbj(b,kk1,b1,j1)      += t2bxbj(b,kk1,b1,j1)
#
            t3bxbj(b,kk1,b1,j1)       = Rb_bb(b,kk1,b1,j1) # VCONV2AA(a,j,a1,j1)
        ### t3bxbj(b,kk1,b1,j1)      *= -1.0
            t2bxbj(b,kk1,b1,j1)       = omega
            t3bxbj(b,kk1,b1,j1)      += t2bxbj(b,kk1,b1,j1)
            execute apply_den4 t1bxbj t3bxbj
#
            PREPARE VTEMP2BB1(b,kk1,b1,j1) = t1bxbj(b,kk1,b1,j1)
#
         ENDDO kk1 
      ENDPARDO b, b1, j1
#
# -----------------------------------------------------------------
#
      PARDO b, a1, i1
         DO kk1 
            GET                   Rb_aa(b,kk1,a1,i1) 
            t1bxai(b,kk1,a1,i1) = 0.0
            t2bxai(b,kk1,a1,i1) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     REQUEST S2b_aah(b,kk1,a1,i1,k21) b
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3bxai(b,kk1,a1,i1) = S2b_aah(b,kk1,a1,i1,k21)
                          t3bxai(b,kk1,a1,i1) *= xtemp
                          t1bxai(b,kk1,a1,i1) += t3bxai(b,kk1,a1,i1)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     REQUEST             HS2b_aah(b,kk1,a1,i1,k20) b
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3bxai(b,kk1,a1,i1) = HS2b_aah(b,kk1,a1,i1,k20)
                     t3bxai(b,kk1,a1,i1) *= xtemp
                     t2bxai(b,kk1,a1,i1) += t3bxai(b,kk1,a1,i1)
                  endif
               ENDDO k20
            endif
            if spdim == 1
               GET                 S2b_aa(b,kk1,a1,i1) 
               GET                 HS2b_aa(b,kk1,a1,i1) 
               t1bxai(b,kk1,a1,i1) = S2b_aa(b,kk1,a1,i1)
               t2bxai(b,kk1,a1,i1) = HS2b_aa(b,kk1,a1,i1)
            endif
#
            PUT SE2b_aa(b,kk1,a1,i1) = t1bxai(b,kk1,a1,i1)
#
            t1bxai(b,kk1,a1,i1)      *= omegam
            t1bxai(b,kk1,a1,i1)      += t2bxai(b,kk1,a1,i1)
#
            t3bxai(b,kk1,a1,i1)       = Rb_aa(b,kk1,a1,i1) # VCONV2AA(a,i,a1,i1)
           #t3bxai(b,kk1,a1,i1)      *= -1.0
            t2bxai(b,kk1,a1,i1)       = omega
            t3bxai(b,kk1,a1,i1)      += t2bxai(b,kk1,a1,i1)
            execute apply_den4 t1bxai t3bxai
#
            PREPARE VTEMP2BA1(b,kk1,a1,i1) = t1bxai(b,kk1,a1,i1)
#
         ENDDO kk1 
      ENDPARDO b, a1, i1
#
# -----------------------------------------------------------------
#
      PARDO a, b1, j1
         DO kk1 
            GET                   Ra_bb(a,kk1,b1,j1) 
            t1axbj(a,kk1,b1,j1) = 0.0
            t2axbj(a,kk1,b1,j1) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     REQUEST S2a_bbh(a,kk1,b1,j1,k21) a
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3axbj(a,kk1,b1,j1) = S2a_bbh(a,kk1,b1,j1,k21)
                          t3axbj(a,kk1,b1,j1) *= xtemp
                          t1axbj(a,kk1,b1,j1) += t3axbj(a,kk1,b1,j1)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     REQUEST             HS2a_bbh(a,kk1,b1,j1,k20) a
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3axbj(a,kk1,b1,j1) = HS2a_bbh(a,kk1,b1,j1,k20)
                     t3axbj(a,kk1,b1,j1) *= xtemp
                     t2axbj(a,kk1,b1,j1) += t3axbj(a,kk1,b1,j1)
                  endif
               ENDDO k20
            endif
            if spdim == 1
               GET                 S2a_bb(a,kk1,b1,j1) 
               GET                 HS2a_bb(a,kk1,b1,j1) 
               t1axbj(a,kk1,b1,j1) = S2a_bb(a,kk1,b1,j1)
               t2axbj(a,kk1,b1,j1) = HS2a_bb(a,kk1,b1,j1)
            endif
#
            PUT SE2a_bb(a,kk1,b1,j1) = t1axbj(a,kk1,b1,j1)
#
            t1axbj(a,kk1,b1,j1)      *= omegam
            t1axbj(a,kk1,b1,j1)      += t2axbj(a,kk1,b1,j1)
#
            t3axbj(a,kk1,b1,j1)       = Ra_bb(a,kk1,b1,j1) # VCONV2AA(a,j,a1,j1)
           #t3axbj(a,kk1,b1,j1)      *= -1.0
            t2axbj(a,kk1,b1,j1)       = omega
            t3axbj(a,kk1,b1,j1)      += t2axbj(a,kk1,b1,j1)
            execute apply_den4 t1axbj t3axbj
#
            PREPARE VTEMP2AB1(a,kk1,b1,j1) = t1axbj(a,kk1,b1,j1)
#
         ENDDO kk1 
      ENDPARDO a, b1, j1
#
# -----------------------------------------------------------------
#
       sip_barrier
       server_barrier
#
      PARDO a, a1, i1
            DO kk1 
#
            DO k20
               if k20 == spdim
                  DO j21
                     if j21 > k20
                        REQUEST         VTEMP2AA1(a,kk1,a1,i1) a  
                        t1axai(a,kk1,a1,i1) = VTEMP2AA1(a,kk1,a1,i1)
                        taxaiS(a,kk1,a1,i1,j21)        = t1axai(a,kk1,a1,i1)
                        PREPARE S2a_aah(a,kk1,a1,i1,j21) = taxaiS(a,kk1,a1,i1,j21)
                        exit
                     ENDIF
                  ENDDO j21
               ENDIF 
            ENDDO k20            
#              
            ENDDO kk1 
      ENDPARDO a, a1, i1
#
      PARDO b, b1, j1
            DO kk1 
#
            DO k20
               if k20 == spdim
                  DO j21
                     if j21 > k20
                        REQUEST         VTEMP2BB1(b,kk1,b1,j1) b  
                        t1bxbj(b,kk1,b1,j1) = VTEMP2BB1(b,kk1,b1,j1)
                        tbxbjS(b,kk1,b1,j1,j21)        = t1bxbj(b,kk1,b1,j1)
                        PREPARE S2b_bbh(b,kk1,b1,j1,j21) = tbxbjS(b,kk1,b1,j1,j21)
                        exit
                     ENDIF
                  ENDDO j21
               ENDIF 
            ENDDO k20            
#              
            ENDDO kk1 
      ENDPARDO b, b1, j1
#
      PARDO b, a1, i1
            DO kk1 
#
            DO k20
               if k20 == spdim
                  DO j21
                     if j21 > k20
                        REQUEST         VTEMP2BA1(b,kk1,a1,i1) b  
                        t1bxai(b,kk1,a1,i1) = VTEMP2BA1(b,kk1,a1,i1)
                        tbxaiS(b,kk1,a1,i1,j21)        = t1bxai(b,kk1,a1,i1)
                        PREPARE S2b_aah(b,kk1,a1,i1,j21) = tbxaiS(b,kk1,a1,i1,j21)
                        exit
                     ENDIF
                  ENDDO j21
               ENDIF 
            ENDDO k20            
#              
            ENDDO kk1 
      ENDPARDO b, a1, i1
#
      PARDO a, b1, j1
            DO kk1 
#
            DO k20
               if k20 == spdim
                  DO j21
                     if j21 > k20
                        REQUEST         VTEMP2AB1(a,kk1,b1,j1) a  
                        t1axbj(a,kk1,b1,j1) = VTEMP2AB1(a,kk1,b1,j1)
                        taxbjS(a,kk1,b1,j1,j21)        = t1axbj(a,kk1,b1,j1)
                        PREPARE S2a_bbh(a,kk1,b1,j1,j21) = taxbjS(a,kk1,b1,j1,j21)
                        exit
                     ENDIF
                  ENDDO j21
               ENDIF 
            ENDDO k20            
#              
            ENDDO kk1 
      ENDPARDO a, b1, j1
       server_barrier 
#
     ENDPROC RESID_ALL
#    ----------------- 
#
# ----------------------------------------------------------------------
#
     PROC SQUAREVCACT_NEW
#    -------------------- 
#
     etemp1=0.0
     etemp2=0.0
     etemp3=0.0
     etemp4=0.0
     etemp5=0.0
     sum1 = 0.0 
     sum2 = 0.0 
     sum3 = 0.0 
     sum4 = 0.0
     sum5 = 0.0
     square=0.0
      sip_barrier 
#
     PARDO a, b, j
           DO kk1
           DO k21
              if k21 > spdim
                 REQUEST             S2a_bbh(a,kk1,b,j,k21) b
                 taxbj(a,kk1,b,j)  = S2a_bbh(a,kk1,b,j,k21)
                 t1axbj(a,kk1,b,j) = taxbj(a,kk1,b,j)
                 etemp             = taxbj(a,kk1,b,j)*t1axbj(a,kk1,b,j)
                 sum5             += etemp
                 exit
              endif
           ENDDO k21
           ENDDO kk1
     ENDPARDO a, b, j
#
     PARDO b, a1, i1
           DO kk1 
           DO k21 
              if k21 > spdim  
                 REQUEST               S2b_aah(b,kk1,a1,i1,k21) b 
                 tbxai(b,kk1,a1,i1)  = S2b_aah(b,kk1,a1,i1,k21) 
                 t1bxai(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)
                 etemp               = tbxai(b,kk1,a1,i1)*t1bxai(b,kk1,a1,i1)
                 sum3               += etemp
                 exit 
              endif 
           ENDDO k21 
           ENDDO kk1 
     ENDPARDO b, a1, i1
#
     PARDO a, a1, i1
           DO kk1 
           DO k21 
              if k21 > spdim  
                 REQUEST               S2a_aah(a,kk1,a1,i1,k21) a 
                 taxai(a,kk1,a1,i1)  = S2a_aah(a,kk1,a1,i1,k21) 
                 t1axai(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
                 etemp               = taxai(a,kk1,a1,i1)*t1axai(a,kk1,a1,i1)
                 etemp              *= 0.25 
                 sum3               += etemp
                 exit 
              endif 
           ENDDO k21 
           ENDDO kk1 
     ENDPARDO a, a1, i1
#
     PARDO b, b1, j1
           DO kk1
           DO k21
              if k21 > spdim
                 REQUEST               S2b_bbh(b,kk1,b1,j1,k21) b
                 tbxbj(b,kk1,b1,j1)  = S2b_bbh(b,kk1,b1,j1,k21)
                 t1bxbj(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
                 etemp               = tbxbj(b,kk1,b1,j1)*t1bxbj(b,kk1,b1,j1)
                 etemp              *= 0.25 
                 sum4               += etemp
                 exit
              endif
           ENDDO k21
           ENDDO kk1
     ENDPARDO b, b1, j1
#
     PARDO a 
           DO kk1 
           DO k21 
              if k21 > spdim  
                 GET           S1a_h(a,kk1,k21)  
                 tax(a,kk1)  = S1a_h(a,kk1,k21) 
                 t1ax(a,kk1) = tax(a,kk1)
                 etemp       = tax(a,kk1)*t1ax(a,kk1)
                 sum1       += etemp
                 exit 
              endif 
           ENDDO k21 
           ENDDO kk1 
     ENDPARDO a  
#
     PARDO b 
           DO kk1 
           DO k21 
              if k21 > spdim  
                 GET           S1b_h(b,kk1,k21)  
                 tbx(b,kk1)  = S1b_h(b,kk1,k21) 
                 t1bx(b,kk1) = tbx(b,kk1)
                 etemp       = tbx(b,kk1)*t1bx(b,kk1)
                 sum1       += etemp
                 exit 
              endif 
           ENDDO k21 
           ENDDO kk1 
     ENDPARDO b  
#
      server_barrier
#
     collective etemp1+=sum1
     collective etemp2+=sum2
     collective etemp3+=sum3
     collective etemp4+=sum4
     collective etemp5+=sum5
#
     square+=etemp1
     square+=etemp2
     square+=etemp3
     square+=etemp4
     square+=etemp5
#
        sip_barrier
        server_barrier
#
     ENDPROC SQUAREVCACT_NEW
#    ----------------------- 
#
# ----------------------------------------------------------------------
#
     PROC SCALEVCACT_NEW
#    ------------------- 
#
     PARDO a  
           DO kk1 
           DO k20 
              if k20 == spdim 
           DO k21 
              if k21 > k20 
                 GET                 S1a_h(a,kk1,k21)  
                 tax(a,kk1)          = S1a_h(a,kk1,k21) 
                 tax(a,kk1)         *= mult
                 PUT S1a(a,kk1) = tax(a,kk1)
                 exit 
              endif 
           ENDDO k21 
              endif 
           ENDDO k20 
           ENDDO kk1 
     ENDPARDO a 
#
     PARDO b  
           DO kk1 
           DO k20 
              if k20 == spdim 
           DO k21 
              if k21 > k20 
                 GET                 S1b_h(b,kk1,k21)  
                 tbx(b,kk1)          = S1b_h(b,kk1,k21) 
                 tbx(b,kk1)         *= mult
                 PUT S1b(b,kk1) = tbx(b,kk1)
                 exit 
              endif 
           ENDDO k21 
              endif 
           ENDDO k20 
           ENDDO kk1 
     ENDPARDO b 
#
     PARDO a, a1, i1
           DO kk1 
           DO k20 
              if k20 == spdim 
           DO k21 
              if k21 > k20 
                 REQUEST                   S2a_aah(a,kk1,a1,i1,k21) a 
                 taxai(a,kk1,a1,i1)      = S2a_aah(a,kk1,a1,i1,k21) 
                 taxai(a,kk1,a1,i1)     *= mult
                 PUT S2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
                 exit 
              endif 
           ENDDO k21 
              endif 
           ENDDO k20 
           ENDDO kk1 
     ENDPARDO a, a1, i1
#
     PARDO b, a1, i1
           DO kk1 
           DO k20 
              if k20 == spdim 
           DO k21 
              if k21 > k20 
                 REQUEST                   S2b_aah(b,kk1,a1,i1,k21) b 
                 tbxai(b,kk1,a1,i1)      = S2b_aah(b,kk1,a1,i1,k21) 
                 tbxai(b,kk1,a1,i1)     *= mult
                 PUT S2b_aa(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)
                 exit 
              endif 
           ENDDO k21 
              endif 
           ENDDO k20 
           ENDDO kk1 
     ENDPARDO b, a1, i1
#
     PARDO b, b1, j1
           DO kk1 
           DO k20 
              if k20 == spdim 
           DO k21 
              if k21 > k20 
                 REQUEST                   S2b_bbh(b,kk1,b1,j1,k21) b 
                 tbxbj(b,kk1,b1,j1)      = S2b_bbh(b,kk1,b1,j1,k21) 
                 tbxbj(b,kk1,b1,j1)     *= mult
                 PUT S2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
                 exit 
              endif 
           ENDDO k21 
              endif 
           ENDDO k20 
           ENDDO kk1 
     ENDPARDO b, b1, j1
#
     PARDO a, b1, j1
           DO kk1 
           DO k20 
              if k20 == spdim 
           DO k21 
              if k21 > k20 
                 REQUEST                   S2a_bbh(a,kk1,b1,j1,k21) a 
                 taxbj(a,kk1,b1,j1)      = S2a_bbh(a,kk1,b1,j1,k21) 
                 taxbj(a,kk1,b1,j1)     *= mult
                 PUT S2a_bb(a,kk1,b1,j1) = taxbj(a,kk1,b1,j1)
                 exit 
              endif 
           ENDDO k21 
              endif 
           ENDDO k20 
           ENDDO kk1 
     ENDPARDO a, b1, j1
#
      server_barrier
#
     ENDPROC SCALEVCACT_NEW
#
# ------------------------------------------------------------------------------- 
#
     PROC SCALEVCACT_3
#    ----------------- 
#
     PARDO a  
        DO kk1 
           GET           S1a(a,kk1) 
           tax(a,kk1)  = S1a(a,kk1)
           tax(a,kk1) *= mult
#
           DO k21
              IF k21 > spdim  
                 taxS(a,kk1,k21)      = tax(a,kk1)
                 PUT S1a_h(a,kk1,k21) = taxS(a,kk1,k21)
                 exit
              ENDIF
           ENDDO k21
#
        ENDDO kk1 
     ENDPARDO a 
#
     PARDO b  
        DO kk1 
           GET           S1b(b,kk1) 
           tbx(b,kk1)  = S1b(b,kk1)
           tbx(b,kk1) *= mult
#
           DO k21
              IF k21 > spdim  
                 tbxS(b,kk1,k21)      = tbx(b,kk1)
                 PUT S1b_h(b,kk1,k21) = tbxS(b,kk1,k21)
                 exit
              ENDIF
           ENDDO k21
#
        ENDDO kk1 
     ENDPARDO b 
#
     PARDO a, a1, i1
        DO kk1 
           GET                   S2a_aa(a,kk1,a1,i1) 
           taxai(a,kk1,a1,i1)  = S2a_aa(a,kk1,a1,i1)
           taxai(a,kk1,a1,i1) *= mult
#
           DO k21
              IF k21 > spdim  
                 taxaiS(a,kk1,a1,i1,k21)          = taxai(a,kk1,a1,i1)
                 PREPARE S2a_aah(a,kk1,a1,i1,k21) = taxaiS(a,kk1,a1,i1,k21)
                 exit
              ENDIF
           ENDDO k21
#
        ENDDO kk1 
     ENDPARDO a, a1, i1
#
     PARDO b, b1, j1
        DO kk1 
           GET                   S2b_bb(b,kk1,b1,j1) 
           tbxbj(b,kk1,b1,j1)  = S2b_bb(b,kk1,b1,j1)
           tbxbj(b,kk1,b1,j1) *= mult
#
           DO k21
              IF k21 > spdim  
                 tbxbjS(b,kk1,b1,j1,k21)          = tbxbj(b,kk1,b1,j1)
                 PREPARE S2b_bbh(b,kk1,b1,j1,k21) = tbxbjS(b,kk1,b1,j1,k21)
                 exit
              ENDIF
           ENDDO k21
#
        ENDDO kk1 
     ENDPARDO b, b1, j1
#
     PARDO b, a1, i1
        DO kk1 
           GET                   S2b_aa(b,kk1,a1,i1) 
           tbxai(b,kk1,a1,i1)  = S2b_aa(b,kk1,a1,i1)
           tbxai(b,kk1,a1,i1) *= mult
#
           DO k21
              IF k21 > spdim  
                 tbxaiS(b,kk1,a1,i1,k21)          = tbxai(b,kk1,a1,i1)
                 PREPARE S2b_aah(b,kk1,a1,i1,k21) = tbxaiS(b,kk1,a1,i1,k21)
                 exit
              ENDIF
           ENDDO k21
#
        ENDDO kk1 
     ENDPARDO b, a1, i1
#
     PARDO a, b1, j1
        DO kk1 
           GET                   S2a_bb(a,kk1,b1,j1) 
           taxbj(a,kk1,b1,j1)  = S2a_bb(a,kk1,b1,j1)
           taxbj(a,kk1,b1,j1) *= mult
#
           DO k21
              IF k21 > spdim  
                 taxbjS(a,kk1,b1,j1,k21)          = taxbj(a,kk1,b1,j1)
                 PREPARE S2a_bbh(a,kk1,b1,j1,k21) = taxbjS(a,kk1,b1,j1,k21)
                 exit
              ENDIF
           ENDDO k21
#
        ENDDO kk1 
     ENDPARDO a, b1, j1
#
      sip_barrier
      server_barrier
#
     ENDPROC SCALEVCACT_3
#    -------------------- 
#
# ------------------------------------------------------------------------------- 
#
     PROC ORTCOEFS
#    ------------- 
#
      PARDO a, a1, i1  
            DO kk1 
            GET HS2a_aa(a,kk1,a1,i1)  
            DO k21 
               if k21 <= spdim 
                  REQUEST              S2a_aah(a,kk1,a1,i1,k21) a 
                  taxai(a,kk1,a1,i1) = S2a_aah(a,kk1,a1,i1,k21) 
                  etemp              = HS2a_aa(a,kk1,a1,i1)*taxai(a,kk1,a1,i1) 
                  etemp             *= -0.250  
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO a, a1, i1  
#
      PARDO b, a1, i1  
            DO kk1 
            GET HS2b_aa(b,kk1,a1,i1)  
            DO k21 
               if k21 <= spdim 
                  REQUEST              S2b_aah(b,kk1,a1,i1,k21) b 
                  tbxai(b,kk1,a1,i1) = S2b_aah(b,kk1,a1,i1,k21) 
                  etemp              = HS2b_aa(b,kk1,a1,i1)*tbxai(b,kk1,a1,i1) 
                  etemp             *= -1.0  
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO b, a1, i1  
#
      PARDO b, b1, j1  
            DO kk1 
            GET HS2b_bb(b,kk1,b1,j1)  
            DO k21 
               if k21 <= spdim 
                  REQUEST              S2b_bbh(b,kk1,b1,j1,k21) b 
                  tbxbj(b,kk1,b1,j1) = S2b_bbh(b,kk1,b1,j1,k21) 
                  etemp              = HS2b_bb(b,kk1,b1,j1)*tbxbj(b,kk1,b1,j1) 
                  etemp             *= -0.250  
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO b, b1, j1  
#
      PARDO a, b1, j1  
            DO kk1 
            GET HS2a_bb(a,kk1,b1,j1)  
            DO k21 
               if k21 <= spdim 
                  REQUEST              S2a_bbh(a,kk1,b1,j1,k21) a 
                  taxbj(a,kk1,b1,j1) = S2a_bbh(a,kk1,b1,j1,k21) 
                  etemp              = HS2a_bb(a,kk1,b1,j1)*taxbj(a,kk1,b1,j1) 
                  etemp             *= -1.0  
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO a, b1, j1  
#
      PARDO a  
            DO kk1 
            GET HS1a(a,kk1)
            DO k21 
               if k21 <= spdim 
                  GET                  S1a_h(a,kk1,k21)
                  tax(a,kk1)         = S1a_h(a,kk1,k21) 
                  etemp              = HS1a(a,kk1)*tax(a,kk1) 
                  etemp             *= -1.0 
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO a  
#
      PARDO b  
            DO kk1 
            GET HS1b(b,kk1)
            DO k21 
               if k21 <= spdim 
                  GET                  S1b_h(b,kk1,k21)
                  tbx(b,kk1)         = S1b_h(b,kk1,k21) 
                  etemp              = HS1b(b,kk1)*tbx(b,kk1) 
                  etemp             *= -1.0 
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
            ENDDO kk1 
      ENDPARDO b  
#
      ENDPROC ORTCOEFS
#     ---------------- 
#
     PROC VECCONSTR_NEW
#    ------------------ 
#
     etemp1=0.0
     etemp2=0.0
     etemp3=0.0
     etemp4=0.0
     etemp5=0.0
     etemp6=0.0
#
     square=0.0
#
     sum1=0.0
     sum2=0.0
     sum3=0.0
     sum4=0.0
     sum5=0.0
     sum6=0.0
      sip_barrier 
#
      PARDO a  
         DO kk1 
            GET          HS1a(a,kk1) 
            tax(a,kk1) = HS1a(a,kk1)
            DO k21 
               if k21 <= spdim 
                  GET           S1a_h(a,kk1,k21) 
                  GET           orth(k21,k21) 
                  t1ax(a,kk1) = S1a_h(a,kk1,k21)
#
                  t1(k21,k21)       = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1ax(a,kk1)      *= fact  
                  tax(a,kk1)       += t1ax(a,kk1)
#
               endif 
            ENDDO k21 
#
            PUT S1a(a,kk1) = tax(a,kk1)
#
            t2ax(a,kk1)      = tax(a,kk1)
            etemp            = tax(a,kk1)*t2ax(a,kk1)
            sum1            += etemp
         ENDDO kk1 
      ENDPARDO a  
#
      PARDO b  
         DO kk1 
            GET          HS1b(b,kk1) 
            tbx(b,kk1) = HS1b(b,kk1)
            DO k21 
               if k21 <= spdim 
                  GET           S1b_h(b,kk1,k21) 
                  GET           orth(k21,k21) 
                  t1bx(b,kk1) = S1b_h(b,kk1,k21)
#
                  t1(k21,k21)       = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1bx(b,kk1)      *= fact  
                  tbx(b,kk1)       += t1bx(b,kk1)
#
               endif 
            ENDDO k21 
#
            PUT S1b(b,kk1) = tbx(b,kk1)
#
            t2bx(b,kk1)      = tbx(b,kk1)
            etemp            = tbx(b,kk1)*t2bx(b,kk1)
            sum2            += etemp
         ENDDO kk1 
      ENDPARDO b  
#
      PARDO a, a1, i1
            DO kk1 
            GET                  HS2a_aa(a,kk1,a1,i1) 
            taxai(a,kk1,a1,i1) = HS2a_aa(a,kk1,a1,i1)
            DO k21 
               if k21 <= spdim 
                  request               S2a_aah(a,kk1,a1,i1,k21) i1
                  GET                   orth(k21,k21) 
                  t1axai(a,kk1,a1,i1) = S2a_aah(a,kk1,a1,i1,k21)
#
                  t1(k21,k21)         = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1axai(a,kk1,a1,i1)*= fact  
                  taxai(a,kk1,a1,i1) += t1axai(a,kk1,a1,i1)
#
               endif 
            ENDDO k21 
#
            PUT S2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
#
            t2axai(a,kk1,a1,i1)     = taxai(a,kk1,a1,i1)
            etemp                   = taxai(a,kk1,a1,i1)*t2axai(a,kk1,a1,i1)
            etemp                  *= 0.25 
            sum3                   += etemp
            ENDDO kk1 
      ENDPARDO a, a1, i1
#
      PARDO b, a1, i1
            DO kk1 
            GET                  HS2b_aa(b,kk1,a1,i1) 
            tbxai(b,kk1,a1,i1) = HS2b_aa(b,kk1,a1,i1)
            DO k21 
               if k21 <= spdim 
                  request               S2b_aah(b,kk1,a1,i1,k21) i1
                  GET                   orth(k21,k21) 
                  t1bxai(b,kk1,a1,i1) = S2b_aah(b,kk1,a1,i1,k21)
#
                  t1(k21,k21)         = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1bxai(b,kk1,a1,i1)*= fact  
                  tbxai(b,kk1,a1,i1) += t1bxai(b,kk1,a1,i1)
#
               endif 
            ENDDO k21 
#
            PUT S2b_aa(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)
#
            t1bxai(b,kk1,a1,i1)     = tbxai(b,kk1,a1,i1)
            etemp                   = tbxai(b,kk1,a1,i1)*t1bxai(b,kk1,a1,i1)
            sum4                   += etemp
            ENDDO kk1 
      ENDPARDO b, a1, i1
#
      PARDO b, b1, j1
            DO kk1 
            GET                  HS2b_bb(b,kk1,b1,j1) 
            tbxbj(b,kk1,b1,j1) = HS2b_bb(b,kk1,b1,j1)
            DO k21 
               if k21 <= spdim 
                  request               S2b_bbh(b,kk1,b1,j1,k21) j1
                  GET                   orth(k21,k21) 
                  t1bxbj(b,kk1,b1,j1) = S2b_bbh(b,kk1,b1,j1,k21)
#
                  t1(k21,k21)         = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1bxbj(b,kk1,b1,j1)*= fact  
                  tbxbj(b,kk1,b1,j1) += t1bxbj(b,kk1,b1,j1)
#
               endif 
            ENDDO k21 
#
            PUT S2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
#
            t2bxbj(b,kk1,b1,j1)     = tbxbj(b,kk1,b1,j1)
            etemp                   = tbxbj(b,kk1,b1,j1)*t2bxbj(b,kk1,b1,j1)
            etemp                  *= 0.25 
            sum5                   += etemp
            ENDDO kk1 
      ENDPARDO b, b1, j1
#
      PARDO a, b1, j1
            DO kk1 
            GET                  HS2a_bb(a,kk1,b1,j1) 
            taxbj(a,kk1,b1,j1) = HS2a_bb(a,kk1,b1,j1)
            DO k21 
               if k21 <= spdim 
                  request               S2a_bbh(a,kk1,b1,j1,k21) j1
                  GET                   orth(k21,k21) 
                  t1axbj(a,kk1,b1,j1) = S2a_bbh(a,kk1,b1,j1,k21)
#
                  t1(k21,k21)         = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1axbj(a,kk1,b1,j1)*= fact  
                  taxbj(a,kk1,b1,j1) += t1axbj(a,kk1,b1,j1)
#
               endif 
            ENDDO k21 
#
            PUT S2a_bb(a,kk1,b1,j1) = taxbj(a,kk1,b1,j1)
#
            t1axbj(a,kk1,b1,j1)     = taxbj(a,kk1,b1,j1)
            etemp                   = taxbj(a,kk1,b1,j1)*t1axbj(a,kk1,b1,j1)
            sum6                   += etemp
            ENDDO kk1 
      ENDPARDO a, b1, j1
#
       sip_barrier
       server_barrier
#
      collective etemp1+=sum1
      collective etemp2+=sum2
      collective etemp3+=sum3
      collective etemp4+=sum4
      collective etemp5+=sum5
      collective etemp6+=sum6
#
      square+=etemp1
      square+=etemp2
      square+=etemp3
      square+=etemp4
      square+=etemp5
      square+=etemp6
#
       sip_barrier
       server_barrier
#
     ENDPROC VECCONSTR_NEW
#    --------------------- 
#
     PROC REZYDUUM
#    ------------- 
#
#   ------copy vector to VCactual
#
##     call copy_toVCactual_2
#
#   ---------------normalize vector-----------     
##     call SQUAREVCACT
     call SQUAREVCACT_NEW
#
     exponent = 0.5 
     execute norm_fac square exponent
     residuum=exponent
     mult=square
#
     ENDPROC REZYDUUM
#
# ---------------------------------------------------------------------- 
#
     PROC ORTHOGON
#    ------------- 
#
        create orth 
         sip_barrier 
        call ORTCOEFS
        call VECCONSTR_NEW # ***VFL***  
#
        exponent = 0.5 
        execute norm_fac square exponent
        mult = square
#
        call SCALEVCACT_3
         sip_barrier 
        delete orth 
#
     ENDPROC ORTHOGON
#    ---------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC FORM_IDENTITY 
#     ------------------ 
#
# Form identity arrays IIi and IJj 
# -------------------------------- 
#
     DO aa 
     DO a1 
        tsa(aa,a1) = 1.0 
        t1sa(aa,a1) = 0.0 
        execute return_diagonal tsa t1sa 
        psa(aa,a1) = t1sa(aa,a1) 
        PUT IIi(aa,a1) = psa(aa,a1) 
     ENDDO a1 
     ENDDO aa 
#
     DO bb 
     DO b1 
        tsb(bb,b1) = 1.0 
        t1sb(bb,b1) = 0.0 
        execute return_diagonal tsb t1sb 
        psb(bb,b1) = t1sb(bb,b1) 
        PUT IJj(bb,b1) = psb(bb,b1) 
     ENDDO b1 
     ENDDO bb 
#
      sip_barrier
#
# Done Form identity arrays IIi and IJj 
# ------------------------------------- 
#
# Now convert ca(mu,p) and cb(mu,q) --> ca(mu,pp) and cb(mu,qq)  
# ------------------------------------------------------------- 
#
#      PARDO mu, pp 
      DO mu 
      DO pp 
            txpp(mu,pp) = 0.0 
            DO a 
               GET IIi(pp,a) 
               t1xpp(mu,pp) = ca(mu,a)*IIi(pp,a) 
               txpp(mu,pp) += t1xpp(mu,pp) 
            ENDDO a
            csa(mu,pp) = txpp(mu,pp)  
#      ENDPARDO mu, pp 
      ENDDO pp 
      ENDDO mu 
#
#      PARDO mu, qq 
      DO mu 
      DO qq 
            txqq(mu,qq) = 0.0 
            DO b 
               GET IJj(qq,b) 
               t1xqq(mu,qq) = cb(mu,b)*IJj(qq,b) 
               txqq(mu,qq) += t1xqq(mu,qq) 
            ENDDO b
            csb(mu,qq) = txqq(mu,qq)  
#      ENDPARDO mu, qq 
      ENDDO qq 
      ENDDO mu 
#
      ENDPROC FORM_IDENTITY 
#     --------------------- 
#
     PROC CONVER
#    ----------- 
#
     create DDii
     create DDjj
     create DDaa
     create DDbb 
     create Ra_aa 
     create Rb_bb 
     create Ra_bb 
     create Rb_aa 
     create Ra 
     create Rb 
      sip_barrier 
# 
# -----prepare f_ii diagonal = DDii
#       
     PARDO i, i1
#    
           GET              Uii(i1,i)
           Sii(i1,i)      = Uii(i1,i)
           execute return_diagonal Sii Sdii
           tii(i1,i)      = Sdii(i1,i)
           put DDii(i1,i) = tii(i1,i)
#          
     ENDPARDO i, i1
#          
# -----prepare f_jj diagonal = DDjj
#          
     PARDO j, j1
#
        GET              Ujj(j1,j)
        Sjj(j1,j)      = Ujj(j1,j)
        execute return_diagonal Sjj Sdjj
        tjj(j1,j)      = Sdjj(j1,j)
        put DDjj(j1,j) = tjj(j1,j)
#
     ENDPARDO j, j1
#
# -----prepare f_aa diagonal = DDaa
#
     PARDO a, a1
#
           GET              Uaa(a,a1)
           Saa(a,a1)      = Uaa(a,a1)
           taa(a,a1)      = Uaa(a,a1)
           execute return_diagonal Saa Sdaa
           taa(a,a1)      = Sdaa(a,a1)
           put DDaa(a,a1) = taa(a,a1)
#
     ENDPARDO a, a1
#
# -----prepare f_bb diagonal = DDbb
#
     PARDO b, b1
#
        GET              Ubb(b,b1)
        Sbb(b,b1)      = Ubb(b,b1)
        execute return_diagonal Sbb Sdbb
        tbb(b,b1)      = Sdbb(b,b1)
        put DDbb(b,b1) = tbb(b,b1)
#
     ENDPARDO b, b1
#
      sip_barrier
#
#     Ra  
#     ------- 
#
     PARDO a
        DO kk1
#
           tas(a,kk1)=0.0
#
           do a1
#
              get          DDaa(a1,a)
              t1as(a1,kk1) = 1.0
              taa(a,a1)  = DDaa(a1,a)
#
              t2as(a,kk1)  = taa(a,a1)*t1as(a1,kk1)
              tas(a,kk1)  -= t2as(a,kk1)
#
           enddo a1
#
           PUT Ra(a,kk1) += tas(a,kk1)
#
        ENDDO kk1
     ENDPARDO a 
#
#     Rb  
#     ------- 
#
     PARDO b
        DO kk1
#
           tbs(b,kk1)=0.0
#
           do b1
#
              get          DDbb(b1,b)
              t1bs(b1,kk1) = 1.0
              tbb(b,b1)  = DDbb(b1,b)
#
              t2bs(b,kk1)  = tbb(b,b1)*t1bs(b1,kk1)
              tbs(b,kk1)  -= t2bs(b,kk1)
#
           enddo b1
#
           PUT Rb(b,kk1) += tbs(b,kk1)
#
        ENDDO kk1
     ENDPARDO b 
#
#     (R)(a,ai) 
#     ---------- 
#
      PARDO a, a1, a2, i 
            DO kk1 
               GET                      DDaa(a,a2) 
               t1axai(a2,kk1,a1,i)    = 1.0  
               taxai(a,kk1,a1,i)      = t1axai(a2,kk1,a1,i)*DDaa(a,a2) 
               PUT Ra_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i) 
            ENDDO kk1 
      ENDPARDO a, a1, a2, i 
#
      PARDO a, a1, a2, i 
            DO kk1 
               GET                      DDaa(a1,a2) 
               t1axai(a,kk1,a2,i)     = 1.0  
               taxai(a,kk1,a1,i)      = t1axai(a,kk1,a2,i)*DDaa(a1,a2) 
               PUT Ra_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i)  
            ENDDO kk1 
      ENDPARDO a, a1, a2, i 
#
      PARDO a, a1, i1, i 
            DO kk1 
               GET                      DDii(i1,i) 
               t1axai(a,kk1,a1,i1)    = 1.0  
               taxai(a,kk1,a1,i)      = t1axai(a,kk1,a1,i1)*DDii(i1,i)  
               taxai(a,kk1,a1,i)     *= -1.0  
               PUT Ra_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i)  
            ENDDO kk1 
      ENDPARDO a, a1, i1, i 
#
      PARDO a1, i1, a2, i 
            DO kk1 
               REQUEST              Wiaai(i1,a2,a1,i) i1 
               Taaii(a2,a1,i1,i) =  Wiaai(i1,a2,a1,i)
               execute return_diagonal4 Taaii 
               DO a 
                  t1axai(a,kk1,a2,i1)    = 1.0  
                  taxai(a,kk1,a1,i)      = t1axai(a,kk1,a2,i1)*Taaii(a2,a1,i1,i) 
                  PUT Ra_aa(a,kk1,a1,i) += taxai(a,kk1,a1,i) 

                  t1axai(a1,kk1,a,i)     = taxai(a,kk1,a1,i) 
                  t1axai(a1,kk1,a,i)    *= -1.0  
                  PUT Ra_aa(a1,kk1,a,i) += t1axai(a1,kk1,a,i) 
               ENDDO a 
            ENDDO kk1 
      ENDPARDO a1, i1, a2, i 
#
#     (R)(b,bi) 
#     ---------- 
#
      PARDO b, b1, b2, j 
            DO kk1 
               GET                      DDbb(b,b2) 
               t1bxbj(b2,kk1,b1,j)    = 1.0  
               tbxbj(b,kk1,b1,j)      = t1bxbj(b2,kk1,b1,j)*DDbb(b,b2) 
               PUT Rb_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j) 
            ENDDO kk1 
      ENDPARDO b, b1, b2, j 
#
      PARDO b, b1, b2, j 
            DO kk1 
               GET                      DDbb(b1,b2) 
               t1bxbj(b,kk1,b2,j)     = 1.0  
               tbxbj(b,kk1,b1,j)      = t1bxbj(b,kk1,b2,j)*DDbb(b1,b2) 
               PUT Rb_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j)  
            ENDDO kk1 
      ENDPARDO b, b1, b2, j 
#
      PARDO b, b1, j1, j 
            DO kk1 
               GET                      DDjj(j1,j) 
               t1bxbj(b,kk1,b1,j1)    = 1.0  
               tbxbj(b,kk1,b1,j)      = t1bxbj(b,kk1,b1,j1)*DDjj(j1,j)  
               tbxbj(b,kk1,b1,j)     *= -1.0  
               PUT Rb_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j)  
            ENDDO kk1 
      ENDPARDO b, b1, j1, j 
#
      PARDO b1, j1, b2, j 
            DO kk1 
               REQUEST              Wjbbj(j1,b2,b1,j) j1 
               Tbbjj(b2,b1,j1,j) =  Wjbbj(j1,b2,b1,j)
               execute return_diagonal4 Tbbjj 
               DO b 
                  t1bxbj(b,kk1,b2,j1)    = 1.0  
                  tbxbj(b,kk1,b1,j)      = t1bxbj(b,kk1,b2,j1)*Tbbjj(b2,b1,j1,j) 
                  PUT Rb_bb(b,kk1,b1,j) += tbxbj(b,kk1,b1,j) 

                  t1bxbj(b1,kk1,b,j)     = tbxbj(b,kk1,b1,j) 
                  t1bxbj(b1,kk1,b,j)    *= -1.0  
                  PUT Rb_bb(b1,kk1,b,j) += t1bxbj(b1,kk1,b,j) 
               ENDDO b 
            ENDDO kk1 
      ENDPARDO b1, j1, b2, j 
#
#     (HS)(a,BJ) 
#     ---------- 
#
      PARDO a, b, a1, j 
            DO kk1 
               GET                       DDaa(a,a1) 
               T1axbb(a1,kk1,b,j)      = 1.0  
               taxbb(a,kk1,b,j)        = T1axbb(a1,kk1,b,j)*DDaa(a,a1)  
               PUT Ra_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b, a1, j 
#
      PARDO a, b1, j, b 
            DO kk1 
               GET                       DDbb(b,b1) 
               T1axbb(a,kk1,b1,j)      = 1.0  
               taxbb(a,kk1,b,j)        = T1axbb(a,kk1,b1,j)*DDbb(b,b1) 
               PUT Ra_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b1, j, b 
#
      PARDO a, b, j1, j 
            DO kk1 
               GET                       DDjj(j1,j) 
               T1axbb(a,kk1,b,j1)      = 1.0  
               taxbb(a,kk1,b,j)        = T1axbb(a,kk1,b,j1)*DDjj(j1,j) 
               taxbb(a,kk1,b,j)       *= -1.0  
               PUT Ra_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
      ENDPARDO a, b, j1, j 
# 
      PARDO b1, j1, b, j 
            REQUEST                  Wjbbj(j1,b1,b,j) j1 
            Tbbjj(b,b1,j,j1)       = Wjbbj(j1,b1,b,j) 
            execute return_diagonal4 Tbbjj 
            Tbjbj(b1,j1,b,j)        = Tbbjj(b,b1,j,j1) 
            DO a  
            DO kk1
               T1axbb(a,kk1,b1,j1)   = 1.0  
              #taxbb(a,kk1,b,j)      = T1axbb(a,kk1,b1,j1)*Tbbjj(b,b1,j,j1) 
               taxbb(a,kk1,b,j)      = T1axbb(a,kk1,b1,j1)*Tbjbj(b1,j1,b,j) 
               PUT Ra_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
            ENDDO a  
      ENDPARDO b1, j1, b, j 
# 
      PARDO a, j1, a1, j  
            REQUEST                  Wjjaa(j1,j,a,a1) a 
            tppqq(a,a1,j1,j)       = Wjjaa(j1,j,a,a1) 
            execute return_diagonal4 Tppqq 
            DO b 
            DO kk1 
               T1axbb(a1,kk1,b,j1)   = 1.0  
               taxbb(a,kk1,b,j)      = tppqq(a,a1,j1,j)*T1axbb(a1,kk1,b,j1) 
               PUT Ra_bb(a,kk1,b,j) += taxbb(a,kk1,b,j) 
            ENDDO kk1 
            ENDDO b 
      ENDPARDO a, j1, a1, j  
#
#     (HS)(B,ai) 
#     ---------- 
#
      PARDO b, a, b1, i 
            DO kk1 
               GET                       DDbb(b,b1) 
               T1bxaa(b1,kk1,a,i)      = 1.0  
               tbxaa(b,kk1,a,i)        = T1bxaa(b1,kk1,a,i)*DDbb(b,b1)  
               PUT Rb_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO b, a, b1, i 
#
      PARDO b, a1, i, a 
            DO kk1 
               GET                       DDaa(a,a1) 
               T1bxaa(b,kk1,a1,i)      = 1.0  
               tbxaa(b,kk1,a,i)        = T1bxaa(b,kk1,a1,i)*DDaa(a,a1) 
               PUT Rb_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO b, a1, i, a 
#
      PARDO b, a, i1, i 
            DO kk1 
               GET                       DDii(i1,i) 
               T1bxaa(b,kk1,a,i1)      = 1.0  
               tbxaa(b,kk1,a,i)        = T1bxaa(b,kk1,a,i1)*DDii(i1,i) 
               tbxaa(b,kk1,a,i)       *= -1.0  
               PUT Rb_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
      ENDPARDO b, a, i1, i 
# 
      PARDO a1, i1, a, i 
            REQUEST Wiaai(i1,a1,a,i) i1 
            tpppp(a,a1,i,i1) = Wiaai(i1,a1,a,i) 
            execute return_diagonal4 tpppp 
            t1pppp(a1,i1,a,i) = tpppp(a,a1,i,i1) 
            DO b  
            DO kk1
               T1bxaa(b,kk1,a1,i1)   = 1.0  
               tbxaa(b,kk1,a,i)      = T1bxaa(b,kk1,a1,i1)*t1pppp(a1,i1,a,i) 
               PUT Rb_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
            ENDDO b  
      ENDPARDO a1, i1, a, i 
# 
      PARDO b, i1, b1, i  
            REQUEST            Wiibb(i1,i,b,b1) b 
            tqqpp(b,b1,i1,i) = Wiibb(i1,i,b,b1) 
            execute return_diagonal4 tqqpp 
            DO a 
            DO kk1 
               T1bxaa(b1,kk1,a,i1)     = 1.0  
               tbxaa(b,kk1,a,i)        = tqqpp(b,b1,i1,i)*T1bxaa(b1,kk1,a,i1) 
               PUT Rb_aa(b,kk1,a,i) += tbxaa(b,kk1,a,i) 
            ENDDO kk1 
            ENDDO a 
      ENDPARDO b, i1, b1, i  
#
       sip_barrier 
#
     delete DDii
     delete DDjj
     delete DDaa
     delete DDbb 
#
     ENDPROC CONVER
#    -------------- 
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
       PROC AEIGCANC
#
        if spdim20 == 1
        Aeig1 = 1000000.0
        endif
        if spdim20 == 2
        Aeig2 = 1000000.0
        endif
        if spdim20 == 3
        Aeig3 = 1000000.0
        endif
        if spdim20 == 4
        Aeig4 = 1000000.0
        endif
        if spdim20 == 5
        Aeig5 = 1000000.0
        endif
        if spdim20 == 6
        Aeig6 = 1000000.0
        endif
        if spdim20 == 7
        Aeig7 = 1000000.0
        endif
        if spdim20 == 8
        Aeig8 = 1000000.0
        endif
        if spdim20 == 9
        Aeig9 = 1000000.0
        endif
        if spdim20 == 10
        Aeig10 = 1000000.0
        endif
        if spdim20 == 11
        Aeig11 = 1000000.0
        endif
        if spdim20 == 12
        Aeig12 = 1000000.0
        endif
        if spdim20 == 13
        Aeig13 = 1000000.0
        endif
        if spdim20 == 14
        Aeig14 = 1000000.0
        endif
        if spdim20 == 15
        Aeig15 = 1000000.0
        endif
        if spdim20 == 16
        Aeig16 = 1000000.0
        endif
        if spdim20 == 17
        Aeig17 = 1000000.0
        endif
        if spdim20 == 18
        Aeig18 = 1000000.0
        endif
        if spdim20 == 19
        Aeig19 = 1000000.0
        endif
        if spdim20 == 20
        Aeig20 = 1000000.0
        endif
#
#
       ENDPROC AEIGCANC
#
#
       PROC AEIGCANCX
#
#
        if egvmax == 1.0
        Aeig1 = 1000000.0
        endif
        if egvmax == 2.0
        Aeig2 = 1000000.0
        endif
        if egvmax == 3.0
        Aeig3 = 1000000.0
        endif
        if egvmax == 4.0
        Aeig4 = 1000000.0
        endif
        if egvmax == 5.0
        Aeig5 = 1000000.0
        endif
        if egvmax == 6.0
        Aeig6 = 1000000.0
        endif
        if egvmax == 7.0
        Aeig7 = 1000000.0
        endif
        if egvmax == 8.0
        Aeig8 = 1000000.0
        endif
        if egvmax == 9.0
        Aeig9 = 1000000.0
        endif
        if egvmax == 10.0
        Aeig10 = 1000000.0
        endif
        if egvmax == 11.0
        Aeig11 = 1000000.0
        endif
        if egvmax == 12.0
        Aeig12 = 1000000.0
        endif
        if egvmax == 13.0
        Aeig13 = 1000000.0
        endif
        if egvmax == 14.0
        Aeig14 = 1000000.0
        endif
        if egvmax == 15.0
        Aeig15 = 1000000.0
        endif
        if egvmax == 16.0
        Aeig16 = 1000000.0
        endif
        if egvmax == 17.0
        Aeig17 = 1000000.0
        endif
        if egvmax == 18.0
        Aeig18 = 1000000.0
        endif
        if egvmax == 19.0
        Aeig19 = 1000000.0
        endif
        if egvmax == 20.0
        Aeig20 = 1000000.0
        endif
#
#
       ENDPROC AEIGCANCX
#
#
       PROC DRAWVEC1
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC1
#
#
       PROC DRAWVEC2
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V2_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V2_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V2_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V2_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V2_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V2_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V2_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V2_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V2_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V2_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V2_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V2_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V2_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V2_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V2_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V2_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V2_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V2_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V2_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V2_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC2
#
#
       PROC DRAWVEC3
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V3_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V3_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V3_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V3_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V3_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V3_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V3_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V3_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V3_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V3_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V3_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V3_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V3_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V3_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V3_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V3_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V3_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V3_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V3_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V3_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC3
#
#
       PROC DRAWVEC4
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V4_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V4_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V4_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V4_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V4_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V4_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V4_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V4_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V4_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V4_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V4_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V4_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V4_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V4_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V4_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V4_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V4_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V4_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V4_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V4_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC4
#
#
       PROC DRAWVEC5
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V5_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V5_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V5_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V5_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V5_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V5_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V5_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V5_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V5_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V5_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V5_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V5_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V5_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V5_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V5_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V5_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V5_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V5_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V5_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V5_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC5
#
#
       PROC DRAWVEC6
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V6_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V6_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V6_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V6_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V6_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V6_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V6_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V6_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V6_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V6_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V6_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V6_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V6_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V6_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V6_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V6_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V6_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V6_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V6_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V6_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC6
#
#
       PROC DRAWVEC7
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V7_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V7_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V7_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V7_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V7_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V7_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V7_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V7_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V7_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V7_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V7_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V7_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V7_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V7_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V7_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V7_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V7_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V7_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V7_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V7_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC7
#
#
       PROC DRAWVEC8
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V8_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V8_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V8_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V8_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V8_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V8_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V8_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V8_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V8_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V8_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V8_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V8_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V8_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V8_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V8_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V8_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V8_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V8_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V8_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V8_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC8
#
#
       PROC DRAWVEC9
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V9_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V9_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V9_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V9_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V9_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V9_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V9_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V9_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V9_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V9_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V9_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V9_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V9_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V9_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V9_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V9_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V9_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V9_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V9_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V9_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC9
#
#
       PROC DRAWVEC10
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V10_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V10_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V10_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V10_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V10_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V10_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V10_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V10_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V10_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V10_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V10_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V10_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V10_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V10_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V10_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V10_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V10_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V10_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V10_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V10_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC10
#
#
       PROC DRAWVEC11
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V11_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V11_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V11_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V11_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V11_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V11_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V11_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V11_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V11_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V11_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V11_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V11_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V11_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V11_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V11_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V11_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V11_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V11_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V11_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V11_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC11
#
#
       PROC DRAWVEC12
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V12_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V12_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V12_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V12_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V12_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V12_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V12_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V12_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V12_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V12_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V12_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V12_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V12_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V12_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V12_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V12_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V12_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V12_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V12_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V12_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC12
#
#
#
       PROC DRAWVECX1
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX1
#
#
       PROC DRAWVECX2
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V2_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V2_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V2_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V2_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V2_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V2_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V2_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V2_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V2_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V2_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V2_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V2_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V2_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V2_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V2_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V2_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V2_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V2_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V2_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V2_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX2
#
#
       PROC DRAWVECX3
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V3_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V3_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V3_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V3_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V3_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V3_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V3_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V3_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V3_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V3_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V3_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V3_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V3_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V3_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V3_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V3_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V3_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V3_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V3_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V3_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX3
#
#
       PROC DRAWVECX4
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V4_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V4_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V4_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V4_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V4_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V4_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V4_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V4_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V4_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V4_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V4_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V4_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V4_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V4_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V4_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V4_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V4_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V4_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V4_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V4_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX4
#
#
       PROC DRAWVECX5
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V5_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V5_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V5_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V5_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V5_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V5_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V5_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V5_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V5_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V5_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V5_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V5_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V5_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V5_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V5_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V5_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V5_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V5_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V5_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V5_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX5
#
#
       PROC DRAWVECX6
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V6_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V6_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V6_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V6_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V6_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V6_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V6_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V6_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V6_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V6_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V6_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V6_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V6_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V6_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V6_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V6_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V6_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V6_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V6_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V6_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX6
#
#
       PROC DRAWVECX7
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V7_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V7_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V7_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V7_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V7_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V7_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V7_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V7_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V7_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V7_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V7_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V7_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V7_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V7_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V7_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V7_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V7_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V7_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V7_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V7_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX7
#
#
       PROC DRAWVECX8
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V8_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V8_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V8_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V8_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V8_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V8_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V8_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V8_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V8_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V8_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V8_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V8_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V8_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V8_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V8_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V8_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V8_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V8_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V8_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V8_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX8
#
#
       PROC DRAWVECX9
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V9_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V9_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V9_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V9_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V9_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V9_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V9_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V9_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V9_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V9_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V9_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V9_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V9_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V9_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V9_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V9_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V9_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V9_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V9_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V9_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX9
#
#
       PROC DRAWVECX10
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V10_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V10_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V10_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V10_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V10_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V10_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V10_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V10_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V10_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V10_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V10_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V10_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V10_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V10_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V10_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V10_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V10_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V10_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V10_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V10_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX10
#
#
       PROC DRAWVECX11
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V11_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V11_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V11_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V11_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V11_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V11_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V11_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V11_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V11_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V11_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V11_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V11_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V11_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V11_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V11_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V11_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V11_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V11_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V11_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V11_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX11
#
#
       PROC DRAWVECX12
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V12_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V12_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V12_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V12_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V12_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V12_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V12_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V12_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V12_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V12_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V12_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V12_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V12_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V12_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V12_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V12_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V12_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V12_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V12_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V12_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX12
#
#
#
       PROC FNDVECS
#
     lcount=0.0
     icount=1.0
#
#
# ----------------find current one -----------
#
     do spdim2
#
     if icount == imax
#
     lcount+=1.0
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     MYvev(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim2
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
        if spdim2 == 1
        Aeig1 = 1000000.0
        endif
        if spdim2 == 2
        Aeig2 = 1000000.0
        endif
        if spdim2 == 3
        Aeig3 = 1000000.0
        endif
        if spdim2 == 4
        Aeig4 = 1000000.0
        endif
        if spdim2 == 5
        Aeig5 = 1000000.0
        endif
        if spdim2 == 6
        Aeig6 = 1000000.0
        endif
        if spdim2 == 7
        Aeig7 = 1000000.0
        endif
        if spdim2 == 8
        Aeig8 = 1000000.0
        endif
        if spdim2 == 9
        Aeig9 = 1000000.0
        endif
        if spdim2 == 10
        Aeig10 = 1000000.0
        endif
        if spdim2 == 11
        Aeig11 = 1000000.0
        endif
        if spdim2 == 12
        Aeig12 = 1000000.0
        endif
        if spdim2 == 13
        Aeig13 = 1000000.0
        endif
        if spdim2 == 14
        Aeig14 = 1000000.0
        endif
        if spdim2 == 15
        Aeig15 = 1000000.0
        endif
        if spdim2 == 16
        Aeig16 = 1000000.0
        endif
        if spdim2 == 17
        Aeig17 = 1000000.0
        endif
        if spdim2 == 18
        Aeig18 = 1000000.0
        endif
        if spdim2 == 19
        Aeig19 = 1000000.0
        endif
        if spdim2 == 20
        Aeig20 = 1000000.0
        endif
#
     exit
#
     endif
#
     icount+=1.0
#
     enddo spdim2
#
#
#
# ----------cancel eigenvalues below threshold---
#
        do spdim20
#
      if spdim20 == 1
#
      aeigtemp=Aeig1
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig1 = 12345.6
      endif
#
      endif
#
      if spdim20 == 2
#
      aeigtemp=Aeig2
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig2 = 12345.6
      endif
#
      endif
#
      if spdim20 == 3
#
      aeigtemp=Aeig3
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig3 = 12345.6
      endif
#
      endif
#
      if spdim20 == 4
#
      aeigtemp=Aeig4
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig4 = 12345.6
      endif
#
      endif
#
      if spdim20 == 5
#
      aeigtemp=Aeig5
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig5 = 12345.6
      endif
#
      endif
#
      if spdim20 == 6
#
      aeigtemp=Aeig6
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig6 = 12345.6
      endif
#
      endif
#
      if spdim20 == 7
#
      aeigtemp=Aeig7
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig7 = 12345.6
      endif
#
      endif
#
      if spdim20 == 8
#
      aeigtemp=Aeig8
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig8 = 12345.6
      endif
#
      endif
#
      if spdim20 == 9
#
      aeigtemp=Aeig9
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig9 = 12345.6
      endif
#
      endif
#
      if spdim20 == 10
#
      aeigtemp=Aeig10
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig10 = 12345.6
      endif
#
      endif
#
      if spdim20 == 11
#
      aeigtemp=Aeig11
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig11 = 12345.6
      endif
#
      endif
#
      if spdim20 == 12
#
      aeigtemp=Aeig12
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig12 = 12345.6
      endif
#
      endif
#
      if spdim20 == 13
#
      aeigtemp=Aeig13
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig13 = 12345.6
      endif
#
      endif
#
      if spdim20 == 14
#
      aeigtemp=Aeig14
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig14 = 12345.6
      endif
#
      endif
#
      if spdim20 == 15
#
      aeigtemp=Aeig15
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig15 = 12345.6
      endif
#
      endif
#
      if spdim20 == 16
#
      aeigtemp=Aeig16
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig16 = 12345.6
      endif
#
      endif
#
      if spdim20 == 17
#
      aeigtemp=Aeig17
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig17 = 12345.6
      endif
#
      endif
#
      if spdim20 == 18
#
      aeigtemp=Aeig18
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig18 = 12345.6
      endif
#
      endif
#
      if spdim20 == 19
#
      aeigtemp=Aeig19
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig19 = 12345.6
      endif
#
      endif
#
      if spdim20 == 20
#
      aeigtemp=Aeig20
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig20 = 12345.6
      endif
#
      endif
#
        enddo spdim20
#
# ----------------find previous roots -----------
#
#
        if root1 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root1 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root1 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root1 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root1 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root1 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root1 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root1 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root1 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root1 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root1 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root1 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root1 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root1 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root1 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root1 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root1 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root1 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root1 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root1 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root1 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root2 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root2 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root2 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root2 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root2 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root2 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root2 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root2 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root2 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root2 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root2 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root2 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root2 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root2 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root2 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root2 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root2 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root2 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root2 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root2 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root2 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root3 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root3 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root3 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root3 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root3 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root3 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root3 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root3 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root3 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root3 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root3 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root3 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root3 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root3 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root3 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root3 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root3 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root3 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root3 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root3 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root3 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root4 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root4 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root4 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root4 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root4 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root4 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root4 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root4 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root4 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root4 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root4 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root4 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root4 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root4 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root4 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root4 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root4 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root4 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root4 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root4 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root4 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root5 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root5 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root5 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root5 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root5 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root5 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root5 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root5 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root5 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root5 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root5 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root5 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root5 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root5 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root5 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root5 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root5 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root5 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root5 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root5 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root5 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root6 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root6 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root6 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root6 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root6 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root6 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root6 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root6 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root6 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root6 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root6 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root6 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root6 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root6 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root6 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root6 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root6 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root6 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root6 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root6 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root6 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root7 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root7 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root7 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root7 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root7 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root7 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root7 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root7 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root7 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root7 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root7 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root7 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root7 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root7 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root7 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root7 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root7 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root7 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root7 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root7 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root7 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root8 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root8 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root8 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root8 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root8 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root8 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root8 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root8 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root8 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root8 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root8 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root8 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root8 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root8 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root8 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root8 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root8 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root8 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root8 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root8 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root8 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root9 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root9 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root9 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root9 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root9 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root9 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root9 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root9 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root9 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root9 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root9 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root9 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root9 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root9 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root9 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root9 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root9 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root9 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root9 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root9 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root9 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root10 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root10 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root10 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root10 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root10 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root10 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root10 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root10 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root10 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root10 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root10 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root10 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root10 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root10 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root10 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root10 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root10 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root10 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root10 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root10 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root10 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root11 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root11 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root11 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root11 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root11 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root11 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root11 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root11 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root11 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root11 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root11 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root11 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root11 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root11 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root11 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root11 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root11 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root11 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root11 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root11 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root11 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
# ----------------find close to current -----------
#
     do spdim2
#
     lcount+=1.0
#
     if lcount > 12.0
     exit
     endif
#
      emax=100000.0
#
      icount=0.0
#
      do spdim20
#
      icount+=1.0
#
      if spdim20 == 1
      ediff=omega-Aeig1
      endif
      if spdim20 == 2
      ediff=omega-Aeig2
      endif
      if spdim20 == 3
      ediff=omega-Aeig3
      endif
      if spdim20 == 4
      ediff=omega-Aeig4
      endif
      if spdim20 == 5
      ediff=omega-Aeig5
      endif
      if spdim20 == 6
      ediff=omega-Aeig6
      endif
      if spdim20 == 7
      ediff=omega-Aeig7
      endif
      if spdim20 == 8
      ediff=omega-Aeig8
      endif
      if spdim20 == 9
      ediff=omega-Aeig9
      endif
      if spdim20 == 10
      ediff=omega-Aeig10
      endif
      if spdim20 == 11
      ediff=omega-Aeig11
      endif
      if spdim20 == 12
      ediff=omega-Aeig12
      endif
      if spdim20 == 13
      ediff=omega-Aeig13
      endif
      if spdim20 == 14
      ediff=omega-Aeig14
      endif
      if spdim20 == 15
      ediff=omega-Aeig15
      endif
      if spdim20 == 16
      ediff=omega-Aeig16
      endif
      if spdim20 == 17
      ediff=omega-Aeig17
      endif
      if spdim20 == 18
      ediff=omega-Aeig18
      endif
      if spdim20 == 19
      ediff=omega-Aeig19
      endif
      if spdim20 == 20
      ediff=omega-Aeig20
      endif
#
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < emax
      emax=ediff
      egvmax=icount
      endif
#
      enddo spdim20
#
#
      if egvmax == 1.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 2.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 3.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 4.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 5.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 6.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 7.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 8.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 9.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 10.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 11.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 12.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 13.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 14.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 15.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 16.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 17.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 18.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 19.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 20.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
     enddo spdim2
#
#
     ENDPROC FNDVECS
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     PROC GSCHMIDT
#
#
#------2 vectors -------------------------------
#
     etemp2_1=V2_1
     etemp2_2=V2_2
     etemp2_3=V2_3
     etemp2_4=V2_4
     etemp2_5=V2_5
     etemp2_6=V2_6
     etemp2_7=V2_7
     etemp2_8=V2_8
     etemp2_9=V2_9
     etemp2_10=V2_10
     etemp2_11=V2_11
     etemp2_12=V2_12
     etemp2_13=V2_13
     etemp2_14=V2_14
     etemp2_15=V2_15
     etemp2_16=V2_16
     etemp2_17=V2_17
     etemp2_18=V2_18
     etemp2_19=V2_19
     etemp2_20=V2_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V2_1+=Vtemp_1
     V2_2+=Vtemp_2
     V2_3+=Vtemp_3
     V2_4+=Vtemp_4
     V2_5+=Vtemp_5
     V2_6+=Vtemp_6
     V2_7+=Vtemp_7
     V2_8+=Vtemp_8
     V2_9+=Vtemp_9
     V2_10+=Vtemp_10
     V2_11+=Vtemp_11
     V2_12+=Vtemp_12
     V2_13+=Vtemp_13
     V2_14+=Vtemp_14
     V2_15+=Vtemp_15
     V2_16+=Vtemp_16
     V2_17+=Vtemp_17
     V2_18+=Vtemp_18
     V2_19+=Vtemp_19
     V2_20+=Vtemp_20
#
#
     Vtemp_1=V2_1
     Vtemp_2=V2_2
     Vtemp_3=V2_3
     Vtemp_4=V2_4
     Vtemp_5=V2_5
     Vtemp_6=V2_6
     Vtemp_7=V2_7
     Vtemp_8=V2_8
     Vtemp_9=V2_9
     Vtemp_10=V2_10
     Vtemp_11=V2_11
     Vtemp_12=V2_12
     Vtemp_13=V2_13
     Vtemp_14=V2_14
     Vtemp_15=V2_15
     Vtemp_16=V2_16
     Vtemp_17=V2_17
     Vtemp_18=V2_18
     Vtemp_19=V2_19
     Vtemp_20=V2_20
#
     sqr=0.0
#
     etemp=V2_1*Vtemp_1
     sqr+=etemp
     etemp=V2_2*Vtemp_2
     sqr+=etemp
     etemp=V2_3*Vtemp_3
     sqr+=etemp
     etemp=V2_4*Vtemp_4
     sqr+=etemp
     etemp=V2_5*Vtemp_5
     sqr+=etemp
     etemp=V2_6*Vtemp_6
     sqr+=etemp
     etemp=V2_7*Vtemp_7
     sqr+=etemp
     etemp=V2_8*Vtemp_8
     sqr+=etemp
     etemp=V2_9*Vtemp_9
     sqr+=etemp
     etemp=V2_10*Vtemp_10
     sqr+=etemp
     etemp=V2_11*Vtemp_11
     sqr+=etemp
     etemp=V2_12*Vtemp_12
     sqr+=etemp
     etemp=V2_13*Vtemp_13
     sqr+=etemp
     etemp=V2_14*Vtemp_14
     sqr+=etemp
     etemp=V2_15*Vtemp_15
     sqr+=etemp
     etemp=V2_16*Vtemp_16
     sqr+=etemp
     etemp=V2_17*Vtemp_17
     sqr+=etemp
     etemp=V2_18*Vtemp_18
     sqr+=etemp
     etemp=V2_19*Vtemp_19
     sqr+=etemp
     etemp=V2_20*Vtemp_20
     sqr+=etemp
#
#       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V2_1*=sqr2
     V2_2*=sqr2
     V2_3*=sqr2
     V2_4*=sqr2
     V2_5*=sqr2
     V2_6*=sqr2
     V2_7*=sqr2
     V2_8*=sqr2
     V2_9*=sqr2
     V2_10*=sqr2
     V2_11*=sqr2
     V2_12*=sqr2
     V2_13*=sqr2
     V2_14*=sqr2
     V2_15*=sqr2
     V2_16*=sqr2
     V2_17*=sqr2
     V2_18*=sqr2
     V2_19*=sqr2
     V2_20*=sqr2
#
#------3 vectors -------------------------------
#
     etemp2_1=V3_1
     etemp2_2=V3_2
     etemp2_3=V3_3
     etemp2_4=V3_4
     etemp2_5=V3_5
     etemp2_6=V3_6
     etemp2_7=V3_7
     etemp2_8=V3_8
     etemp2_9=V3_9
     etemp2_10=V3_10
     etemp2_11=V3_11
     etemp2_12=V3_12
     etemp2_13=V3_13
     etemp2_14=V3_14
     etemp2_15=V3_15
     etemp2_16=V3_16
     etemp2_17=V3_17
     etemp2_18=V3_18
     etemp2_19=V3_19
     etemp2_20=V3_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V3_1+=Vtemp_1
     V3_2+=Vtemp_2
     V3_3+=Vtemp_3
     V3_4+=Vtemp_4
     V3_5+=Vtemp_5
     V3_6+=Vtemp_6
     V3_7+=Vtemp_7
     V3_8+=Vtemp_8
     V3_9+=Vtemp_9
     V3_10+=Vtemp_10
     V3_11+=Vtemp_11
     V3_12+=Vtemp_12
     V3_13+=Vtemp_13
     V3_14+=Vtemp_14
     V3_15+=Vtemp_15
     V3_16+=Vtemp_16
     V3_17+=Vtemp_17
     V3_18+=Vtemp_18
     V3_19+=Vtemp_19
     V3_20+=Vtemp_20
#
#
     etemp2_1=V3_1
     etemp2_2=V3_2
     etemp2_3=V3_3
     etemp2_4=V3_4
     etemp2_5=V3_5
     etemp2_6=V3_6
     etemp2_7=V3_7
     etemp2_8=V3_8
     etemp2_9=V3_9
     etemp2_10=V3_10
     etemp2_11=V3_11
     etemp2_12=V3_12
     etemp2_13=V3_13
     etemp2_14=V3_14
     etemp2_15=V3_15
     etemp2_16=V3_16
     etemp2_17=V3_17
     etemp2_18=V3_18
     etemp2_19=V3_19
     etemp2_20=V3_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V3_1+=Vtemp_1
     V3_2+=Vtemp_2
     V3_3+=Vtemp_3
     V3_4+=Vtemp_4
     V3_5+=Vtemp_5
     V3_6+=Vtemp_6
     V3_7+=Vtemp_7
     V3_8+=Vtemp_8
     V3_9+=Vtemp_9
     V3_10+=Vtemp_10
     V3_11+=Vtemp_11
     V3_12+=Vtemp_12
     V3_13+=Vtemp_13
     V3_14+=Vtemp_14
     V3_15+=Vtemp_15
     V3_16+=Vtemp_16
     V3_17+=Vtemp_17
     V3_18+=Vtemp_18
     V3_19+=Vtemp_19
     V3_20+=Vtemp_20
#
#
     Vtemp_1=V3_1
     Vtemp_2=V3_2
     Vtemp_3=V3_3
     Vtemp_4=V3_4
     Vtemp_5=V3_5
     Vtemp_6=V3_6
     Vtemp_7=V3_7
     Vtemp_8=V3_8
     Vtemp_9=V3_9
     Vtemp_10=V3_10
     Vtemp_11=V3_11
     Vtemp_12=V3_12
     Vtemp_13=V3_13
     Vtemp_14=V3_14
     Vtemp_15=V3_15
     Vtemp_16=V3_16
     Vtemp_17=V3_17
     Vtemp_18=V3_18
     Vtemp_19=V3_19
     Vtemp_20=V3_20
#
     sqr=0.0
#
     etemp=V3_1*Vtemp_1
     sqr+=etemp
     etemp=V3_2*Vtemp_2
     sqr+=etemp
     etemp=V3_3*Vtemp_3
     sqr+=etemp
     etemp=V3_4*Vtemp_4
     sqr+=etemp
     etemp=V3_5*Vtemp_5
     sqr+=etemp
     etemp=V3_6*Vtemp_6
     sqr+=etemp
     etemp=V3_7*Vtemp_7
     sqr+=etemp
     etemp=V3_8*Vtemp_8
     sqr+=etemp
     etemp=V3_9*Vtemp_9
     sqr+=etemp
     etemp=V3_10*Vtemp_10
     sqr+=etemp
     etemp=V3_11*Vtemp_11
     sqr+=etemp
     etemp=V3_12*Vtemp_12
     sqr+=etemp
     etemp=V3_13*Vtemp_13
     sqr+=etemp
     etemp=V3_14*Vtemp_14
     sqr+=etemp
     etemp=V3_15*Vtemp_15
     sqr+=etemp
     etemp=V3_16*Vtemp_16
     sqr+=etemp
     etemp=V3_17*Vtemp_17
     sqr+=etemp
     etemp=V3_18*Vtemp_18
     sqr+=etemp
     etemp=V3_19*Vtemp_19
     sqr+=etemp
     etemp=V3_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V3_1*=sqr2
     V3_2*=sqr2
     V3_3*=sqr2
     V3_4*=sqr2
     V3_5*=sqr2
     V3_6*=sqr2
     V3_7*=sqr2
     V3_8*=sqr2
     V3_9*=sqr2
     V3_10*=sqr2
     V3_11*=sqr2
     V3_12*=sqr2
     V3_13*=sqr2
     V3_14*=sqr2
     V3_15*=sqr2
     V3_16*=sqr2
     V3_17*=sqr2
     V3_18*=sqr2
     V3_19*=sqr2
     V3_20*=sqr2
#
#------4 vectors -------------------------------
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     Vtemp_1=V4_1
     Vtemp_2=V4_2
     Vtemp_3=V4_3
     Vtemp_4=V4_4
     Vtemp_5=V4_5
     Vtemp_6=V4_6
     Vtemp_7=V4_7
     Vtemp_8=V4_8
     Vtemp_9=V4_9
     Vtemp_10=V4_10
     Vtemp_11=V4_11
     Vtemp_12=V4_12
     Vtemp_13=V4_13
     Vtemp_14=V4_14
     Vtemp_15=V4_15
     Vtemp_16=V4_16
     Vtemp_17=V4_17
     Vtemp_18=V4_18
     Vtemp_19=V4_19
     Vtemp_20=V4_20
#
     sqr=0.0
#
     etemp=V4_1*Vtemp_1
     sqr+=etemp
     etemp=V4_2*Vtemp_2
     sqr+=etemp
     etemp=V4_3*Vtemp_3
     sqr+=etemp
     etemp=V4_4*Vtemp_4
     sqr+=etemp
     etemp=V4_5*Vtemp_5
     sqr+=etemp
     etemp=V4_6*Vtemp_6
     sqr+=etemp
     etemp=V4_7*Vtemp_7
     sqr+=etemp
     etemp=V4_8*Vtemp_8
     sqr+=etemp
     etemp=V4_9*Vtemp_9
     sqr+=etemp
     etemp=V4_10*Vtemp_10
     sqr+=etemp
     etemp=V4_11*Vtemp_11
     sqr+=etemp
     etemp=V4_12*Vtemp_12
     sqr+=etemp
     etemp=V4_13*Vtemp_13
     sqr+=etemp
     etemp=V4_14*Vtemp_14
     sqr+=etemp
     etemp=V4_15*Vtemp_15
     sqr+=etemp
     etemp=V4_16*Vtemp_16
     sqr+=etemp
     etemp=V4_17*Vtemp_17
     sqr+=etemp
     etemp=V4_18*Vtemp_18
     sqr+=etemp
     etemp=V4_19*Vtemp_19
     sqr+=etemp
     etemp=V4_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V4_1*=sqr2
     V4_2*=sqr2
     V4_3*=sqr2
     V4_4*=sqr2
     V4_5*=sqr2
     V4_6*=sqr2
     V4_7*=sqr2
     V4_8*=sqr2
     V4_9*=sqr2
     V4_10*=sqr2
     V4_11*=sqr2
     V4_12*=sqr2
     V4_13*=sqr2
     V4_14*=sqr2
     V4_15*=sqr2
     V4_16*=sqr2
     V4_17*=sqr2
     V4_18*=sqr2
     V4_19*=sqr2
     V4_20*=sqr2
#
#------5 vectors -------------------------------
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     Vtemp_1=V5_1
     Vtemp_2=V5_2
     Vtemp_3=V5_3
     Vtemp_4=V5_4
     Vtemp_5=V5_5
     Vtemp_6=V5_6
     Vtemp_7=V5_7
     Vtemp_8=V5_8
     Vtemp_9=V5_9
     Vtemp_10=V5_10
     Vtemp_11=V5_11
     Vtemp_12=V5_12
     Vtemp_13=V5_13
     Vtemp_14=V5_14
     Vtemp_15=V5_15
     Vtemp_16=V5_16
     Vtemp_17=V5_17
     Vtemp_18=V5_18
     Vtemp_19=V5_19
     Vtemp_20=V5_20
#
     sqr=0.0
#
     etemp=V5_1*Vtemp_1
     sqr+=etemp
     etemp=V5_2*Vtemp_2
     sqr+=etemp
     etemp=V5_3*Vtemp_3
     sqr+=etemp
     etemp=V5_4*Vtemp_4
     sqr+=etemp
     etemp=V5_5*Vtemp_5
     sqr+=etemp
     etemp=V5_6*Vtemp_6
     sqr+=etemp
     etemp=V5_7*Vtemp_7
     sqr+=etemp
     etemp=V5_8*Vtemp_8
     sqr+=etemp
     etemp=V5_9*Vtemp_9
     sqr+=etemp
     etemp=V5_10*Vtemp_10
     sqr+=etemp
     etemp=V5_11*Vtemp_11
     sqr+=etemp
     etemp=V5_12*Vtemp_12
     sqr+=etemp
     etemp=V5_13*Vtemp_13
     sqr+=etemp
     etemp=V5_14*Vtemp_14
     sqr+=etemp
     etemp=V5_15*Vtemp_15
     sqr+=etemp
     etemp=V5_16*Vtemp_16
     sqr+=etemp
     etemp=V5_17*Vtemp_17
     sqr+=etemp
     etemp=V5_18*Vtemp_18
     sqr+=etemp
     etemp=V5_19*Vtemp_19
     sqr+=etemp
     etemp=V5_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V5_1*=sqr2
     V5_2*=sqr2
     V5_3*=sqr2
     V5_4*=sqr2
     V5_5*=sqr2
     V5_6*=sqr2
     V5_7*=sqr2
     V5_8*=sqr2
     V5_9*=sqr2
     V5_10*=sqr2
     V5_11*=sqr2
     V5_12*=sqr2
     V5_13*=sqr2
     V5_14*=sqr2
     V5_15*=sqr2
     V5_16*=sqr2
     V5_17*=sqr2
     V5_18*=sqr2
     V5_19*=sqr2
     V5_20*=sqr2
#
#------6 vectors -------------------------------
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     Vtemp_1=V6_1
     Vtemp_2=V6_2
     Vtemp_3=V6_3
     Vtemp_4=V6_4
     Vtemp_5=V6_5
     Vtemp_6=V6_6
     Vtemp_7=V6_7
     Vtemp_8=V6_8
     Vtemp_9=V6_9
     Vtemp_10=V6_10
     Vtemp_11=V6_11
     Vtemp_12=V6_12
     Vtemp_13=V6_13
     Vtemp_14=V6_14
     Vtemp_15=V6_15
     Vtemp_16=V6_16
     Vtemp_17=V6_17
     Vtemp_18=V6_18
     Vtemp_19=V6_19
     Vtemp_20=V6_20
#
     sqr=0.0
#
     etemp=V6_1*Vtemp_1
     sqr+=etemp
     etemp=V6_2*Vtemp_2
     sqr+=etemp
     etemp=V6_3*Vtemp_3
     sqr+=etemp
     etemp=V6_4*Vtemp_4
     sqr+=etemp
     etemp=V6_5*Vtemp_5
     sqr+=etemp
     etemp=V6_6*Vtemp_6
     sqr+=etemp
     etemp=V6_7*Vtemp_7
     sqr+=etemp
     etemp=V6_8*Vtemp_8
     sqr+=etemp
     etemp=V6_9*Vtemp_9
     sqr+=etemp
     etemp=V6_10*Vtemp_10
     sqr+=etemp
     etemp=V6_11*Vtemp_11
     sqr+=etemp
     etemp=V6_12*Vtemp_12
     sqr+=etemp
     etemp=V6_13*Vtemp_13
     sqr+=etemp
     etemp=V6_14*Vtemp_14
     sqr+=etemp
     etemp=V6_15*Vtemp_15
     sqr+=etemp
     etemp=V6_16*Vtemp_16
     sqr+=etemp
     etemp=V6_17*Vtemp_17
     sqr+=etemp
     etemp=V6_18*Vtemp_18
     sqr+=etemp
     etemp=V6_19*Vtemp_19
     sqr+=etemp
     etemp=V6_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V6_1*=sqr2
     V6_2*=sqr2
     V6_3*=sqr2
     V6_4*=sqr2
     V6_5*=sqr2
     V6_6*=sqr2
     V6_7*=sqr2
     V6_8*=sqr2
     V6_9*=sqr2
     V6_10*=sqr2
     V6_11*=sqr2
     V6_12*=sqr2
     V6_13*=sqr2
     V6_14*=sqr2
     V6_15*=sqr2
     V6_16*=sqr2
     V6_17*=sqr2
     V6_18*=sqr2
     V6_19*=sqr2
     V6_20*=sqr2
#
#------7 vectors -------------------------------
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     Vtemp_1=V7_1
     Vtemp_2=V7_2
     Vtemp_3=V7_3
     Vtemp_4=V7_4
     Vtemp_5=V7_5
     Vtemp_6=V7_6
     Vtemp_7=V7_7
     Vtemp_8=V7_8
     Vtemp_9=V7_9
     Vtemp_10=V7_10
     Vtemp_11=V7_11
     Vtemp_12=V7_12
     Vtemp_13=V7_13
     Vtemp_14=V7_14
     Vtemp_15=V7_15
     Vtemp_16=V7_16
     Vtemp_17=V7_17
     Vtemp_18=V7_18
     Vtemp_19=V7_19
     Vtemp_20=V7_20
#
     sqr=0.0
#
     etemp=V7_1*Vtemp_1
     sqr+=etemp
     etemp=V7_2*Vtemp_2
     sqr+=etemp
     etemp=V7_3*Vtemp_3
     sqr+=etemp
     etemp=V7_4*Vtemp_4
     sqr+=etemp
     etemp=V7_5*Vtemp_5
     sqr+=etemp
     etemp=V7_6*Vtemp_6
     sqr+=etemp
     etemp=V7_7*Vtemp_7
     sqr+=etemp
     etemp=V7_8*Vtemp_8
     sqr+=etemp
     etemp=V7_9*Vtemp_9
     sqr+=etemp
     etemp=V7_10*Vtemp_10
     sqr+=etemp
     etemp=V7_11*Vtemp_11
     sqr+=etemp
     etemp=V7_12*Vtemp_12
     sqr+=etemp
     etemp=V7_13*Vtemp_13
     sqr+=etemp
     etemp=V7_14*Vtemp_14
     sqr+=etemp
     etemp=V7_15*Vtemp_15
     sqr+=etemp
     etemp=V7_16*Vtemp_16
     sqr+=etemp
     etemp=V7_17*Vtemp_17
     sqr+=etemp
     etemp=V7_18*Vtemp_18
     sqr+=etemp
     etemp=V7_19*Vtemp_19
     sqr+=etemp
     etemp=V7_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V7_1*=sqr2
     V7_2*=sqr2
     V7_3*=sqr2
     V7_4*=sqr2
     V7_5*=sqr2
     V7_6*=sqr2
     V7_7*=sqr2
     V7_8*=sqr2
     V7_9*=sqr2
     V7_10*=sqr2
     V7_11*=sqr2
     V7_12*=sqr2
     V7_13*=sqr2
     V7_14*=sqr2
     V7_15*=sqr2
     V7_16*=sqr2
     V7_17*=sqr2
     V7_18*=sqr2
     V7_19*=sqr2
     V7_20*=sqr2
#
#------8 vectors -------------------------------
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     Vtemp_1=V8_1
     Vtemp_2=V8_2
     Vtemp_3=V8_3
     Vtemp_4=V8_4
     Vtemp_5=V8_5
     Vtemp_6=V8_6
     Vtemp_7=V8_7
     Vtemp_8=V8_8
     Vtemp_9=V8_9
     Vtemp_10=V8_10
     Vtemp_11=V8_11
     Vtemp_12=V8_12
     Vtemp_13=V8_13
     Vtemp_14=V8_14
     Vtemp_15=V8_15
     Vtemp_16=V8_16
     Vtemp_17=V8_17
     Vtemp_18=V8_18
     Vtemp_19=V8_19
     Vtemp_20=V8_20
#
     sqr=0.0
#
     etemp=V8_1*Vtemp_1
     sqr+=etemp
     etemp=V8_2*Vtemp_2
     sqr+=etemp
     etemp=V8_3*Vtemp_3
     sqr+=etemp
     etemp=V8_4*Vtemp_4
     sqr+=etemp
     etemp=V8_5*Vtemp_5
     sqr+=etemp
     etemp=V8_6*Vtemp_6
     sqr+=etemp
     etemp=V8_7*Vtemp_7
     sqr+=etemp
     etemp=V8_8*Vtemp_8
     sqr+=etemp
     etemp=V8_9*Vtemp_9
     sqr+=etemp
     etemp=V8_10*Vtemp_10
     sqr+=etemp
     etemp=V8_11*Vtemp_11
     sqr+=etemp
     etemp=V8_12*Vtemp_12
     sqr+=etemp
     etemp=V8_13*Vtemp_13
     sqr+=etemp
     etemp=V8_14*Vtemp_14
     sqr+=etemp
     etemp=V8_15*Vtemp_15
     sqr+=etemp
     etemp=V8_16*Vtemp_16
     sqr+=etemp
     etemp=V8_17*Vtemp_17
     sqr+=etemp
     etemp=V8_18*Vtemp_18
     sqr+=etemp
     etemp=V8_19*Vtemp_19
     sqr+=etemp
     etemp=V8_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V8_1*=sqr2
     V8_2*=sqr2
     V8_3*=sqr2
     V8_4*=sqr2
     V8_5*=sqr2
     V8_6*=sqr2
     V8_7*=sqr2
     V8_8*=sqr2
     V8_9*=sqr2
     V8_10*=sqr2
     V8_11*=sqr2
     V8_12*=sqr2
     V8_13*=sqr2
     V8_14*=sqr2
     V8_15*=sqr2
     V8_16*=sqr2
     V8_17*=sqr2
     V8_18*=sqr2
     V8_19*=sqr2
     V8_20*=sqr2
#
#------9 vectors -------------------------------
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     Vtemp_1=V9_1
     Vtemp_2=V9_2
     Vtemp_3=V9_3
     Vtemp_4=V9_4
     Vtemp_5=V9_5
     Vtemp_6=V9_6
     Vtemp_7=V9_7
     Vtemp_8=V9_8
     Vtemp_9=V9_9
     Vtemp_10=V9_10
     Vtemp_11=V9_11
     Vtemp_12=V9_12
     Vtemp_13=V9_13
     Vtemp_14=V9_14
     Vtemp_15=V9_15
     Vtemp_16=V9_16
     Vtemp_17=V9_17
     Vtemp_18=V9_18
     Vtemp_19=V9_19
     Vtemp_20=V9_20
#
     sqr=0.0
#
     etemp=V9_1*Vtemp_1
     sqr+=etemp
     etemp=V9_2*Vtemp_2
     sqr+=etemp
     etemp=V9_3*Vtemp_3
     sqr+=etemp
     etemp=V9_4*Vtemp_4
     sqr+=etemp
     etemp=V9_5*Vtemp_5
     sqr+=etemp
     etemp=V9_6*Vtemp_6
     sqr+=etemp
     etemp=V9_7*Vtemp_7
     sqr+=etemp
     etemp=V9_8*Vtemp_8
     sqr+=etemp
     etemp=V9_9*Vtemp_9
     sqr+=etemp
     etemp=V9_10*Vtemp_10
     sqr+=etemp
     etemp=V9_11*Vtemp_11
     sqr+=etemp
     etemp=V9_12*Vtemp_12
     sqr+=etemp
     etemp=V9_13*Vtemp_13
     sqr+=etemp
     etemp=V9_14*Vtemp_14
     sqr+=etemp
     etemp=V9_15*Vtemp_15
     sqr+=etemp
     etemp=V9_16*Vtemp_16
     sqr+=etemp
     etemp=V9_17*Vtemp_17
     sqr+=etemp
     etemp=V9_18*Vtemp_18
     sqr+=etemp
     etemp=V9_19*Vtemp_19
     sqr+=etemp
     etemp=V9_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V9_1*=sqr2
     V9_2*=sqr2
     V9_3*=sqr2
     V9_4*=sqr2
     V9_5*=sqr2
     V9_6*=sqr2
     V9_7*=sqr2
     V9_8*=sqr2
     V9_9*=sqr2
     V9_10*=sqr2
     V9_11*=sqr2
     V9_12*=sqr2
     V9_13*=sqr2
     V9_14*=sqr2
     V9_15*=sqr2
     V9_16*=sqr2
     V9_17*=sqr2
     V9_18*=sqr2
     V9_19*=sqr2
     V9_20*=sqr2
#
#------10 vectors -------------------------------
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     Vtemp_1=V10_1
     Vtemp_2=V10_2
     Vtemp_3=V10_3
     Vtemp_4=V10_4
     Vtemp_5=V10_5
     Vtemp_6=V10_6
     Vtemp_7=V10_7
     Vtemp_8=V10_8
     Vtemp_9=V10_9
     Vtemp_10=V10_10
     Vtemp_11=V10_11
     Vtemp_12=V10_12
     Vtemp_13=V10_13
     Vtemp_14=V10_14
     Vtemp_15=V10_15
     Vtemp_16=V10_16
     Vtemp_17=V10_17
     Vtemp_18=V10_18
     Vtemp_19=V10_19
     Vtemp_20=V10_20
#
     sqr=0.0
#
     etemp=V10_1*Vtemp_1
     sqr+=etemp
     etemp=V10_2*Vtemp_2
     sqr+=etemp
     etemp=V10_3*Vtemp_3
     sqr+=etemp
     etemp=V10_4*Vtemp_4
     sqr+=etemp
     etemp=V10_5*Vtemp_5
     sqr+=etemp
     etemp=V10_6*Vtemp_6
     sqr+=etemp
     etemp=V10_7*Vtemp_7
     sqr+=etemp
     etemp=V10_8*Vtemp_8
     sqr+=etemp
     etemp=V10_9*Vtemp_9
     sqr+=etemp
     etemp=V10_10*Vtemp_10
     sqr+=etemp
     etemp=V10_11*Vtemp_11
     sqr+=etemp
     etemp=V10_12*Vtemp_12
     sqr+=etemp
     etemp=V10_13*Vtemp_13
     sqr+=etemp
     etemp=V10_14*Vtemp_14
     sqr+=etemp
     etemp=V10_15*Vtemp_15
     sqr+=etemp
     etemp=V10_16*Vtemp_16
     sqr+=etemp
     etemp=V10_17*Vtemp_17
     sqr+=etemp
     etemp=V10_18*Vtemp_18
     sqr+=etemp
     etemp=V10_19*Vtemp_19
     sqr+=etemp
     etemp=V10_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V10_1*=sqr2
     V10_2*=sqr2
     V10_3*=sqr2
     V10_4*=sqr2
     V10_5*=sqr2
     V10_6*=sqr2
     V10_7*=sqr2
     V10_8*=sqr2
     V10_9*=sqr2
     V10_10*=sqr2
     V10_11*=sqr2
     V10_12*=sqr2
     V10_13*=sqr2
     V10_14*=sqr2
     V10_15*=sqr2
     V10_16*=sqr2
     V10_17*=sqr2
     V10_18*=sqr2
     V10_19*=sqr2
     V10_20*=sqr2
#
#------11 vectors -------------------------------
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V10_1*etemp2_1
     sqr+=etemp
     etemp=V10_2*etemp2_2
     sqr+=etemp
     etemp=V10_3*etemp2_3
     sqr+=etemp
     etemp=V10_4*etemp2_4
     sqr+=etemp
     etemp=V10_5*etemp2_5
     sqr+=etemp
     etemp=V10_6*etemp2_6
     sqr+=etemp
     etemp=V10_7*etemp2_7
     sqr+=etemp
     etemp=V10_8*etemp2_8
     sqr+=etemp
     etemp=V10_9*etemp2_9
     sqr+=etemp
     etemp=V10_10*etemp2_10
     sqr+=etemp
     etemp=V10_11*etemp2_11
     sqr+=etemp
     etemp=V10_12*etemp2_12
     sqr+=etemp
     etemp=V10_13*etemp2_13
     sqr+=etemp
     etemp=V10_14*etemp2_14
     sqr+=etemp
     etemp=V10_15*etemp2_15
     sqr+=etemp
     etemp=V10_16*etemp2_16
     sqr+=etemp
     etemp=V10_17*etemp2_17
     sqr+=etemp
     etemp=V10_18*etemp2_18
     sqr+=etemp
     etemp=V10_19*etemp2_19
     sqr+=etemp
     etemp=V10_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V10_1*sqr
     Vtemp_2=V10_2*sqr
     Vtemp_3=V10_3*sqr
     Vtemp_4=V10_4*sqr
     Vtemp_5=V10_5*sqr
     Vtemp_6=V10_6*sqr
     Vtemp_7=V10_7*sqr
     Vtemp_8=V10_8*sqr
     Vtemp_9=V10_9*sqr
     Vtemp_10=V10_10*sqr
     Vtemp_11=V10_11*sqr
     Vtemp_12=V10_12*sqr
     Vtemp_13=V10_13*sqr
     Vtemp_14=V10_14*sqr
     Vtemp_15=V10_15*sqr
     Vtemp_16=V10_16*sqr
     Vtemp_17=V10_17*sqr
     Vtemp_18=V10_18*sqr
     Vtemp_19=V10_19*sqr
     Vtemp_20=V10_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     Vtemp_1=V11_1
     Vtemp_2=V11_2
     Vtemp_3=V11_3
     Vtemp_4=V11_4
     Vtemp_5=V11_5
     Vtemp_6=V11_6
     Vtemp_7=V11_7
     Vtemp_8=V11_8
     Vtemp_9=V11_9
     Vtemp_10=V11_10
     Vtemp_11=V11_11
     Vtemp_12=V11_12
     Vtemp_13=V11_13
     Vtemp_14=V11_14
     Vtemp_15=V11_15
     Vtemp_16=V11_16
     Vtemp_17=V11_17
     Vtemp_18=V11_18
     Vtemp_19=V11_19
     Vtemp_20=V11_20
#
     sqr=0.0
#
     etemp=V11_1*Vtemp_1
     sqr+=etemp
     etemp=V11_2*Vtemp_2
     sqr+=etemp
     etemp=V11_3*Vtemp_3
     sqr+=etemp
     etemp=V11_4*Vtemp_4
     sqr+=etemp
     etemp=V11_5*Vtemp_5
     sqr+=etemp
     etemp=V11_6*Vtemp_6
     sqr+=etemp
     etemp=V11_7*Vtemp_7
     sqr+=etemp
     etemp=V11_8*Vtemp_8
     sqr+=etemp
     etemp=V11_9*Vtemp_9
     sqr+=etemp
     etemp=V11_10*Vtemp_10
     sqr+=etemp
     etemp=V11_11*Vtemp_11
     sqr+=etemp
     etemp=V11_12*Vtemp_12
     sqr+=etemp
     etemp=V11_13*Vtemp_13
     sqr+=etemp
     etemp=V11_14*Vtemp_14
     sqr+=etemp
     etemp=V11_15*Vtemp_15
     sqr+=etemp
     etemp=V11_16*Vtemp_16
     sqr+=etemp
     etemp=V11_17*Vtemp_17
     sqr+=etemp
     etemp=V11_18*Vtemp_18
     sqr+=etemp
     etemp=V11_19*Vtemp_19
     sqr+=etemp
     etemp=V11_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V11_1*=sqr2
     V11_2*=sqr2
     V11_3*=sqr2
     V11_4*=sqr2
     V11_5*=sqr2
     V11_6*=sqr2
     V11_7*=sqr2
     V11_8*=sqr2
     V11_9*=sqr2
     V11_10*=sqr2
     V11_11*=sqr2
     V11_12*=sqr2
     V11_13*=sqr2
     V11_14*=sqr2
     V11_15*=sqr2
     V11_16*=sqr2
     V11_17*=sqr2
     V11_18*=sqr2
     V11_19*=sqr2
     V11_20*=sqr2
#
#------12 vectors -------------------------------
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V10_1*etemp2_1
     sqr+=etemp
     etemp=V10_2*etemp2_2
     sqr+=etemp
     etemp=V10_3*etemp2_3
     sqr+=etemp
     etemp=V10_4*etemp2_4
     sqr+=etemp
     etemp=V10_5*etemp2_5
     sqr+=etemp
     etemp=V10_6*etemp2_6
     sqr+=etemp
     etemp=V10_7*etemp2_7
     sqr+=etemp
     etemp=V10_8*etemp2_8
     sqr+=etemp
     etemp=V10_9*etemp2_9
     sqr+=etemp
     etemp=V10_10*etemp2_10
     sqr+=etemp
     etemp=V10_11*etemp2_11
     sqr+=etemp
     etemp=V10_12*etemp2_12
     sqr+=etemp
     etemp=V10_13*etemp2_13
     sqr+=etemp
     etemp=V10_14*etemp2_14
     sqr+=etemp
     etemp=V10_15*etemp2_15
     sqr+=etemp
     etemp=V10_16*etemp2_16
     sqr+=etemp
     etemp=V10_17*etemp2_17
     sqr+=etemp
     etemp=V10_18*etemp2_18
     sqr+=etemp
     etemp=V10_19*etemp2_19
     sqr+=etemp
     etemp=V10_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V10_1*sqr
     Vtemp_2=V10_2*sqr
     Vtemp_3=V10_3*sqr
     Vtemp_4=V10_4*sqr
     Vtemp_5=V10_5*sqr
     Vtemp_6=V10_6*sqr
     Vtemp_7=V10_7*sqr
     Vtemp_8=V10_8*sqr
     Vtemp_9=V10_9*sqr
     Vtemp_10=V10_10*sqr
     Vtemp_11=V10_11*sqr
     Vtemp_12=V10_12*sqr
     Vtemp_13=V10_13*sqr
     Vtemp_14=V10_14*sqr
     Vtemp_15=V10_15*sqr
     Vtemp_16=V10_16*sqr
     Vtemp_17=V10_17*sqr
     Vtemp_18=V10_18*sqr
     Vtemp_19=V10_19*sqr
     Vtemp_20=V10_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V11_1*etemp2_1
     sqr+=etemp
     etemp=V11_2*etemp2_2
     sqr+=etemp
     etemp=V11_3*etemp2_3
     sqr+=etemp
     etemp=V11_4*etemp2_4
     sqr+=etemp
     etemp=V11_5*etemp2_5
     sqr+=etemp
     etemp=V11_6*etemp2_6
     sqr+=etemp
     etemp=V11_7*etemp2_7
     sqr+=etemp
     etemp=V11_8*etemp2_8
     sqr+=etemp
     etemp=V11_9*etemp2_9
     sqr+=etemp
     etemp=V11_10*etemp2_10
     sqr+=etemp
     etemp=V11_11*etemp2_11
     sqr+=etemp
     etemp=V11_12*etemp2_12
     sqr+=etemp
     etemp=V11_13*etemp2_13
     sqr+=etemp
     etemp=V11_14*etemp2_14
     sqr+=etemp
     etemp=V11_15*etemp2_15
     sqr+=etemp
     etemp=V11_16*etemp2_16
     sqr+=etemp
     etemp=V11_17*etemp2_17
     sqr+=etemp
     etemp=V11_18*etemp2_18
     sqr+=etemp
     etemp=V11_19*etemp2_19
     sqr+=etemp
     etemp=V11_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V11_1*sqr
     Vtemp_2=V11_2*sqr
     Vtemp_3=V11_3*sqr
     Vtemp_4=V11_4*sqr
     Vtemp_5=V11_5*sqr
     Vtemp_6=V11_6*sqr
     Vtemp_7=V11_7*sqr
     Vtemp_8=V11_8*sqr
     Vtemp_9=V11_9*sqr
     Vtemp_10=V11_10*sqr
     Vtemp_11=V11_11*sqr
     Vtemp_12=V11_12*sqr
     Vtemp_13=V11_13*sqr
     Vtemp_14=V11_14*sqr
     Vtemp_15=V11_15*sqr
     Vtemp_16=V11_16*sqr
     Vtemp_17=V11_17*sqr
     Vtemp_18=V11_18*sqr
     Vtemp_19=V11_19*sqr
     Vtemp_20=V11_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     Vtemp_1=V12_1
     Vtemp_2=V12_2
     Vtemp_3=V12_3
     Vtemp_4=V12_4
     Vtemp_5=V12_5
     Vtemp_6=V12_6
     Vtemp_7=V12_7
     Vtemp_8=V12_8
     Vtemp_9=V12_9
     Vtemp_10=V12_10
     Vtemp_11=V12_11
     Vtemp_12=V12_12
     Vtemp_13=V12_13
     Vtemp_14=V12_14
     Vtemp_15=V12_15
     Vtemp_16=V12_16
     Vtemp_17=V12_17
     Vtemp_18=V12_18
     Vtemp_19=V12_19
     Vtemp_20=V12_20
#
     sqr=0.0
#
     etemp=V12_1*Vtemp_1
     sqr+=etemp
     etemp=V12_2*Vtemp_2
     sqr+=etemp
     etemp=V12_3*Vtemp_3
     sqr+=etemp
     etemp=V12_4*Vtemp_4
     sqr+=etemp
     etemp=V12_5*Vtemp_5
     sqr+=etemp
     etemp=V12_6*Vtemp_6
     sqr+=etemp
     etemp=V12_7*Vtemp_7
     sqr+=etemp
     etemp=V12_8*Vtemp_8
     sqr+=etemp
     etemp=V12_9*Vtemp_9
     sqr+=etemp
     etemp=V12_10*Vtemp_10
     sqr+=etemp
     etemp=V12_11*Vtemp_11
     sqr+=etemp
     etemp=V12_12*Vtemp_12
     sqr+=etemp
     etemp=V12_13*Vtemp_13
     sqr+=etemp
     etemp=V12_14*Vtemp_14
     sqr+=etemp
     etemp=V12_15*Vtemp_15
     sqr+=etemp
     etemp=V12_16*Vtemp_16
     sqr+=etemp
     etemp=V12_17*Vtemp_17
     sqr+=etemp
     etemp=V12_18*Vtemp_18
     sqr+=etemp
     etemp=V12_19*Vtemp_19
     sqr+=etemp
     etemp=V12_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V12_1*=sqr2
     V12_2*=sqr2
     V12_3*=sqr2
     V12_4*=sqr2
     V12_5*=sqr2
     V12_6*=sqr2
     V12_7*=sqr2
     V12_8*=sqr2
     V12_9*=sqr2
     V12_10*=sqr2
     V12_11*=sqr2
     V12_12*=sqr2
     V12_13*=sqr2
     V12_14*=sqr2
     V12_15*=sqr2
     V12_16*=sqr2
     V12_17*=sqr2
     V12_18*=sqr2
     V12_19*=sqr2
     V12_20*=sqr2
#
     DO k20 
     DO j20 
#
        if j20 == 1 
           if k20 == 1 
              MYvev(k20,j20) = V1_1  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_1  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_1  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_1  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_1  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_1  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_1  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_1  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_1  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_1  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_1  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_1  
           endif 
        endif 
#
#
        if j20 == 2 
           if k20 == 1 
              MYvev(k20,j20) = V1_2  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_2  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_2  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_2  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_2  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_2  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_2  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_2  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_2  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_2  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_2  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_2  
           endif 
        endif 
#
#
        if j20 == 3 
           if k20 == 1 
              MYvev(k20,j20) = V1_3  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_3  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_3  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_3  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_3  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_3  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_3  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_3  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_3  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_3  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_3  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_3  
           endif 
        endif 
#
#
        if j20 == 4 
           if k20 == 1 
              MYvev(k20,j20) = V1_4  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_4  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_4  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_4  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_4  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_4  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_4  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_4  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_4  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_4  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_4  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_4  
           endif 
        endif 
#
#
        if j20 == 5 
           if k20 == 1 
              MYvev(k20,j20) = V1_5  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_5  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_5  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_5  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_5  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_5  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_5  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_5  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_5  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_5  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_5  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_5  
           endif 
        endif 
#
#
        if j20 == 6 
           if k20 == 1 
              MYvev(k20,j20) = V1_6  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_6  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_6  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_6  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_6  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_6  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_6  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_6  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_6  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_6  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_6  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_6  
           endif 
        endif 
#
#
        if j20 == 7 
           if k20 == 1 
              MYvev(k20,j20) = V1_7  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_7  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_7  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_7  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_7  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_7  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_7  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_7  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_7  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_7  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_7  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_7  
           endif 
        endif 
#
#
        if j20 == 8 
           if k20 == 1 
              MYvev(k20,j20) = V1_8  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_8  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_8  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_8  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_8  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_8  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_8  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_8  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_8  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_8  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_8  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_8  
           endif 
        endif 
#
#
        if j20 == 9 
           if k20 == 1 
              MYvev(k20,j20) = V1_9  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_9  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_9  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_9  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_9  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_9  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_9  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_9  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_9  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_9  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_9  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_9  
           endif 
        endif 
#
#
        if j20 == 10
           if k20 == 1 
              MYvev(k20,j20) = V1_10 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_10 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_10 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_10 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_10 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_10 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_10 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_10 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_10 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_10 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_10 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_10 
           endif 
        endif 
#
#
        if j20 == 11
           if k20 == 1 
              MYvev(k20,j20) = V1_11 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_11 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_11 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_11 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_11 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_11 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_11 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_11 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_11 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_11 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_11 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_11 
           endif 
        endif 
#
#
        if j20 == 12
           if k20 == 1 
              MYvev(k20,j20) = V1_12 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_12 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_12 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_12 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_12 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_12 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_12 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_12 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_12 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_12 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_12 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_12 
           endif 
        endif 
#
#
        if j20 == 13
           if k20 == 1 
              MYvev(k20,j20) = V1_13 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_13 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_13 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_13 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_13 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_13 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_13 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_13 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_13 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_13 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_13 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_13 
           endif 
        endif 
#
#
        if j20 == 14
           if k20 == 1 
              MYvev(k20,j20) = V1_14 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_14 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_14 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_14 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_14 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_14 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_14 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_14 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_14 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_14 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_14 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_14 
           endif 
        endif 
#
#
        if j20 == 15
           if k20 == 1 
              MYvev(k20,j20) = V1_15 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_15 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_15 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_15 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_15 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_15 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_15 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_15 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_15 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_15 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_15 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_15 
           endif 
        endif 
#
#
        if j20 == 16
           if k20 == 1 
              MYvev(k20,j20) = V1_16 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_16 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_16 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_16 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_16 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_16 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_16 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_16 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_16 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_16 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_16 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_16 
           endif 
        endif 
#
#
        if j20 == 17
           if k20 == 1 
              MYvev(k20,j20) = V1_17 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_17 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_17 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_17 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_17 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_17 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_17 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_17 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_17 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_17 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_17 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_17 
           endif 
        endif 
#
#
        if j20 == 18
           if k20 == 1 
              MYvev(k20,j20) = V1_18 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_18 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_18 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_18 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_18 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_18 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_18 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_18 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_18 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_18 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_18 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_18 
           endif 
        endif 
#
#
        if j20 == 19
           if k20 == 1 
              MYvev(k20,j20) = V1_19 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_19 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_19 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_19 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_19 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_19 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_19 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_19 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_19 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_19 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_19 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_19 
           endif 
        endif 
#
#
        if j20 == 20
           if k20 == 1 
              MYvev(k20,j20) = V1_20 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_20 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_20 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_20 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_20 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_20 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_20 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_20 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_20 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_20 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_20 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_20 
           endif 
        endif 
#
     ENDDO j20 
     ENDDO k20 
#
     ENDPROC GSCHMIDT
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      PROC TRANSFORM
#     -------------- 
#
      PARDO a, a1, i1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  taxai(a,kk1,a1,i1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             S2a_aah(a,kk1,a1,i1,k21) a 
                        t1axai(a,kk1,a1,i1) = S2a_aah(a,kk1,a1,i1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1axai(a,kk1,a1,i1)*= fact 
                        taxai(a,kk1,a1,i1) += t1axai(a,kk1,a1,i1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  gaxaiS(a,kk1,a1,i1,j20)          = taxai(a,kk1,a1,i1) 
                  PREPARE VTEMP2AA(a,kk1,a1,i1,j20) = gaxaiS(a,kk1,a1,i1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO a, a1, i1 
#
      PARDO b, b1, j1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  tbxbj(b,kk1,b1,j1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             S2b_bbh(b,kk1,b1,j1,k21) b 
                        t1bxbj(b,kk1,b1,j1) = S2b_bbh(b,kk1,b1,j1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1bxbj(b,kk1,b1,j1)*= fact 
                        tbxbj(b,kk1,b1,j1) += t1bxbj(b,kk1,b1,j1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  gbxbjS(b,kk1,b1,j1,j20)          = tbxbj(b,kk1,b1,j1) 
                  PREPARE VTEMP2BB(b,kk1,b1,j1,j20) = gbxbjS(b,kk1,b1,j1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO b, b1, j1 
#
      PARDO b, a1, i1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  tbxai(b,kk1,a1,i1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             S2b_aah(b,kk1,a1,i1,k21) b 
                        t1bxai(b,kk1,a1,i1) = S2b_aah(b,kk1,a1,i1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1bxai(b,kk1,a1,i1)*= fact 
                        tbxai(b,kk1,a1,i1) += t1bxai(b,kk1,a1,i1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  gbxaiS(b,kk1,a1,i1,j20)          = tbxai(b,kk1,a1,i1) 
                  PREPARE VTEMP2BA(b,kk1,a1,i1,j20) = gbxaiS(b,kk1,a1,i1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO b, a1, i1 
#
      PARDO a, b1, j1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  taxbj(a,kk1,b1,j1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             S2a_bbh(a,kk1,b1,j1,k21) a 
                        t1axbj(a,kk1,b1,j1) = S2a_bbh(a,kk1,b1,j1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1axbj(a,kk1,b1,j1)*= fact 
                        taxbj(a,kk1,b1,j1) += t1axbj(a,kk1,b1,j1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  gaxbjS(a,kk1,b1,j1,j20)          = taxbj(a,kk1,b1,j1) 
                  PREPARE VTEMP2AB(a,kk1,b1,j1,j20) = gaxbjS(a,kk1,b1,j1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO a, b1, j1 
#
      PARDO a   
            DO kk1 
            DO j20 
               if j20 <= 12 
                  tax(a,kk1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        GET         S1a_h(a,kk1,k21) 
                        t1ax(a,kk1) = S1a_h(a,kk1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1ax(a,kk1)*= fact 
                        tax(a,kk1) += t1ax(a,kk1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2axS(a,kk1,j20)       = tax(a,kk1) 
                  PUT VTEMP1A(a,kk1,j20) = t2axS(a,kk1,j20)
               endif # j20 <= 12 
            ENDDO j20 
            ENDDO kk1 
      ENDPARDO a   
#
      PARDO b   
            DO kk1 
            DO j20 
               if j20 <= 12 
                  tbx(b,kk1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        GET         S1b_h(b,kk1,k21) 
                        t1bx(b,kk1) = S1b_h(b,kk1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1bx(b,kk1)*= fact 
                        tbx(b,kk1) += t1bx(b,kk1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2bxS(b,kk1,j20)       = tbx(b,kk1) 
                  PUT VTEMP1B(b,kk1,j20) = t2bxS(b,kk1,j20)
               endif # j20 <= 12 
            ENDDO j20 
            ENDDO kk1 
      ENDPARDO b   
#
       sip_barrier
       server_barrier
#
#   rewrite temporary vectors into the usual ones
#
      PARDO a   
         DO kk1 
            DO k20 
               if k20 <= 12 
                  GET          VTEMP1A(a,kk1,k20) 
                  tax(a,kk1) = VTEMP1A(a,kk1,k20) 
                  do k21 
                     if k21 == k20 
                        taxs(a,kk1,k21)      = tax(a,kk1)  
                        PUT S1a_h(a,kk1,k21) = taxS(a,kk1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO a   
#
      PARDO b   
         DO kk1 
            DO k20 
               if k20 <= 12 
                  GET          VTEMP1B(b,kk1,k20) 
                  tbx(b,kk1) = VTEMP1B(b,kk1,k20) 
                  do k21 
                     if k21 == k20 
                        tbxs(b,kk1,k21)      = tbx(b,kk1)  
                        PUT S1b_h(b,kk1,k21) = tbxS(b,kk1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO b   
#
      PARDO a, a1, i1 
            DO kk1 
            DO k20 
               if k20 <= 12 
                  request              VTEMP2AA(a,kk1,a1,i1,k20) i1
                  taxai(a,kk1,a1,i1) = VTEMP2AA(a,kk1,a1,i1,k20) 
                  do k21 
                     if k21 == k20 
                        taxais(a,kk1,a1,i1,k21)          = taxai(a,kk1,a1,i1)  
                        prepare S2a_aah(a,kk1,a1,i1,k21) = taxaiS(a,kk1,a1,i1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO a, a1, i1 
#
      PARDO b, b1, j1 
            DO kk1 
            DO k20 
               if k20 <= 12 
                  request              VTEMP2BB(b,kk1,b1,j1,k20) j1
                  tbxbj(b,kk1,b1,j1) = VTEMP2BB(b,kk1,b1,j1,k20) 
                  do k21 
                     if k21 == k20 
                        tbxbjs(b,kk1,b1,j1,k21)          = tbxbj(b,kk1,b1,j1)  
                        prepare S2b_bbh(b,kk1,b1,j1,k21) = tbxbjS(b,kk1,b1,j1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO b, b1, j1 
#
      PARDO b, a1, i1 
            DO kk1 
            DO k20 
               if k20 <= 12 
                  request              VTEMP2BA(b,kk1,a1,i1,k20) i1
                  tbxai(b,kk1,a1,i1) = VTEMP2BA(b,kk1,a1,i1,k20) 
                  do k21 
                     if k21 == k20 
                        tbxais(b,kk1,a1,i1,k21)          = tbxai(b,kk1,a1,i1)  
                        prepare S2b_aah(b,kk1,a1,i1,k21) = tbxaiS(b,kk1,a1,i1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO b, a1, i1 
#
      PARDO a, b1, j1 
            DO kk1 
            DO k20 
               if k20 <= 12 
                  request              VTEMP2AB(a,kk1,b1,j1,k20) j1
                  taxbj(a,kk1,b1,j1) = VTEMP2AB(a,kk1,b1,j1,k20) 
                  do k21 
                     if k21 == k20 
                        taxbjs(a,kk1,b1,j1,k21)          = taxbj(a,kk1,b1,j1)  
                        prepare S2a_bbh(a,kk1,b1,j1,k21) = taxbjS(a,kk1,b1,j1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
            ENDDO kk1 
      ENDPARDO a, b1, j1 
#
      ENDPROC TRANSFORM
#
#======================================================
#
#      PROC Aconstr_tr_old 
#
#      CALL Aconstr1
#      CALL Aconstr2
#      CALL Aconstr3
#      CALL Aconstr4
#      CALL Aconstr5
#      CALL Aconstr6
#      CALL Aconstr7
#      CALL Aconstr8
#      CALL Aconstr9
#      CALL Aconstr10
#      CALL Aconstr11
#      CALL Aconstr12
#
#      sip_barrier
#      server_barrier
#
#    ENDPROC Aconstr_tr_old 
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      PROC TRANSFORM_HC
#     ----------------- 
#
      PARDO a, a1, i1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  taxai(a,kk1,a1,i1) = 0.0 
                  DO k20 
                     REQUEST               HS2a_aah(a,kk1,a1,i1,k20) a 
                     t1axai(a,kk1,a1,i1) = HS2a_aah(a,kk1,a1,i1,k20) 

                     t20(j20,k20)      = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1axai(a,kk1,a1,i1)*= fact 
                     taxai(a,kk1,a1,i1) += t1axai(a,kk1,a1,i1) 
                  ENDDO k20 
                  gaxaiS(a,kk1,a1,i1,j20)           = taxai(a,kk1,a1,i1) 
                  PREPARE VTEMP2AA(a,kk1,a1,i1,j20) = gaxaiS(a,kk1,a1,i1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO a, a1, i1 
#
      PARDO b, b1, j1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  tbxbj(b,kk1,b1,j1) = 0.0 
                  DO k20 
                     REQUEST               HS2b_bbh(b,kk1,b1,j1,k20) b 
                     t1bxbj(b,kk1,b1,j1) = HS2b_bbh(b,kk1,b1,j1,k20) 

                     t20(j20,k20)      = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1bxbj(b,kk1,b1,j1)*= fact 
                     tbxbj(b,kk1,b1,j1) += t1bxbj(b,kk1,b1,j1) 
                  ENDDO k20 
                  gbxbjS(b,kk1,b1,j1,j20)           = tbxbj(b,kk1,b1,j1) 
                  PREPARE VTEMP2BB(b,kk1,b1,j1,j20) = gbxbjS(b,kk1,b1,j1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO b, b1, j1 
#
      PARDO b, a1, i1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  tbxai(b,kk1,a1,i1) = 0.0 
                  DO k20 
                     REQUEST               HS2b_aah(b,kk1,a1,i1,k20) b 
                     t1bxai(b,kk1,a1,i1) = HS2b_aah(b,kk1,a1,i1,k20) 

                     t20(j20,k20)      = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1bxai(b,kk1,a1,i1)*= fact 
                     tbxai(b,kk1,a1,i1) += t1bxai(b,kk1,a1,i1) 
                  ENDDO k20 
                  gbxaiS(b,kk1,a1,i1,j20)           = tbxai(b,kk1,a1,i1) 
                  PREPARE VTEMP2BA(b,kk1,a1,i1,j20) = gbxaiS(b,kk1,a1,i1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO b, a1, i1 
#
      PARDO a, b1, j1 
         DO kk1 
            DO j20 
               if j20 <= 12 
                  taxbj(a,kk1,b1,j1) = 0.0 
                  DO k20 
                     REQUEST               HS2a_bbh(a,kk1,b1,j1,k20) a 
                     t1axbj(a,kk1,b1,j1) = HS2a_bbh(a,kk1,b1,j1,k20) 

                     t20(j20,k20)      = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1axbj(a,kk1,b1,j1)*= fact 
                     taxbj(a,kk1,b1,j1) += t1axbj(a,kk1,b1,j1) 
                  ENDDO k20 
                  gaxbjS(a,kk1,b1,j1,j20)           = taxbj(a,kk1,b1,j1) 
                  PREPARE VTEMP2AB(a,kk1,b1,j1,j20) = gaxbjS(a,kk1,b1,j1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO a, b1, j1 
#
      PARDO a   
         DO kk1 
            DO j20 
               if j20 <= 12 
                  tax(a,kk1) = 0.0 
                  DO k20 
                     GET                  HS1a_h(a,kk1,k20) 
                     t1ax(a,kk1)        = HS1a_h(a,kk1,k20) 

                     t20(j20,k20)       = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1ax(a,kk1)       *= fact 
                     tax(a,kk1)        += t1ax(a,kk1) 
                  ENDDO k20 
                  gaxS(a,kk1,j20)       = tax(a,kk1) 
                  PUT VTEMP1A(a,kk1,j20) = gaxS(a,kk1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO a   
#
      PARDO b   
         DO kk1 
            DO j20 
               if j20 <= 12 
                  tbx(b,kk1) = 0.0 
                  DO k20 
                     GET                  HS1b_h(b,kk1,k20) 
                     t1bx(b,kk1)        = HS1b_h(b,kk1,k20) 

                     t20(j20,k20)       = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1bx(b,kk1)       *= fact 
                     tbx(b,kk1)        += t1bx(b,kk1) 
                  ENDDO k20 
                  gbxS(b,kk1,j20)       = tbx(b,kk1) 
                  PUT VTEMP1B(b,kk1,j20) = gbxS(b,kk1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
         ENDDO kk1 
      ENDPARDO b   
#
       sip_barrier
       server_barrier
#
#   rewrite temporary vectors into the usual ones
#
      PARDO a, a1, i1 
         DO kk1 
            DO k20 
               if k20 <= 12 
                  request                             VTEMP2AA(a,kk1,a1,i1,k20) i1
                  prepare HS2a_aah(a,kk1,a1,i1,k20) = VTEMP2AA(a,kk1,a1,i1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO a, a1, i1 
#
      PARDO b, b1, j1 
         DO kk1 
            DO k20 
               if k20 <= 12 
                  request                             VTEMP2BB(b,kk1,b1,j1,k20) j1
                  prepare HS2b_bbh(b,kk1,b1,j1,k20) = VTEMP2BB(b,kk1,b1,j1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO b, b1, j1 
#
      PARDO b, a1, i1 
         DO kk1 
            DO k20 
               if k20 <= 12 
                  request                             VTEMP2BA(b,kk1,a1,i1,k20) i1
                  prepare HS2b_aah(b,kk1,a1,i1,k20) = VTEMP2BA(b,kk1,a1,i1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO b, a1, i1 
#
      PARDO a, b1, j1 
         DO kk1 
            DO k20 
               if k20 <= 12 
                  request                             VTEMP2AB(a,kk1,b1,j1,k20) j1
                  prepare HS2a_bbh(a,kk1,b1,j1,k20) = VTEMP2AB(a,kk1,b1,j1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO a, b1, j1 
#
      PARDO a   
         DO kk1 
            DO k20 
               if k20 <= 12 
                  GET                     VTEMP1A(a,kk1,k20) 
                  tax(a,kk1)            = VTEMP1A(a,kk1,k20) 
                  gaxs(a,kk1,k20)       = tax(a,kk1)  
                  PUT HS1a_h(a,kk1,k20) = gaxS(a,kk1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO a   
#
      PARDO b   
         DO kk1 
            DO k20 
               if k20 <= 12 
                  GET                     VTEMP1B(b,kk1,k20) 
                  tbx(b,kk1)            = VTEMP1B(b,kk1,k20) 
                  gbxs(b,kk1,k20)       = tbx(b,kk1)  
                  PUT HS1b_h(b,kk1,k20) = gbxS(b,kk1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
         ENDDO kk1 
      ENDPARDO b   
#
      ENDPROC TRANSFORM_HC
#     -------------------- 
#
     PROC TRUNCATE
#    ------------- 
#
      call FNDVECS
#
      call GSCHMIDT
#
       server_barrier
#
      call TRANSFORM
       server_barrier
#
      call TRANSFORM_HC
       server_barrier
#
      CALL Aconstr_tr 
       server_barrier
#
      call copy_toVCactual_tr
#
       server_barrier
#
     ENDPROC TRUNCATE
#    ---------------- 
#
      PROC cre_arrays
#
      #create VEV
       create VCE1A
       create VCE1B
       create Fae_a
       create Fae_b
       create Fmi_a
       create Fmi_b
       create Fia_a
       create Fia_b
#
        sip_barrier
#
      ENDPROC cre_arrays
#     ------------------ 
#
      PROC start_copy
#     --------------- 
#
      PARDO a 
            DO kk1 
               if iroot == 2.0 
                  GET          SStarta2(a,kk1) 
                  tax(a,kk1) = SStarta2(a,kk1) 
               endif  
               if iroot == 3.0 
                  GET          SStarta3(a,kk1) 
                  tax(a,kk1) = SStarta3(a,kk1) 
               endif  
               if iroot == 4.0 
                  GET          SStarta4(a,kk1) 
                  tax(a,kk1) = SStarta4(a,kk1) 
               endif  
               if iroot == 5.0 
                  GET          SStarta5(a,kk1) 
                  tax(a,kk1) = SStarta5(a,kk1) 
               endif  
               if iroot == 6.0 
                  GET          SStarta6(a,kk1) 
                  tax(a,kk1) = SStarta6(a,kk1) 
               endif  
               if iroot == 7.0 
                  GET          SStarta7(a,kk1) 
                  tax(a,kk1) = SStarta7(a,kk1) 
               endif  
               PUT HS1a(a,kk1) = tax(a,kk1) 
               PUT SE1a(a,kk1) = tax(a,kk1)  
            ENDDO kk1 
      ENDPARDO a 
#
      PARDO b 
            DO kk1 
               if iroot == 2.0 
                  GET          SStartb2(b,kk1) 
                  tbx(b,kk1) = SStartb2(b,kk1) 
               endif  
               if iroot == 3.0 
                  GET          SStartb3(b,kk1) 
                  tbx(b,kk1) = SStartb3(b,kk1) 
               endif  
               if iroot == 4.0 
                  GET          SStartb4(b,kk1) 
                  tbx(b,kk1) = SStartb4(b,kk1) 
               endif  
               if iroot == 5.0 
                  GET          SStartb5(b,kk1) 
                  tbx(b,kk1) = SStartb5(b,kk1) 
               endif  
               if iroot == 6.0 
                  GET          SStartb6(b,kk1) 
                  tbx(b,kk1) = SStartb6(b,kk1) 
               endif  
               if iroot == 7.0 
                  GET          SStartb7(b,kk1) 
                  tbx(b,kk1) = SStartb7(b,kk1) 
               endif  
               PUT HS1b(b,kk1) = tbx(b,kk1) 
               PUT SE1b(b,kk1) = tbx(b,kk1)  
            ENDDO kk1 
      ENDPARDO b 
#
      PARDO a, a1, i1
         DO kk1 
            taxai(a,kk1,a1,i1)=0.0
            PUT HS2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
            PUT SE2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
         ENDDO kk1 
      ENDPARDO a, a1, i1
#
      PARDO b, b1, j1
         DO kk1 
            tbxbj(b,kk1,b1,j1)=0.0
            PUT HS2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
            PUT SE2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
         ENDDO kk1 
      ENDPARDO b, b1, j1
#
      PARDO b, a1, i1
         DO kk1 
            tbxai(b,kk1,a1,i1)=0.0
            PUT HS2b_aa(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)
            PUT SE2b_aa(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)
         ENDDO kk1 
      ENDPARDO b, a1, i1
#
      PARDO a, b1, j1
         DO kk1 
            taxbj(a,kk1,b1,j1)=0.0
            PUT HS2a_bb(a,kk1,b1,j1) = taxbj(a,kk1,b1,j1)
            PUT SE2a_bb(a,kk1,b1,j1) = taxbj(a,kk1,b1,j1)
         ENDDO kk1 
      ENDPARDO a, b1, j1
#
       server_barrier
#
      ENDPROC start_copy
#     ------------------ 
#
      PROC start_copy_tr
#     ------------------
#
      PARDO a 
            DO kk1 
               if iroot == 2.0 
                  GET          SStarta2(a,kk1) 
                  tax(a,kk1) = SStarta2(a,kk1) 
               endif  
               if iroot == 3.0 
                  GET          SStarta3(a,kk1) 
                  tax(a,kk1) = SStarta3(a,kk1) 
               endif  
               if iroot == 4.0 
                  GET          SStarta4(a,kk1) 
                  tax(a,kk1) = SStarta4(a,kk1) 
               endif  
               if iroot == 5.0 
                  GET          SStarta5(a,kk1) 
                  tax(a,kk1) = SStarta5(a,kk1) 
               endif  
               if iroot == 6.0 
                  GET          SStarta6(a,kk1) 
                  tax(a,kk1) = SStarta6(a,kk1) 
               endif  
               if iroot == 7.0 
                  GET          SStarta7(a,kk1) 
                  tax(a,kk1) = SStarta7(a,kk1) 
               endif  
            ENDDO kk1 
#
            PUT S1a(a,kk1) = tax(a,kk1) 
      ENDPARDO a 
#
      PARDO b 
            DO kk1 
               if iroot == 2.0 
                  GET          SStartb2(b,kk1) 
                  tbx(b,kk1) = SStartb2(b,kk1) 
               endif  
               if iroot == 3.0 
                  GET          SStartb3(b,kk1) 
                  tbx(b,kk1) = SStartb3(b,kk1) 
               endif  
               if iroot == 4.0 
                  GET          SStartb4(b,kk1) 
                  tbx(b,kk1) = SStartb4(b,kk1) 
               endif  
               if iroot == 5.0 
                  GET          SStartb5(b,kk1) 
                  tbx(b,kk1) = SStartb5(b,kk1) 
               endif  
               if iroot == 6.0 
                  GET          SStartb6(b,kk1) 
                  tbx(b,kk1) = SStartb6(b,kk1) 
               endif  
               if iroot == 7.0 
                  GET          SStartb7(b,kk1) 
                  tbx(b,kk1) = SStartb7(b,kk1) 
               endif  
            ENDDO kk1 
#
            PUT S1b(b,kk1) = tbx(b,kk1) 
      ENDPARDO b 
#
      PARDO a, a1, i1
         DO kk1 
            taxai(a,kk1,a1,i1)=0.0
            PUT S2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
         ENDDO kk1 
      ENDPARDO a, a1, i1
#
      PARDO b, b1, j1
         DO kk1 
            tbxbj(b,kk1,b1,j1)=0.0
            PUT S2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
         ENDDO kk1 
      ENDPARDO b, b1, j1
#
      PARDO b, a1, i1
         DO kk1 
            tbxai(b,kk1,a1,i1)=0.0
            PUT S2b_aa(b,kk1,a1,i1) = tbxai(b,kk1,a1,i1)
         ENDDO kk1 
      ENDPARDO b, a1, i1
#
      PARDO a, b1, j1
         DO kk1 
            taxbj(a,kk1,b1,j1)=0.0
            PUT S2a_bb(a,kk1,b1,j1) = taxbj(a,kk1,b1,j1)
         ENDDO kk1 
      ENDPARDO a, b1, j1
#
      ENDPROC start_copy_tr
#     ---------------------
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      PROC root_put
#
          if iroot == 2.0
          root1=omega
          endif
#
          if iroot == 3.0
          root2=omega
          endif
#
          if iroot == 4.0
          root3=omega
          endif
#
          if iroot == 5.0
          root4=omega
          endif
#
          if iroot == 6.0
          root5=omega
          endif
#
          if iroot == 7.0
          root6=omega
          endif
#
          if iroot == 8.0
          root7=omega
          endif
#
          if iroot == 9.0
          root8=omega
          endif
#
          if iroot == 10.0
          root9=omega
          endif
#
          if iroot == 11.0
          root10=omega
          endif
#
          if iroot == 12.0
          root11=omega
          endif
#
          if iroot == 13.0
          root12=omega
          endif
#
      ENDPROC root_put
#
     PROC PRNTING
#
       execute print_scalar residuum
       execute print_scalar omega
       execute print_scalar ispdim
       execute print_scalar iroot
       execute print_scalar imaxc
       execute print_scalar nsp
#
     ENDPROC PRNTING
#
# ------------------------------------------------------------------------ 
#
     PROC SYMMETR_A
#    ---------------- 
#
     PARDO a, a1, i1
        DO kk1
           taxai(a,kk1,a1,i1) = 0.0
           PUT S2a_aa(a,kk1,a1,i1) = taxai(a,kk1,a1,i1)
        ENDDO kk1
     ENDPARDO a, a1, i1
      sip_barrier
#
     PARDO a, a1, i1
        DO kk1 
        DO k21
           IF k21 > spdim 
              REQUEST              S2a_aah(a,kk1,a1,i1,k21) a
              taxai(a,kk1,a1,i1) = S2a_aah(a,kk1,a1,i1,k21)
              t1axai(a1,kk1,a,i1) = 0.0
#    
              if a == a1 
                 execute symm_force_a  taxai
              endif
#       
              if a < a1
                 t1axai(a1,kk1,a,i1) = taxai(a,kk1,a1,i1)
                 t1axai(a1,kk1,a,i1) *= -1.0
              endif
#       
              if a > a1
                 taxai(a,kk1,a1,i1) = 0.0
              endif
#
              PUT S2a_aa(a,kk1,a1,i1) += taxai(a,kk1,a1,i1)
              PUT S2a_aa(a1,kk1,a,i1) += t1axai(a1,kk1,a,i1)
#
              exit
#
           ENDIF # k21 > spdim
        ENDDO k21
        ENDDO kk1
     ENDPARDO a, a1, i1
      sip_barrier
      server_barrier
#
     PARDO a, a1, i1
        DO kk1
           GET S2a_aa(a,kk1,a1,i1)
           DO k21
              if k21 > spdim
                 taxais(a,kk1,a1,i1,k21) = S2a_aa(a,kk1,a1,i1)
                 PREPARE S2a_aah(a,kk1,a1,i1,k21) = taxais(a,kk1,a1,i1,k21)
                 exit 
              endif
           ENDDO k21
        ENDDO kk1
     ENDPARDO a, a1, i1
#
     ENDPROC SYMMETR_A
#    ------------------- 
#
     PROC SYMMETR_B
#    ----------------
#
     PARDO b, b1, j1
        DO kk1
           tbxbj(b,kk1,b1,j1) = 0.0
           PUT S2b_bb(b,kk1,b1,j1) = tbxbj(b,kk1,b1,j1)
        ENDDO kk1
     ENDPARDO b, b1, j1
      sip_barrier
#
     PARDO b, b1, j1
        DO kk1 
        DO k21
           IF k21 > spdim 
              REQUEST              S2b_bbh(b,kk1,b1,j1,k21) b
              tbxbj(b,kk1,b1,j1) = S2b_bbh(b,kk1,b1,j1,k21)
              t1bxbj(b1,kk1,b,j1) = 0.0
#    
              if b == b1 
                 execute symm_force_a  tbxbj
              endif
#       
              if b < b1
                 t1bxbj(b1,kk1,b,j1) = tbxbj(b,kk1,b1,j1)
                 t1bxbj(b1,kk1,b,j1) *= -1.0
              endif
#       
              if b > b1
                 tbxbj(b,kk1,b1,j1) = 0.0
              endif
#
              PUT S2b_bb(b,kk1,b1,j1) += tbxbj(b,kk1,b1,j1)
              PUT S2b_bb(b1,kk1,b,j1) += t1bxbj(b1,kk1,b,j1)
#
              exit
#
           ENDIF # k21 > spdim
        ENDDO k21
        ENDDO kk1
     ENDPARDO b, b1, j1
      sip_barrier
      server_barrier
#
     PARDO b, b1, j1
        DO kk1
           GET S2b_bb(b,kk1,b1,j1)
           DO k21
              if k21 > spdim
                 tbxbjs(b,kk1,b1,j1,k21) = S2b_bb(b,kk1,b1,j1)
                 PREPARE S2b_bbh(b,kk1,b1,j1,k21) = tbxbjs(b,kk1,b1,j1,k21)
                 exit 
              endif
           ENDDO k21
        ENDDO kk1
     ENDPARDO b, b1, j1
#
     ENDPROC SYMMETR_B
#    ------------------
#
# ------------------------------------------------------------------------ 
#
     PROC AMPL_PRINT
#    ---------------
#
      amplthresh=0.01
      allocate lai(*,*)
      allocate lbj(*,*)
#
      etemp1=0.0
      etemp2=0.0
      etemp3=0.0
      etemp4=0.0
      etemp5=0.0
#
      sum1=0.0
#
      PARDO a, i
      get VCE1A(a,i)
      lai(a,i)=VCE1A(a,i)
      execute c1_print lai amplthresh
      tai(a,i)=VCE1A(a,i)
      etemp=VCE1A(a,i)*tai(a,i)
      sum1+=etemp
      ENDPARDO a, i
#
      sum2=0.0
#
      PARDO b, j
      get VCE1B(b,j)
      lbj(b,j)=VCE1B(b,j)
      execute c1b_print lbj amplthresh
      tbj(b,j)=VCE1B(b,j)
      etemp=VCE1B(b,j)*tbj(b,j)
      sum2+=etemp
      ENDPARDO b, j
#
      sum3=0.0
#
      PARDO a, i, a1, i1
      request VCE2AA(a,i,a1,i1) i1
      taiai(a,i,a1,i1)=VCE2AA(a,i,a1,i1)
      execute c2aa_print taiai amplthresh
      etemp=VCE2AA(a,i,a1,i1)*taiai(a,i,a1,i1)
      etemp*=0.25
      sum3+=etemp
      ENDPARDO a, i, a1, i1
#
      sum4=0.0
#
      PARDO b, j, b1, j1
      request VCE2BB(b,j,b1,j1) j1
      tbjbj(b,j,b1,j1)=VCE2BB(b,j,b1,j1)
      execute c2bb_print tbjbj amplthresh
      etemp=VCE2BB(b,j,b1,j1)*tbjbj(b,j,b1,j1)
      etemp*=0.25
      sum4+=etemp
      ENDPARDO b, j, b1, j1
#
      sum5=0.0
#
      PARDO a, i, b, j
      request VCE2AB(a,i,b,j) j
      taibj(a,i,b,j)=VCE2AB(a,i,b,j)
      execute c2ab_print taibj amplthresh
      etemp=VCE2AB(a,i,b,j)*taibj(a,i,b,j)
      sum5+=etemp
      ENDPARDO a, i, b, j
#
       sip_barrier
#
      collective etemp1+=sum1
      collective etemp2+=sum2
      collective etemp3+=sum3
      collective etemp4+=sum4
      collective etemp5+=sum5
#
      deallocate lai(*,*)
      deallocate lbj(*,*)
#
       server_barrier
#
     ENDPROC AMPL_PRINT
#
# ----------------------------------------------------------------------
#
     PROC PRINT_INITIAL
#
      amplthresh=0.01
      allocate lai(*,*)
      allocate lbj(*,*)
#
      sum2=1.0
#
      if rootmax > 0.0
#
      PARDO a, i
      get VSTART1A1(a,i)
      lai(a,i)=VSTART1A1(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B1(b,j)
      lbj(b,j)=VSTART1B1(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
#
      if rootmax > 1.0
#
      PARDO a, i
      get VSTART1A2(a,i)
      lai(a,i)=VSTART1A2(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B2(b,j)
      lbj(b,j)=VSTART1B2(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 2.0
#
      PARDO a, i
      get VSTART1A3(a,i)
      lai(a,i)=VSTART1A3(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B3(b,j)
      lbj(b,j)=VSTART1B3(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 3.0
#
      PARDO a, i
      get VSTART1A4(a,i)
      lai(a,i)=VSTART1A4(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B4(b,j)
      lbj(b,j)=VSTART1B4(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 4.0
#
      PARDO a, i
      get VSTART1A5(a,i)
      lai(a,i)=VSTART1A5(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B5(b,j)
      lbj(b,j)=VSTART1B5(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 5.0
#
      PARDO a, i
      get VSTART1A6(a,i)
      lai(a,i)=VSTART1A6(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B6(b,j)
      lbj(b,j)=VSTART1B6(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 6.0
#
      PARDO a, i
      get VSTART1A7(a,i)
      lai(a,i)=VSTART1A7(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B7(b,j)
      lbj(b,j)=VSTART1B7(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 7.0
#
      PARDO a, i
      get VSTART1A8(a,i)
      lai(a,i)=VSTART1A8(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B8(b,j)
      lbj(b,j)=VSTART1B8(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 8.0
#
      PARDO a, i
      get VSTART1A9(a,i)
      lai(a,i)=VSTART1A9(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B9(b,j)
      lbj(b,j)=VSTART1B9(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 9.0
#
      PARDO a, i
      get VSTART1A10(a,i)
      lai(a,i)=VSTART1A10(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B10(b,j)
      lbj(b,j)=VSTART1B10(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
      if rootmax > 10.0
#
      PARDO a, i
      get VSTART1A11(a,i)
      lai(a,i)=VSTART1A11(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B11(b,j)
      lbj(b,j)=VSTART1B11(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
#
      if rootmax > 11.0
#
      PARDO a, i
      get VSTART1A12(a,i)
      lai(a,i)=VSTART1A12(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      PARDO b, j
      get VSTART1B12(b,j)
      lbj(b,j)=VSTART1B12(b,j)
      execute c1b_print lbj amplthresh
      ENDPARDO b, j
#
      endif
#
      deallocate lai(*,*)
      deallocate lbj(*,*)
#
       sip_barrier
#
     ENDPROC PRINT_INITIAL
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
#     BEGIN MAIN PROGRAM
#
# Read data from BLOCK_DATA -> to be partially replaced 
# ----------------------------------------------------- 
#
       CALL READ_DATA 
       CALL CREATE_SARRAYS 
#
# Create arrays used and zero out some scalars 
# -------------------------------------------- 
#
       call cre_arrays
       create VTEMP1A 
       create VTEMP1B 
#
       root1=100000.0
       root2=100000.0
       root3=100000.0
       root4=100000.0
       root5=100000.0
       root6=100000.0
       root7=100000.0
       root8=100000.0
       root9=100000.0
       root10=100000.0
       root11=100000.0
       root12=100000.0
#
       eomthresh = 0.0001
       rootmax   = 4.0 # 7.0
       maxcycle  = 50.0
#
       nsp=1.0
       iroot=1.0
       ispdim=1.0
       imaxc=0.0
#
# Print out initial guess 
# ----------------------- 
      #call PRINT_INITIAL
#
# Diagonalize some arrays used in the AOLADDER term later 
# ------------------------------------------------------- 
       call CONVER
#
# Initialize some arrays 
# ---------------------- 
       call startvec 
       call copy_starttoev
#
# Loop over spdim --> subspace 
# ----------------------------  
       DO spdim
#
          imaxc    += 1.0
          if spdim >= 2
             call copy_toVCactual
          endif
#
          call HS_MULT 
#
          call Aconstr
#
          call Adiag
#
          call SELVEC
#
           sip_barrier
           server_barrier
#
          call RESID_ALL
#
          call SYMMETR_A
         # server_barrier
          call SYMMETR_B
           server_barrier
#
          call REZYDUUM
#
          call SCALEVCACT_NEW
#
          if residuum > eomthresh
             call ORTHOGON
          endif
#
          if spdim < 20
          if residuum < eomthresh
#
             iroot+=1.0
#
             call root_put
             imaxc=0.0
#
             if iroot > rootmax
                iroot-=1.0
                call prnting
                iroot+=1.0
               #call AMPL_PRINT
                call PRNTING
                exit
             endif
#
              sip_barrier
              server_barrier
#
            #call AMPL_PRINT
                call PRNTING
             call start_copy
#
              sip_barrier
              server_barrier
#
             call ORTHOGON
#
          endif
#
          if residuum > eomthresh
             call prnting
          endif
          if residuum < eomthresh
             iroot+=-1.0
             call prnting
             iroot+=1.0
          endif
#
          endif # spdim < 20  
#
          if spdim == 20
             if residuum < eomthresh
                if iroot == rootmax
                   iroot+=1.0
                   call root_put
                   imaxc=0.0
                   call prnting
                  #call AMPL_PRINT
                call PRNTING
                   exit
                endif
             endif
          endif
#
          nsp+=1.0
          ispdim+=1.0
#
       enddo spdim
#
       if iroot <= rootmax # new
       if iroot < 13.0
#
          call TRUNCATE
#
          if residuum > eomthresh
             nsp+=-1.0
             ispdim-=1.0
             call prnting
             nsp+=1.0
             ispdim+=1.0
          endif
#
          if residuum < eomthresh
#
             nsp+=-1.0
             ispdim-=1.0
             call prnting
            #call AMPL_PRINT
                call PRNTING
             nsp+=1.0
             ispdim+=1.0
             iroot+=1.0
             call root_put
#
              sip_barrier
              server_barrier
#
             call start_copy
#
              sip_barrier
              server_barrier
#
             do spdim
                if spdim == 20
                  call ORTHOGON
                  call start_copy_tr
                   sip_barrier
                   server_barrier
                endif
             ENDDO spdim
#
          endif
#
       endif
       endif # new
#
       do eomcycle
#
       if iroot > rootmax
       exit
       endif
#
       ispdim=1.0
        sip_barrier 
#
       do spdim
#
       if spdim > 12
#
          if spdim == 13
          if residuum < eomthresh
#
          if eomcycle > 1 #### NEW
#
             iroot+=1.0
#
             call root_put
#
          endif    #### NEW
#
             imaxc=0.0
#
              sip_barrier
              server_barrier
#
             call start_copy
#
              sip_barrier
              server_barrier
#
             call ORTHOGON
#
             call copy_toVCactual
#
          endif
          if imaxc > maxcycle
          if residuum > eomthresh
#
             iroot+=1.0
#
             call root_put
#
             if iroot > 12.0
             exit
             endif
#
             imaxc=0.0
#
              sip_barrier
              server_barrier
#
             call start_copy
#
              sip_barrier
              server_barrier
#
             call ORTHOGON
#
             call copy_toVCactual
#
          endif
          endif
          endif
#
          imaxc+=1.0
#
          if spdim == 13
          if eomcycle > 1 
          if residuum > eomthresh 
          call copy_toVCactual
          endif
          endif
          endif
#
          if spdim > 13
          call copy_toVCactual
          endif
#
          call HS_MULT 
#
          call Aconstr 
#
          call Adiag
#
          call SELVEC
#
        sip_barrier
        server_barrier
#
          call RESID_ALL
#
          call SYMMETR_A
         # sip_barrier
         # server_barrier
          call SYMMETR_B
         # sip_barrier
           server_barrier
#
          call REZYDUUM
#
          call SCALEVCACT_NEW
#
          if residuum > eomthresh
          if maxcycle >= imaxc
          call ORTHOGON
          endif
          endif
#
          if spdim < 20
#
             if residuum < eomthresh
#
                iroot+=1.0
#
                call root_put
                imaxc=0.0
#
                if iroot > rootmax
                call prnting
               #call AMPL_PRINT
                call PRNTING
                exit
                endif
#
               #call AMPL_PRINT
                call PRNTING
                call start_copy
#
                 sip_barrier
                 server_barrier
#
                call ORTHOGON
#
             endif
             if imaxc > maxcycle
             if residuum > eomthresh
#
                iroot+=1.0
#
                call root_put
               #call AMPL_PRINT
                call PRNTING
#
                if iroot > 12.0
                exit
                endif
#
                imaxc=0.0
#
                if iroot > rootmax
                call prnting
                exit
                endif
#
#
                 sip_barrier
                 server_barrier
#
                call ORTHOGON
#
             endif
             endif
#
             if residuum > eomthresh
             call prnting
             endif
#
             if residuum < eomthresh
                iroot+=-1.0
                call prnting
                iroot+=1.0
             endif
#
          nsp+=1.0
#
          endif
#
          if spdim == 20
          if residuum < eomthresh
         #call AMPL_PRINT
                call PRNTING
          if iroot == rootmax
          iroot+=1.0
          call root_put
          call prnting
          exit
          endif
          endif
          endif
#
       endif
#
       ispdim+=1.0
#
       enddo spdim
#
             if imaxc > maxcycle
            #call AMPL_PRINT
                call PRNTING
             if iroot > 12.0
             exit
             endif
             endif
#
       if iroot > rootmax
       exit
       endif
#
        sip_barrier
        server_barrier
#
       call TRUNCATE
#
       call prnting
#
       nsp+=1.0
#
       enddo eomcycle
#
# --------- print out the excitation energies------  
#
#
       execute print_scalar root1
       execute print_scalar root2
       execute print_scalar root3
       execute print_scalar root4
       execute print_scalar root5
       execute print_scalar root6
       execute print_scalar root7
       execute print_scalar root8
       execute print_scalar root9
       execute print_scalar root10
       execute print_scalar root11
       execute print_scalar root12
#
       evfev = 27.2113957
       root1*=evfev
       root2*=evfev
       root3*=evfev
       root4*=evfev
       root5*=evfev
       root6*=evfev
       root7*=evfev
       root8*=evfev
       root9*=evfev
       root10*=evfev
       root11*=evfev
       root12*=evfev
#
       execute print_scalar root1
       execute print_scalar root2
       execute print_scalar root3
       execute print_scalar root4
       execute print_scalar root5
       execute print_scalar root6
       execute print_scalar root7
       execute print_scalar root8
       execute print_scalar root9
       execute print_scalar root10
       execute print_scalar root11
       execute print_scalar root12
#
      #delete VEV
       delete VCE1A
       delete VCE1B
        sip_barrier
			ENDSIAL EA_EOMCCSD
