#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                                    SIAL CCSDtqUHF
#
# The intermediates used in the CCSDtq calculation are computed. The following
# list follows the numbering in RMP, V. 79, p. 312. A brief description of how
# they are used is in the following table.
#
# -------------------------------------------------
# Intermediate   Permanent  Active   Contributes  |
# -------------------------------------------------
#      1           yes       no       s, d, t     |
#      2           yes       no       s, d, t, q  |
#      3           yes       no          d, t, q  |
#      3a          yes       no       s           |
#
#      4           yes       P           d        |
#      5           yes       P           d        |
#      6           yes       yes            t, q  |
#      6a          no        no          d        |  
#                                                 |
#      7           yes       no          d, t, q  |  
#      8           yes       no          d, t, q  |  
#      9           yes       yes            t, q  |  
#      9a          no        no          d        |  
#                                                 |
#     10           yes       yes               q  |  
#     10a          yes       yes               t  |  
#     10b          yes       no                d  |  
#                                                 |
#     11           ?         yes               q  |  
#     12           ?         yes               q  |  
#     13           ?         yes               q  |  
#     14           ?         yes               q  |  
# ------------------------------------------------- 
#
# ------------------------------------------------------------------------ 
#                                                                        |
#                                    DECLARE INDECES                     |  
#                                                                        |
# ------------------------------------------------------------------------ 
#
      index kiter    = 1, 16 # cc_iter
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
#
# Declare subindeces 
# ------------------ 
#
      subindex ii  of i 
      subindex ii1 of i1  
      subindex ii2 of i2  
      subindex ii3 of i3  
#
      subindex aa  of a 
      subindex aa1 of a1  
      subindex aa2 of a2  
      subindex aa3 of a3  
#
      subindex jj  of j 
      subindex jj1 of j1  
      subindex jj2 of j2  
      subindex jj3 of j3  
#
      subindex bb  of b 
      subindex bb1 of b1  
      subindex bb2 of b2  
      subindex bb3 of b3  
#
      temp T1aiaiai(aa,ii,aa1,ii1,aa2,ii2) 
      temp T2aiaiai(aa,ii,aa1,ii1,aa2,ii2) 
      temp T3aiaiai(aa,ii,aa1,ii1,aa2,ii2) 
      temp TSaiai(aa,ii,aa3,ii1)
      temp TSaipi(aa,ii,p,ii1)
      temp TSaiai_1(aa,ii,aa1,ii3)              
      temp TSaaai(aa1,aa3,aa2,ii2)
      temp TSapai(aa1,p,aa2,ii2)
      temp TSaiii(aa2,ii2,ii3,ii1) 
      temp TSaiap(aa,ii,aa1,i3)
#
      temp TSapbj(aa1,p3,bb2,jj2)   
      temp TSbqai(bb2,q3,aa1,ii)     
      temp TSaiqj(aa,ii1,q3,jj2)     
      temp TSpibj(p3,ii1,bb2,jj2)     
      temp TSaibq(aa1,ii,bb2,q3)         
      temp Tssss(aa,ii,aa1,ii1) 
      temp Tssxx(aa,ii,bb1,jj1) 
#
      temp tss(aa,ii)
      temp txx(bb,jj)
      distributed Sai(aa,ii)
      distributed Sbj(bb,jj)
#
      temp T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) 
      temp T2aiaibj(aa,ii,aa1,ii1,bb2,jj2) 
      temp T3aiaibj(aa,ii,aa1,ii1,bb2,jj2) 
#
      local LVaabj(aa,a3,bb2,jj2) 
      local LV1aabj(aa1,a3,bb2,jj2) 
      local LV10bbai(bb2,b3,aa1,ii) 
      local LV00bbai(bb2,b3,aa,ii)  
      local LV01bbai(bb2,b3,aa,ii1)  
      local LV11bbai(bb2,b3,aa1,ii1)  
      local LVS00aaai(aa1,a3,aa,ii) 
      local LVS01aaai(aa1,a3,aa,ii1) 
      local LV122ab(i3,ii1,bb2,jj2) 
      local LX012ab(aa,ii1,j3,jj2)  
      local LX112ab(aa1,ii1,j3,jj2)  
      local LV022ab(i3,ii,bb2,jj2) 
      local LX002ab(aa,ii,j3,jj2)  
      local LX001aa(aa,ii,i3,ii1)  
      local LX102ab(aa1,ii,j3,jj2)  
      local LX101aa(aa1,ii,i3,ii1)  
      local LT001aa(aa,ii,a3,ii1)  
      local LT101aa(aa1,ii,a3,ii1)  
      local LT012ab(aa,ii1,b3,jj2)  
      local LT002ab(aa,ii,b3,jj2)  
      local LT112ab(aa1,ii1,b3,jj2)  
      local LT102ab(aa1,ii,b3,jj2)  
      local LZ122ab(a3,ii1,bb2,jj2)  
      local LZ022ab(a3,ii,bb2,jj2)  
      local LQ001aa(aa,ii,aa1,i3) 
      local LQ011aa(aa,ii1,aa1,i3) 
      local LQ102ab(aa1,ii,bb2,j3) 
      local LQ002ab(aa,ii,bb2,j3) 
      local LQ112ab(aa1,ii1,bb2,j3) 
      local LQ012ab(aa,ii1,bb2,j3) 
      local LY122ab(aa1,i3,bb2,jj2) 
      local LY022ab(aa,i3,bb2,jj2) 
#
# ------------------------------------------------------------------------ 
#                                                                        |
#                           Declare arrays                               |  
#                                                                        |
# ------------------------------------------------------------------------ 
#
#     SERVED ARRAYS 
#     ------------- 
#
      served T2aaC(a,i,a1,i1)  
      served T2abC(a,i,b,j) 
      distributed t1aC(a,i) 
#
      served Vxxxi(mu,nu,lambda,i) 
      served Vxxxj(mu,nu,lambda,j) 
      served Vxxii(mu,nu,i,i1) 
      served Vxxai(mu,nu,a,i) 
      served Vxxjj(mu,nu,j,j1) 
      served Vxxij(mu,nu,i,j1) 
      served Vxxbj(mu,nu,b,j) 
      served Vxixi(mu,i,nu,i1) 
      served Vxjxj(mu,j,nu,j1) 
      served Vxixj(mu,i,nu,j) 
      served Vixxi(i,mu,nu,i1) 
      served Vixxj(i,mu,nu,j1) 
      served Vjxxj(j,mu,nu,j1) 
      served Vxipi(mu,i,p,i1) 
      served Vxjqj(mu,j,q,j1) 
      served Vxiqj(mu,i,q,j) 
      served Vxaii(mu,a,i,i1) 
      served Vixai(i,mu,a,i1) 
      served Vxbjj(mu,b,j,j1) 
      served Vjxbj(j,mu,b,j1) 
      served Vxbii(mu,b,i,i1) 
      served Vxaai(mu,a1,a,i) 
      served Vxbbj(mu,b1,b,j) 
      served Vxbai(mu,b,a,i) 
      served Vxajj(mu,a,j,j1) 
      served Vxabj(mu,a,b,j) 
      served Vixbj(i,mu,b,j) 
#
      served VSpipi(p,i,p1,i1)  
      served VSqjqj(q,j,q1,j1) 
      served Vpiqj(p,i,q,j)  
      served VSaaai(a1,a,a2,i)  
      served VSbbbj(b1,b,b2,j) 
      served Vaabj(a1,a,b,j)  
      served Vbbai(b1,b,a,i)  
#
#     TEMP ARRAYS 
#     ----------- 
#
      temp aoint(mu,nu,lambda,sigma) 
      temp T1xxxi(mu,nu,lambda,i) 
      temp T1xxxj(mu,nu,lambda,j) 
      temp Txxii(mu,nu,i,i1) 
      temp T1xxii(mu,nu,i,i1) 
      temp Txxai(mu,nu,a,i) 
      temp T1xxai(mu,nu,a,i) 
      temp Txxjj(mu,nu,j,j1) 
      temp T1xxjj(mu,nu,j,j1) 
      temp Txxbj(mu,nu,b,j) 
      temp T1xxbj(mu,nu,b,j) 
      temp Txxij(mu,nu,i,j1) 
      temp T1xxij(mu,nu,i,j1) 
      temp Txixi(mu,i,nu,i1) 
      temp T1xixi(mu,i,nu,i1) 
      temp Txjxj(mu,j,nu,j1) 
      temp T1xjxj(mu,j,nu,j1) 
      temp Txixj(mu,i,nu,j) 
      temp T1xixj(mu,i,nu,j) 
      temp Tixxi(i,mu,nu,i1) 
      temp T1ixxi(i,mu,nu,i1) 
      temp Tixxj(i,mu,nu,j1) 
      temp T1ixxj(i,mu,nu,j1) 
      temp Tjxxj(j,mu,nu,j1) 
      temp T1jxxj(j,mu,nu,j1) 
      temp T1xipi(mu,i,p,i1) 
      temp Txipi(mu,i,p,i1) 
      temp Txaii(mu,a,i,i1) 
      temp T1xaii(mu,a,i,i1) 
      temp Tixai(i,mu,a,i1) 
      temp T1ixai(i,mu,a,i1) 
      temp Txbjj(mu,b,j,j1) 
      temp T1xbjj(mu,b,j,j1) 
      temp Tjxbj(j,mu,b,j1) 
      temp T1jxbj(j,mu,b,j1) 
      temp Txbii(mu,b,i,i1) 
      temp T1xbii(mu,b,i,i1) 
      temp Txaai(mu,a1,a,i) 
      temp T1xaai(mu,a1,a,i) 
      temp Txbbj(mu,b1,b,j) 
      temp T1xbbj(mu,b1,b,j) 
      temp Txbai(mu,b,a,i) 
      temp T1xbai(mu,b,a,i) 
      temp Txjqj(mu,j,q,j1) 
      temp T1xjqj(mu,j,q,j1) 
      temp Txajj(mu,a,j,j1)
      temp T1xajj(mu,a,j,j1)
      temp Txabj(mu,a,b,j) 
      temp T1xabj(mu,a,b,j) 
      temp Txiqj(mu,i,q,j) 
      temp T1xiqj(mu,i,q,j) 
      temp Tixbj(i,mu,b,j) 
      temp T1ixbj(i,mu,b,j) 
      temp Tpipi(p,i,p1,i1) 
      temp T1pipi(p,i,p1,i1) 
      temp Tpiqj(p,i,q1,j1) 
      temp T1piqj(p,i,q1,j1) 
      temp Tqjqj(q,j,q1,j1) 
      temp T1qjqj(q,j,q1,j1) 
      temp Tbbjj(b1,b,j,j1) 
      temp T1bbjj(b1,b,j,j1) 
      temp Tjbbj(j,b1,b,j1) 
      temp T1jbbj(j,b1,b,j1) 
      temp Tbbii(b1,b,i,i1) 
      temp T1bbii(b1,b,i,i1) 
      temp Tjbii(j,b,i,i1) 
      temp T1jbii(j,b,i,i1) 
      temp Tbbai(b1,b,a,i) 
      temp T1bbai(b1,b,a,i) 
      temp Taajj(a1,a,j,j1) 
      temp T1aajj(a1,a,j,j1) 
      temp Tiabj(i,a,b,j) 
      temp T1iabj(i,a,b,j) 
      temp Taabj(a1,a,b,j) 
      temp T1aabj(a1,a,b,j) 
#
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp tqq(q,q1) 
      temp t1qq(q,q1) 
      temp tpppp(p,p1,p2,p3) 
      temp t1pppp(p,p1,p2,p3) 
      temp tqqqq(q,q1,q2,q3) 
      temp t1qqqq(q,q1,q2,q3) 
      temp tppqq(p,p1,q,q1) 
      temp t1ppqq(p,p1,q,q1) 
      temp tpqqp(p,q,q1,p1) 
      temp t1pqqp(p,q,q1,p1) 
      temp tqppq(q,p,p1,q1) 
      temp t1qppq(q,p,p1,q1) 
      temp tqqpp(q,q1,p,p1) 
      temp t1qqpp(q,q1,p,p1) 
      temp tpqpq(p,q,p1,q1) 
#
      temp taiai(a,i,a1,i1) 
      temp t1aiai(a,i,a1,i1) 
      temp t2aiai(a,i,a1,i1) 
      temp t3aiai(a,i,a1,i1) 
      temp tbjbj(b,j,b1,j1) 
      temp t1bjbj(b,j,b1,j1) 
      temp t2bjbj(b,j,b1,j1) 
      temp t3bjbj(b,j,b1,j1) 
      temp taibj(a,i,b,j) 
#     
      local Txxxi(mu,nu,lambda,i)
      local Txxxj(mu,nu,lambda,j)
      local L1xxxi(mu,nu,lambda,i)
      local L1xxxj(mu,nu,lambda,j)
      local L2xxxi(mu,lambda,nu,i)
      local L2xxxj(mu,lambda,nu,j)
      local L3xxxi(lambda,mu,nu,i)
      local L3xxxj(lambda,mu,nu,j)
      local Lxixi(mu,i,nu,i1)
      local Lxxii(mu,nu,i,i1) 
      local Lixxi(i,mu,nu,i1) 
      local Lxjxj(mu,j,nu,j1) 
      local Lxxjj(mu,nu,j,j1) 
      local Ljxxj(j,mu,nu,j1)
      local Lxxai(mu,nu,a,i) 
      local Lxxbj(mu,nu,b,j) 
      local Lxixj(mu,i,nu,j) 
      local Lixxj(i,mu,nu,j) 
      local Lxipi(mu,i,p,i1)
      local Lxjqj(mu,j,q,j1) 
      local Lxiqj(mu,i,q,j1) 
      local Lxaii(mu,a,i,i1) 
      local Lixai(i,mu,a,i1) 
      local Lxbjj(mu,b,j,j1)
      local Ljxbj(j,mu,b,j1) 
      local L1xaai(mu,a,a1,i)
      local L1xbbj(mu,b,b1,j)
      local Lxbii(mu,b,i,i1)
      local Lxbai(mu,b,a,i) 
      local Lxajj(mu,a,j,j1) 
      local Lixbj(i,mu,b,j)
      local Lxabj(mu,a,b,j)
#
#     SCALARS 
#     ------- 
#
      scalar ncount 
      scalar ncount1
      scalar ecrit 
      scalar etemp 
      scalar esum   
      scalar esum1  
      scalar esuma   
      scalar ecorraa 
      scalar esumb   
      scalar ecorrbb 
      scalar esumab   
      scalar ecorrab 
      scalar ecorrT 
      scalar esum_aaa
      scalar esum_aab
      scalar esum_S
      scalar esuma_S
      scalar esumb_S
      scalar fact 
      scalar efact 
      scalar pcount  
      scalar fcount  
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the first two stages of the transformation in two N5 steps. 
#
     PROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate Txxxi(mu,nu,lambda,*)
          allocate Txxxj(mu,nu,lambda,*)
#
          DO sigma
#
             compute_integrals aoint(mu,nu,lambda,sigma)
#
             DO i   
#
                 T1xxxi(mu,nu,lambda,i)  = aoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 Txxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)  
#
             ENDDO i   
#
             DO j   
#
                 T1xxxj(mu,nu,lambda,j)  = aoint(mu,nu,lambda,sigma)*ca(sigma,j)
                 Txxxj(mu,nu,lambda,j)  += T1xxxj(mu,nu,lambda,j)  
#
             ENDDO j   
#
          ENDDO sigma

          DO i
             T1xxxi(mu,nu,lambda,i)         = Txxxi(mu,nu,lambda,i)
             PREPARE Vxxxi(mu,nu,lambda,i)  = T1xxxi(mu,nu,lambda,i)
          ENDDO i

          DO j
             T1xxxj(mu,nu,lambda,j)         = Txxxj(mu,nu,lambda,j) 
             PREPARE Vxxxj(mu,nu,lambda,j)  = T1xxxj(mu,nu,lambda,j)
          ENDDO j

          deallocate Txxxi(mu,nu,lambda,*)
          deallocate Txxxj(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda 
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i
#
           allocate L1xxxi(mu,nu,*,i)
#
           DO lambda
#
              REQUEST                  Vxxxi(mu,nu,lambda,i) i
              L1xxxi(mu,nu,lambda,i) = Vxxxi(mu,nu,lambda,i)
#
           ENDDO lambda
#
           DO i1
#
              Txxii(mu,nu,i1,i) = 0.0
#
              DO lambda
#
                 T1xxii(mu,nu,i1,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,i1)
                 Txxii(mu,nu,i1,i) += T1xxii(mu,nu,i1,i)
#
              ENDDO lambda
#
              PREPARE Vxxii(mu,nu,i1,i) = Txxii(mu,nu,i1,i)
#
           ENDDO i1
#
           DO a
#
              Txxai(mu,nu,a,i) = 0.0
#
              DO lambda
#
                 T1xxai(mu,nu,a,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,a)
                 Txxai(mu,nu,a,i) += T1xxai(mu,nu,a,i)
#
              ENDDO lambda
#
              PREPARE Vxxai(mu,nu,a,i) = Txxai(mu,nu,a,i)
#
           ENDDO a
           deallocate L1xxxi(mu,nu,*,i)
           allocate L2xxxi(mu,*,nu,i)

           DO lambda
              REQUEST Vxxxi(mu,lambda,nu,i) i
              L2xxxi(mu,lambda,nu,i) = Vxxxi(mu,lambda,nu,i)
           ENDDO lambda

           DO i1
              Txixi(mu,i1,nu,i) = 0.0

              DO lambda
                 T1xixi(mu,i1,nu,i) = L2xxxi(mu,lambda,nu,i)*ca(lambda,i1)
                 Txixi(mu,i1,nu,i) += T1xixi(mu,i1,nu,i)
              ENDDO lambda

              PREPARE Vxixi(mu,i1,nu,i) = Txixi(mu,i1,nu,i)
           ENDDO i1

           deallocate L2xxxi(mu,*,nu,i)
           allocate L3xxxi(*,mu,nu,i)

           DO lambda
              REQUEST Vxxxi(lambda,mu,nu,i) i
              L3xxxi(lambda,mu,nu,i) = Vxxxi(lambda,mu,nu,i)
           ENDDO lambda

           DO i1
              Tixxi(i1,mu,nu,i) = 0.0

              DO lambda
                 T1ixxi(i1,mu,nu,i) = L3xxxi(lambda,mu,nu,i)*ca(lambda,i1)
                 Tixxi(i1,mu,nu,i) += T1ixxi(i1,mu,nu,i)
              ENDDO lambda

              PREPARE Vixxi(i1,mu,nu,i) = Tixxi(i1,mu,nu,i)
           ENDDO i1

           deallocate L3xxxi(*,mu,nu,i)
#
     ENDPARDO mu, nu, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, j
#
           allocate L1xxxj(mu,nu,*,j)
#
           DO lambda
#
              REQUEST Vxxxj(mu,nu,lambda,j) j
#
              L1xxxj(mu,nu,lambda,j) = Vxxxj(mu,nu,lambda,j)
#
           ENDDO lambda
#
           DO j1
#
              Txxjj(mu,nu,j1,j) = 0.0
#
              DO lambda
#
                 T1xxjj(mu,nu,j1,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,j1)
                 Txxjj(mu,nu,j1,j) += T1xxjj(mu,nu,j1,j)
#
              ENDDO lambda
#
              PREPARE Vxxjj(mu,nu,j1,j) = Txxjj(mu,nu,j1,j)
#
           ENDDO j1
#
           DO b
#
              Txxbj(mu,nu,b,j) = 0.0
#
              DO lambda
#
                 T1xxbj(mu,nu,b,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,b)
                 Txxbj(mu,nu,b,j) += T1xxbj(mu,nu,b,j)
#
              ENDDO lambda
#
              PREPARE Vxxbj(mu,nu,b,j) = Txxbj(mu,nu,b,j)
#
           ENDDO b
#
           DO i
#
              Txxij(mu,nu,i,j) = 0.0
#
              DO lambda
#
                 T1xxij(mu,nu,i,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,i)
                 Txxij(mu,nu,i,j) += T1xxij(mu,nu,i,j)
#
              ENDDO lambda
#
              PREPARE Vxxij(mu,nu,i,j) = Txxij(mu,nu,i,j)
#
           ENDDO i
#
           deallocate L1xxxj(mu,nu,*,j)
           allocate L2xxxj(mu,*,nu,j)

           DO lambda
              REQUEST Vxxxj(mu,lambda,nu,j) j
              L2xxxj(mu,lambda,nu,j) = Vxxxj(mu,lambda,nu,j)
           ENDDO lambda

           DO j1
              Txjxj(mu,j1,nu,j) = 0.0

              DO lambda
                 T1xjxj(mu,j1,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,j1)
                 Txjxj(mu,j1,nu,j) += T1xjxj(mu,j1,nu,j)
              ENDDO lambda

              PREPARE Vxjxj(mu,j1,nu,j) = Txjxj(mu,j1,nu,j)
           ENDDO j1

           DO i
              Txixj(mu,i,nu,j) = 0.0

              DO lambda
                 T1xixj(mu,i,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,i)
                 Txixj(mu,i,nu,j) += T1xixj(mu,i,nu,j)
              ENDDO lambda

              PREPARE Vxixj(mu,i,nu,j) = Txixj(mu,i,nu,j)
           ENDDO i

           deallocate L2xxxj(mu,*,nu,j)
           allocate L3xxxj(*,mu,nu,j)

           DO lambda
              REQUEST Vxxxj(lambda,mu,nu,j) j
              L3xxxj(lambda,mu,nu,j) = Vxxxj(lambda,mu,nu,j)
           ENDDO lambda

           DO j1
              Tjxxj(j1,mu,nu,j) = 0.0

              DO lambda
                 T1jxxj(j1,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,j1)
                 Tjxxj(j1,mu,nu,j) += T1jxxj(j1,mu,nu,j)
              ENDDO lambda

              PREPARE Vjxxj(j1,mu,nu,j) = Tjxxj(j1,mu,nu,j)
           ENDDO j1

           DO i
              Tixxj(i,mu,nu,j) = 0.0

              DO lambda
                 T1ixxj(i,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,i)
                 Tixxj(i,mu,nu,j) += T1ixxj(i,mu,nu,j)
              ENDDO lambda

              PREPARE Vixxj(i,mu,nu,j) = Tixxj(i,mu,nu,j)
           ENDDO i

           deallocate L3xxxj(*,mu,nu,j)
#
     ENDPARDO mu, nu, j
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.  
#
     PROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, i1
#
           allocate Lxixi(mu,i,*,i1) 
           allocate Lxxii(mu,*,i,i1) 
           allocate Lixxi(i,mu,*,i1) 
#
           DO nu 
#
              REQUEST Vxixi(mu,i,nu,i1) i1 
              Lxixi(mu,i,nu,i1) = Vxixi(mu,i,nu,i1) 
#
           ENDDO nu 
#
           DO p 
#
              Txipi(mu,i,p,i1) = 0.0  
#
              DO nu  
#
                 T1xipi(mu,i,p,i1) = Lxixi(mu,i,nu,i1)*ca(nu,p)
                 Txipi(mu,i,p,i1) += T1xipi(mu,i,p,i1)  
#
              ENDDO nu  
#
              PREPARE Vxipi(mu,i,p,i1) = Txipi(mu,i,p,i1)
#
           ENDDO p 
#
           deallocate Lxixi(mu,i,*,i1) 
#
     ENDPARDO mu, i, i1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, a, i
#
           allocate Lxxai(mu,*,a,i) 
#
           DO nu 
#
              REQUEST Vxxai(mu,nu,a,i) i 
              Lxxai(mu,nu,a,i) = Vxxai(mu,nu,a,i) 
#
           ENDDO nu 
#
           DO a1 
#
              Txaai(mu,a1,a,i) = 0.0  
#
              DO nu  
#
                 T1xaai(mu,a1,a,i) = Lxxai(mu,nu,a,i)*ca(nu,a1)
                 Txaai(mu,a1,a,i) += T1xaai(mu,a1,a,i)  
#
              ENDDO nu  
#
              PREPARE Vxaai(mu,a1,a,i) = Txaai(mu,a1,a,i)
#
           ENDDO a1 
#
           DO b 
#
              Txbai(mu,b,a,i) = 0.0 
#
              DO nu  
#
                 T1xbai(mu,b,a,i) = Lxxai(mu,nu,a,i)*ca(nu,b)
                 Txbai(mu,b,a,i) += T1xbai(mu,b,a,i)   
#
              ENDDO nu  
#
              PREPARE Vxbai(mu,b,a,i) = Txbai(mu,b,a,i)
#
           ENDDO b 
#
           deallocate Lxxai(mu,*,a,i) 
#
     ENDPARDO mu, a, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, b, j
#
           allocate Lxxbj(mu,*,b,j) 
#
           DO nu 
#
              REQUEST Vxxbj(mu,nu,b,j) j 
              Lxxbj(mu,nu,b,j) = Vxxbj(mu,nu,b,j) 
#
           ENDDO nu 
#
           DO b1 
#
              Txbbj(mu,b1,b,j) = 0.0  
#
              DO nu  
#
                 T1xbbj(mu,b1,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,b1)
                 Txbbj(mu,b1,b,j) += T1xbbj(mu,b1,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxbbj(mu,b1,b,j) = Txbbj(mu,b1,b,j)
#
           ENDDO b1 
#
           DO a 
#
              Txabj(mu,a,b,j) = 0.0  
#
              DO nu  
#
                 T1xabj(mu,a,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,a)
                 Txabj(mu,a,b,j) += T1xabj(mu,a,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxabj(mu,a,b,j) = Txabj(mu,a,b,j)
#
           ENDDO a 
#
           deallocate Lxxbj(mu,*,b,j)  
#
     ENDPARDO mu, b, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, j
#
           allocate Lxixj(mu,i,*,j) 
           allocate Lixxj(i,mu,*,j) 
#
           DO nu 
#
              REQUEST Vxixj(mu,i,nu,j) j 
              REQUEST Vixxj(i,mu,nu,j) j 
#
              Lxixj(mu,i,nu,j) = Vxixj(mu,i,nu,j) 
              Lixxj(i,mu,nu,j) = Vixxj(i,mu,nu,j) 
#
           ENDDO nu 
#
           DO q 
#
              Txiqj(mu,i,q,j) = 0.0  
#
              DO nu  
#
                 T1xiqj(mu,i,q,j) = Lxixj(mu,i,nu,j)*ca(nu,q)
                 Txiqj(mu,i,q,j) += T1xiqj(mu,i,q,j)  
#
              ENDDO nu  
#
              PREPARE Vxiqj(mu,i,q,j) = Txiqj(mu,i,q,j)
#
           ENDDO q 
#
           deallocate Lxixj(mu,i,*,j) 
#
     ENDPARDO mu, i, j
#
#    ------------------------------------------------------------------------
#    
     execute server_barrier
#
     ENDPROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#
     PARDO p, i, i1
#
           allocate Lxipi(*,i,p,i1) 
#
           DO mu 
#
              REQUEST Vxipi(mu,i,p,i1) i1 
              REQUEST Vxipi(mu,i1,p,i) i 
              Lxipi(mu,i,p,i1)  = Vxipi(mu,i,p,i1) 
              Txipi(mu,i,p,i1)  = Vxipi(mu,i1,p,i) 
              Lxipi(mu,i,p,i1) -= Txipi(mu,i,p,i1) 
#
           ENDDO mu  
#
           DO p1 
#
              Tpipi(p1,i,p,i1) = 0.0  
#
              DO mu  
#
                 T1pipi(p1,i,p,i1) = Lxipi(mu,i,p,i1)*ca(mu,p1)
                 Tpipi(p1,i,p,i1) += T1pipi(p1,i,p,i1)  
#
              ENDDO mu  
#
              PREPARE VSpipi(p1,i,p,i1) = Tpipi(p1,i,p,i1) 
#
           ENDDO p1 
#
           deallocate Lxipi(*,i,p,i1) 
#
     ENDPARDO p, i, i1
#
     PARDO a, a1, i
#
           allocate L1xaai(*,a,a1,i) 
#
           DO mu 
#
              REQUEST              Vxaai(mu,a,a1,i) i 
              L1xaai(mu,a,a1,i)  = Vxaai(mu,a,a1,i)
#
           ENDDO mu 
#
           DO a2  
#
              Tpppp(a2,a,a1,i) = 0.0 
#
              DO mu 
#
                 T1pppp(a2,a,a1,i) = L1xaai(mu,a,a1,i)*ca(mu,a2)
                 Tpppp(a2,a,a1,i) += T1pppp(a2,a,a1,i)  
#
              ENDDO mu 
#
              T1pppp(a1,a,a2,i)           = Tpppp(a2,a,a1,i) 
              T1pppp(a1,a,a2,i)          *= -1.0  
              PREPARE VSaaai(a2,a,a1,i)  += Tpppp(a2,a,a1,i)
              PREPARE VSaaai(a1,a,a2,i)  += T1pppp(a1,a,a2,i)
#
           ENDDO a2  
#
           deallocate L1xaai(*,a,a1,i) 
#
     ENDPARDO a, a1, i
# 
     PARDO b, a, i
#
           allocate Lxbai(*,b,a,i) 
#
           DO mu  
#
              REQUEST Vxbai(mu,b,a,i) i 
              Lxbai(mu,b,a,i) = Vxbai(mu,b,a,i) 
#
           ENDDO mu  
#
           DO b1 
#
              Tbbai(b1,b,a,i) = 0.0 
#
              DO mu  
#
                 T1bbai(b1,b,a,i) = Lxbai(mu,b,a,i)*ca(mu,b1)
                 Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)  
#
              ENDDO mu  
#
              PREPARE Vbbai(b1,b,a,i) = Tbbai(b1,b,a,i)
#
           ENDDO b1 
#
           deallocate Lxbai(*,b,a,i) 
#
     ENDPARDO b, a, i
#
     PARDO q, i, j
#
           allocate Lxiqj(*,i,q,j) 
#
           DO mu  
#
              REQUEST Vxiqj(mu,i,q,j) j 
              Lxiqj(mu,i,q,j) = Vxiqj(mu,i,q,j) 
#
           ENDDO mu  
#
           DO p 
#
              Tpiqj(p,i,q,j) = 0.0 
#
              DO mu  
#
                 T1piqj(p,i,q,j) = Lxiqj(mu,i,q,j)*ca(mu,p)
                 Tpiqj(p,i,q,j) += T1piqj(p,i,q,j)  
#
              ENDDO mu  
#
              PREPARE Vpiqj(p,i,q,j) = Tpiqj(p,i,q,j)
#
           ENDDO p 
#
           deallocate Lxiqj(*,i,q,j) 
#
     ENDPARDO q, i, j
#
     PARDO a, b, j
#
           allocate Lxabj(*,a,b,j) 
#
           DO mu  
#
              REQUEST Vxabj(mu,a,b,j) j 
              Lxabj(mu,a,b,j) = Vxabj(mu,a,b,j) 
#
           ENDDO mu  
#
           DO a1 
#
              Taabj(a1,a,b,j) = 0.0 
#
              DO mu  
#
                 T1aabj(a1,a,b,j) = Lxabj(mu,a,b,j)*ca(mu,a1)
                 Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)  
#
              ENDDO mu  
#
              PREPARE Vaabj(a1,a,b,j) = Taabj(a1,a,b,j)
#
           ENDDO a1 
#
           deallocate Lxabj(*,a,b,j) 
#
     ENDPARDO a, b, j
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
#
     PROC TRAN_UHF 
# 
#        CALL COMP_INTEGRALS # --> compute integrals and put into served array 
         CALL TRAN_TRAN2     # --> performs the first two stages of the 
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN3     # --> performs the third stage   
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN4     # --> performs the fourth stage of the  
                             #     two-electron integral transformation.  
#
     ENDPROC TRAN_UHF 
#
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
      PROC XSai_1 
#     ---------- 
         tssxx(aa1,ii1,bb2,jj2) = Vpiqj(aa1,ii1,bb2,jj2) 
         tss(aa,ii)             = T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)*tssxx(aa1,ii1,bb2,jj2)
      ENDPROC XSai_1 
#     ------------- 
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
      PROC XSai_2 
#     ---------- 
         tssxx(aa1,ii,bb2,jj2) = Vpiqj(aa1,ii,bb2,jj2) 
         tss(aa,ii1)           = T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)*tssxx(aa1,ii,bb2,jj2)
         tss(aa,ii1)          *= -1.0  
      ENDPROC XSai_2 
#     ------------- 
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
      PROC XSai_4 
#     ---------- 
         tssxx(aa,ii1,bb2,jj2)  = Vpiqj(aa,ii1,bb2,jj2) 
         tss(aa1,ii)            = T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)*tssxx(aa,ii1,bb2,jj2)  
         tss(aa1,ii)           *= -1.0  
      ENDPROC XSai_4 
#     ------------- 
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
      PROC XSai_6 
#     ---------- 
         tssxx(aa,ii,bb2,jj2) = Vpiqj(aa,ii,bb2,jj2) 
         tss(aa1,ii1)         = T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)*tssxx(aa,ii,bb2,jj2)  
      ENDPROC XSai_6 
#     ------------- 
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
      PROC XSai_9 
#     ---------- 
        tssss(aa,ii,aa1,ii1) = VSpipi(aa,ii,aa1,ii1) 
        txx(bb2,jj2)         = T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)*tssss(aa,ii,aa1,ii1)  
      ENDPROC XSai_9 
#     ------------- 
#
# ------------------------------------------------------------------------------ 
#
# ------------------------------------------------------------------------------ 
#
    PROC PXSai_1  
#   -----------  
#
         REQUEST Vpiqj(a1,i1,b2,j2) a1
#
#  ---------------------------------------------------------------------------------- 
#  Perm 1 
#  ---------------------------------------------------------------------------------- 
        if ii < ii1  
        if aa < aa1 
           CALL XSai_1 
           tss(aa,ii)      *= 4.0 
           PUT Sai(aa,ii)  += tss(aa,ii)  
        endif 
        endif 
#  ---------------------------------------------------------------------------------- 
#  Perm 2 OK  
#  ---------------------------------------------------------------------------------- 
        if ii == ii1  
        if aa < aa1 
           CALL XSai_1 
           tss(aa,ii)      *= 4.0 
           PUT Sai(aa,ii)  += tss(aa,ii)  
        endif 
        endif 
#  ---------------------------------------------------------------------------------- 
        if ii < ii1  
        if aa == aa1 
           CALL XSai_1 
           tss(aa,ii)      *= 4.0 
           PUT Sai(aa,ii)  += tss(aa,ii)  
        endif 
        endif 
#  ---------------------------------------------------------------------------------- 
#  Perm 4 OK  
#  ---------------------------------------------------------------------------------- 
        if ii == ii1  
        if aa == aa1 
           CALL XSai_1 
           tss(aa,ii)      *= 4.0 
           PUT Sai(aa,ii)  += tss(aa,ii)  
        endif 
        endif 
#  ---------------------------------------------------------------------------------- 
#
    ENDPROC PXSai_1  
#   -------------- 
#
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
#
    PROC PXSai_2  
#   -----------  
#
         REQUEST Vpiqj(a1,i,b2,j2) a1 
#
#  ---------------------------------------------------------------------------------- 
#  Perm 1 
#  ---------------------------------------------------------------------------------- 
         if ii < ii1  
         if aa < aa1 
            CALL XSai_2 
            tss(aa,ii1)      *= 4.0  
            PUT Sai(aa,ii1)  += tss(aa,ii1)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#  Perm 4 
#  ---------------------------------------------------------------------------------- 
         if ii < ii1  
         if aa == aa1 
            CALL XSai_2 
            tss(aa,ii1)      *= 4.0  
            PUT Sai(aa,ii1)  += tss(aa,ii1)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#
    ENDPROC PXSai_2  
#   -------------- 
#
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
#
    PROC PXSai_4  
#   -----------  
#
         REQUEST Vpiqj(a,i1,b2,j2) a 
#
#  ---------------------------------------------------------------------------------- 
#  Perm 1 
#  ---------------------------------------------------------------------------------- 
         if ii < ii1  
         if aa < aa1 
            CALL XSai_4 
            tss(aa1,ii)      *= 4.0  
            PUT Sai(aa1,ii)  += tss(aa1,ii)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#  Perm 2 OK  
#  ---------------------------------------------------------------------------------- 
         if ii == ii1  
         if aa < aa1 
            CALL XSai_4 
            tss(aa1,ii)      *= 4.0  
            PUT Sai(aa1,ii)  += tss(aa1,ii)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#
    ENDPROC PXSai_4  
#   -------------- 
#
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
#
    PROC PXSai_6  
#   -----------  
#
         REQUEST Vpiqj(a,i,b2,j2) a 
#
#  ---------------------------------------------------------------------------------- 
#  Perm 1 
#  ---------------------------------------------------------------------------------- 
         if ii < ii1  
         if aa < aa1 
            CALL XSai_6 
            tss(aa1,ii1)      *= 4.0 
            PUT Sai(aa1,ii1)  += tss(aa1,ii1)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#
    ENDPROC PXSai_6  
#   -------------- 
#
#  ---------------------------------------------------------------------------------- 
#
#  ---------------------------------------------------------------------------------- 
#
    PROC PXSai_9  
#   -----------  
#
         REQUEST VSpipi(a,i,a1,i1) a 
#
#  ---------------------------------------------------------------------------------- 
#  Perm 1 
#  ---------------------------------------------------------------------------------- 
         if ii < ii1  
         if aa < aa1 
             CALL XSai_9 
             txx(bb2,jj2)      *= 4.0 
             PUT Sbj(bb2,jj2)  += txx(bb2,jj2)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#  Perm 2 OK  
#  ---------------------------------------------------------------------------------- 
         if ii == ii1  
         if aa < aa1 
             CALL XSai_9 
             txx(bb2,jj2)      *= 2.0 
             PUT Sbj(bb2,jj2)  += txx(bb2,jj2)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#  Perm 4 
#  ---------------------------------------------------------------------------------- 
         if ii < ii1  
         if aa == aa1 
             CALL XSai_9 
             txx(bb2,jj2)      *= 2.0 
             PUT Sbj(bb2,jj2)  += txx(bb2,jj2)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#  Perm 7 OK  
#  ---------------------------------------------------------------------------------- 
         if ii == ii1  
         if aa == aa1 
             CALL XSai_9 
             PUT Sbj(bb2,jj2)  += txx(bb2,jj2)  
         endif 
         endif 
#  ---------------------------------------------------------------------------------- 
#
    ENDPROC PXSai_9  
#   -------------- 
#
# ------------------------------------------------------------------------------ 
#
# ------------------------------------------------------------------------------ 
#
      PROC COMP_E5XS   
#     ------------- 
#
# ------------------------------------------------------------------------------ 
#
# ------------------------------------------------------------------------------ 
#
#   Compute the sai so that the singles contribution to the energy can be computed  
#   ------------------------------------------------------------------------------  
#
    CALL PXSai_1 
    CALL PXSai_2 
    CALL PXSai_4 
    CALL PXSai_6 
    CALL PXSai_9 
#
# ------------------------------------------------------------------------------ 
#
      ENDPROC COMP_E5XS   
#     ------------------ 
#
# ------------------------------------------------------------------------ 
#
      PROC COMP_PT  
#     ------------ 
#
# Compute perturbative triples (T) 
# -------------------------------- 
#
      esum = 0.0 
      esum1= 0.0 
      esum_aab = 0.0 
      esum_aaa = 0.0 
      execute sip_barrier 
#
#   aab spin combination 
#   -------------------- 
#
# ------------------------------------------------------------------------------------- 
# BEGIN LOOP1 
# ------------------------------------------------------------------------------------- 
#
      ncount = 0.0 
      PARDO j2, i, i1, a, a1, b2   
            WHERE i <= i1 
            WHERE a <= a1 
#
#           ----------- 
            DO aa  in a 
#           ----------- 

               DO ii1 in i1 
               DO bb2 in b2 
                  allocate LQ012ab(aa,ii1,bb2,*) 
                  DO j3 
                     REQUEST                  T2abC(a,i1,b2,j3) b2 
                     LQ012ab(aa,ii1,bb2,j3) = T2abC(aa,ii1,bb2,j3) 
                  ENDDO j3 
               ENDDO bb2 in b2 
               ENDDO ii1 in i1

               DO bb2 in b2 
               DO jj2 in j2 
                  allocate LY022ab(aa,*,bb2,jj2) 
                  DO i3 
                     REQUEST                  T2abC(a,i3,b2,j2) b2 
                     LY022ab(aa,i3,bb2,jj2) = T2abC(aa,i3,bb2,jj2) 
                  ENDDO i3 
               ENDDO jj2 in j2 
               ENDDO bb2 in b2 

               DO ii1 in i1 
               DO jj2 in j2 
                  allocate LX012ab(aa,ii1,*,jj2)  
                  DO j3 
                     REQUEST                  Vpiqj(a,i1,j3,j2) a 
                     LX012ab(aa,ii1,j3,jj2) = Vpiqj(aa,ii1,j3,jj2) 
                  ENDDO j3 
               ENDDO jj2 in j2 
               ENDDO ii1 in i1 

#           ----------- 
            DO aa1 in a1 
#           ----------- 

               IF aa <= aa1 

#  --------------------------------------------------------------- 
#  Allocate and fill in large arrays to be used in the calculation 
#  --------------------------------------------------------------- 
               DO ii in i 
                  allocate LVS00aaai(aa1,*,aa,ii) 
               ENDDO ii in i 
               DO ii1 in i1 
                  allocate LVS01aaai(aa1,*,aa,ii1) 
               ENDDO ii1 in i1 
               DO a3 
                  REQUEST                      VSaaai(a1,a3,a,i) a 
                  DO ii in i 
                     LVS00aaai(aa1,a3,aa,ii) = VSaaai(aa1,a3,aa,ii) 
                  ENDDO ii in i 
               ENDDO a3 
               DO a3 
                  REQUEST                      VSaaai(a1,a3,a,i1) a 
                  DO ii1 in i1 
                     LVS01aaai(aa1,a3,aa,ii1)= VSaaai(aa1,a3,aa,ii1) 
                  ENDDO ii1 in i1 
               ENDDO a3 

               DO ii  in i  
               DO jj2 in j2 
                  allocate LX102ab(aa1,ii,*,jj2)  
                  DO j3 
                     REQUEST                  Vpiqj(a1,i,j3,j2) a1 
                     LX102ab(aa1,ii,j3,jj2) = Vpiqj(aa1,ii,j3,jj2) 
                  ENDDO j3 
               ENDDO jj2 in j2 
               ENDDO ii  in i  

               DO ii  in i  
               DO ii1 in i1 
                  allocate LX101aa(aa1,ii,*,ii1)  
                  DO i3 
	             REQUEST                 VSpipi(a1,i,i3,i1) a1
                     LX101aa(aa1,ii,i3,ii1) = VSpipi(aa1,ii,i3,ii1) 
                  ENDDO i3 
               ENDDO ii1 in i1  
               ENDDO ii  in i  

               DO bb2 in b2 
               DO jj2 in j2 
                  allocate LY122ab(aa1,*,bb2,jj2) 
                  DO i3 
                     REQUEST                   T2abC(a1,i3,b2,j2) b2 
                     LY122ab(aa1,i3,bb2,jj2) = T2abC(aa1,i3,bb2,jj2) 
                  ENDDO i3 
               ENDDO jj2 in j2 
               ENDDO bb2 in b2 

               DO ii in i 
                  allocate LQ001aa(aa,ii,aa1,*) 
                  DO i3 
                     REQUEST                 T2aaC(a,i,a1,i3) a 
                     LQ001aa(aa,ii,aa1,i3) = T2aaC(aa,ii,aa1,i3) 
                  ENDDO i3 
               ENDDO ii in i 

               DO ii1 in i1 
                  allocate LQ011aa(aa,ii1,aa1,*) 
                  DO i3 
                     REQUEST                 T2aaC(a,i1,a1,i3) a 
                     LQ011aa(aa,ii1,aa1,i3) = T2aaC(aa,ii1,aa1,i3) 
                  ENDDO i3 
               ENDDO ii1 in i1 

               DO ii1 in i1 
               DO jj2 in j2 
                  allocate LX112ab(aa1,ii1,*,jj2)  
                  DO j3 
                     REQUEST                  Vpiqj(a1,i1,j3,j2) a1 
                     LX112ab(aa1,ii1,j3,jj2) = Vpiqj(aa1,ii1,j3,jj2) 
                  ENDDO j3 
               ENDDO jj2 in j2 
               ENDDO ii1 in i1 

               DO ii in i 
               DO bb2 in b2 
                  allocate LQ102ab(aa1,ii,bb2,*) 
                  DO j3 
                     REQUEST                  T2abC(a1,i,b2,j3) b2 
                     LQ102ab(aa1,ii,bb2,j3) = T2abC(aa1,ii,bb2,j3) 
                  ENDDO j3 
               ENDDO bb2 in b2 
               ENDDO ii in i 

               DO ii1 in i1 
               DO bb2 in b2 
                  allocate LQ112ab(aa1,ii1,bb2,*) 
                  DO j3 
                     REQUEST                  T2abC(a1,i1,b2,j3) b2 
                     LQ112ab(aa1,ii1,bb2,j3) = T2abC(aa1,ii1,bb2,j3) 
                  ENDDO j3 
               ENDDO bb2 in b2 
               ENDDO ii1 in i1

#           ----------- 
            DO bb2 in b2 
#           ----------- 

               DO ii in i 
                  allocate LV10bbai(bb2,*,aa1,ii) 
               ENDDO ii in i 
               DO ii in i 
                  allocate LV00bbai(bb2,*,aa,ii) 
               ENDDO ii in i 
               DO ii1 in i1 
                  allocate LV01bbai(bb2,*,aa,ii1) 
               ENDDO ii1 in i1 
               DO ii1 in i1 
                  allocate LV11bbai(bb2,*,aa1,ii1) 
               ENDDO ii1 in i1 
               DO b3 
                  REQUEST                      Vbbai(b2,b3,a1,i) b2  
                  DO ii in i 
                     LV10bbai(bb2,b3,aa1,ii) = Vbbai(bb2,b3,aa1,ii) 
                  ENDDO ii in i 
               ENDDO b3 
               DO b3 
                  REQUEST                      Vbbai(b2,b3,a,i) b2  
                  DO ii in i 
                     LV00bbai(bb2,b3,aa,ii)  = Vbbai(bb2,b3,aa,ii) 
                  ENDDO ii in i 
               ENDDO b3 
               DO b3 
                  REQUEST                      Vbbai(b2,b3,a,i1) b2  
                  DO ii1 in i1 
                     LV01bbai(bb2,b3,aa,ii1) = Vbbai(bb2,b3,aa,ii1) 
                  ENDDO ii1 in i1 
               ENDDO b3 
               DO b3 
                  REQUEST                      Vbbai(b2,b3,a1,i1) b2  
                  DO ii1 in i1 
                     LV11bbai(bb2,b3,aa1,ii1)= Vbbai(bb2,b3,aa1,ii1) 
                  ENDDO ii1 in i1 
               ENDDO b3 

#           ----------- 
            DO jj2 in j2 
#           ----------- 

               DO ii  in i  
                  allocate LT102ab(aa1,ii,*,jj2)  
                  DO b3 
                     REQUEST                 T2abC(a1,i,b3,j2) a1   
                     LT102ab(aa1,ii,b3,jj2) = T2abC(aa1,ii,b3,jj2) 
                  ENDDO b3 
               ENDDO ii  in i   

               DO ii1 in i1 
                  allocate LT112ab(aa1,ii1,*,jj2)  
                  DO b3 
                     REQUEST                 T2abC(a1,i1,b3,j2) a1   
                     LT112ab(aa1,ii1,b3,jj2) = T2abC(aa1,ii1,b3,jj2) 
                  ENDDO b3 
               ENDDO ii1 in i1  

               DO ii1 in i1 
                  allocate LT012ab(aa,ii1,*,jj2)  
                  DO b3 
                     REQUEST                 T2abC(a,i1,b3,j2) a   
                     LT012ab(aa,ii1,b3,jj2) = T2abC(aa,ii1,b3,jj2) 
                  ENDDO b3 
               ENDDO ii1 in i1  

               DO ii1 in i1 
                  allocate LV122ab(*,ii1,bb2,jj2) 
                  DO i3 
                     REQUEST                   Vpiqj(i3,i1,b2,j2) b2 
                     LV122ab(i3,ii1,bb2,jj2) = Vpiqj(i3,ii1,bb2,jj2) 
                  ENDDO i3 
               ENDDO ii1 in i1 

               DO ii  in i 
                  allocate LV022ab(*,ii,bb2,jj2) 
                  DO i3 
                     REQUEST                   Vpiqj(i3,i,b2,j2) b2 
                     LV022ab(i3,ii,bb2,jj2) = Vpiqj(i3,ii,bb2,jj2) 
                  ENDDO i3 
               ENDDO ii  in i  

               DO ii1 in i1 
                  allocate LZ122ab(*,ii1,bb2,jj2)  
                  DO a3 
                     REQUEST                   T2abC(a3,i1,b2,j2) b2 
                     LZ122ab(a3,ii1,bb2,jj2) = T2abC(a3,ii1,bb2,jj2) 
                  ENDDO a3 
               ENDDO ii1 in i1  

               DO ii  in i  
                  allocate LZ022ab(*,ii,bb2,jj2)  
                  DO a3 
                     REQUEST                   T2abC(a3,i,b2,j2) b2 
                     LZ022ab(a3,ii,bb2,jj2) = T2abC(a3,ii,bb2,jj2) 
                  ENDDO a3 
               ENDDO ii  in i   

               allocate                     LVaabj(aa,*,bb2,jj2) 
               allocate                     LV1aabj(aa1,*,bb2,jj2) 
               DO a3  
                  REQUEST                   Vaabj(a1,a3,b2,j2) a1 
                  LV1aabj(aa1,a3,bb2,jj2) = Vaabj(aa1,a3,bb2,jj2) 
               ENDDO a3  
               DO a3  
                  REQUEST                   Vaabj(a,a3,b2,j2) a 
                  LVaabj(aa,a3,bb2,jj2)   = Vaabj(aa,a3,bb2,jj2) 
               ENDDO a3  

#           ----------- 
            DO ii in i 
#           ----------- 

                  allocate LT002ab(aa,ii,*,jj2)  
                  DO b3 
                     REQUEST                 T2abC(a,i,b3,j2) a   
                     LT002ab(aa,ii,b3,jj2) = T2abC(aa,ii,b3,jj2) 
                  ENDDO b3 

                  allocate LQ002ab(aa,ii,bb2,*) 
                  DO j3 
                     REQUEST                  T2abC(a,i,b2,j3) b2 
                     LQ002ab(aa,ii,bb2,j3) = T2abC(aa,ii,bb2,j3) 
                  ENDDO j3 

                  allocate LX002ab(aa,ii,*,jj2)  
                  DO j3 
                     REQUEST                  Vpiqj(a,i,j3,j2) a 
                     LX002ab(aa,ii,j3,jj2) = Vpiqj(aa,ii,j3,jj2) 
                  ENDDO j3 

               DO ii1 in i1 
                  allocate LX001aa(aa,ii,*,ii1)  
                  DO i3 
	             REQUEST                 VSpipi(a,i,i3,i1) a 
                     LX001aa(aa,ii,i3,ii1) = VSpipi(aa,ii,i3,ii1) 
                  ENDDO i3 
               ENDDO ii1 in i1  

               DO ii1 in i1 
                  allocate LT101aa(aa1,ii,*,ii1)  
                  DO a3 
                     REQUEST                 T2aaC(a1,i,a3,i1) a1  
                     LT101aa(aa1,ii,a3,ii1) = T2aaC(aa1,ii,a3,ii1) 
                  ENDDO a3 
               ENDDO ii1 in i1  

               DO ii1 in i1 
                  allocate LT001aa(aa,ii,*,ii1)  
                  DO a3 
                     REQUEST                 T2aaC(a,i,a3,i1) a 
                     LT001aa(aa,ii,a3,ii1) = T2aaC(aa,ii,a3,ii1) 
                  ENDDO a3 
               ENDDO ii1 in i1  

#           ----------- 
            DO ii1 in i1 
#           ----------- 

              IF ii <= ii1 

              ncount = ncount + 1 
              execute print_scalar ncount 
#
               T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) = 0.0 
#
#           Initial permutation 
#           ------------------- 
#
               DO a3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LT001aa(aa,ii,a3,ii1)*LV1aabj(aa1,a3,bb2,jj2)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO a3  
#
#           a -> a1 permutation 
#           ------------------- 
#
               DO a3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LVaabj(aa,a3,bb2,jj2)*LT101aa(aa1,ii,a3,ii1)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO a3  
#
#           i2 -> i permutation 
#           ------------------- 
#
               DO b3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LT012ab(aa,ii1,b3,jj2)*LV10bbai(bb2,b3,aa1,ii)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO b3  
#
#           i2 -> i1 permutation 
#           ------------------- 
#
               DO b3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LT002ab(aa,ii,b3,jj2)*LV11bbai(bb2,b3,aa1,ii1)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO b3  
#
#           a -> a1, i2 -> i permutation 
#           ---------------------------- 
#
               DO b3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LV00bbai(bb2,b3,aa,ii)*LT112ab(aa1,ii1,b3,jj2)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO b3  
#
#           a -> a1, i2 -> i1 permutation 
#           ----------------------------- 
#
               DO b3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LV01bbai(bb2,b3,aa,ii1)*LT102ab(aa1,ii,b3,jj2)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO b3  
#
#           a -> a2, i2 -> i permutation
#           ---------------------------- 
#
               DO a3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LVS00aaai(aa1,a3,aa,ii)*LZ122ab(a3,ii1,bb2,jj2)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO a3  
#
#           a -> a2, i2 -> i1 permutation
#           ----------------------------- 
#
               DO a3  
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LVS01aaai(aa1,a3,aa,ii1)*LZ022ab(a3,ii,bb2,jj2)
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO a3  
#
#           Initial permutation 
#           ------------------- 
#
               DO i3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LQ001aa(aa,ii,aa1,i3)*LV122ab(i3,ii1,bb2,jj2)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO i3
#
#           a2 -> a permutation 
#           ------------------- 
#
               DO j3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LX012ab(aa,ii1,j3,jj2)*LQ102ab(aa1,ii,bb2,j3)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO j3
#
#           a2 -> a1 permutation 
#           -------------------- 
#
               DO j3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LQ002ab(aa,ii,bb2,j3)*LX112ab(aa1,ii1,j3,jj2)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO j3
#
#           i -> i1 permutation 
#           ------------------- 
#
               DO i3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LQ011aa(aa,ii1,aa1,i3)*LV022ab(i3,ii,bb2,jj2)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO i3
#
#           i -> i2 permutation 
#           ------------------- 
#
#           a2 -> a, i -> i1 permutation 
#           ---------------------------- 
#
               DO j3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LX002ab(aa,ii,j3,jj2)*LQ112ab(aa1,ii1,bb2,j3)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO j3
#
#           a2 -> a, i -> i2 permutation 
#           ----------------------------  
#
               DO i3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LX001aa(aa,ii,i3,ii1)*LY122ab(aa1,i3,bb2,jj2)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) -= T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO i3
#
#           a2 -> a1, i -> i1 permutation 
#           ----------------------------- 
#
               DO j3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LQ012ab(aa,ii1,bb2,j3)*LX102ab(aa1,ii,j3,jj2)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO j3
#
#           a2 -> a1, i -> i2 permutation 
#           ----------------------------- 
#
               DO i3 
                  T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = LY022ab(aa,i3,bb2,jj2)*LX101aa(aa1,ii,i3,ii1)  
                  T1aiaibj(aa,ii,aa1,ii1,bb2,jj2) += T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               ENDDO i3
#
# Set the numerical factor
# ------------------------
#
               efact  = 1.0
#
               if aa < aa1
                  fcount = fcount + 1
                  efact = 2.0
               endif 
#
               T3aiaibj(aa,ii,aa1,ii1,bb2,jj2)  = T1aiaibj(aa,ii,aa1,ii1,bb2,jj2)         
               execute energy_denominator         T3aiaibj  
               etemp =                            T1aiaibj(aa,ii,aa1,ii1,bb2,jj2)*T3aiaibj(aa,ii,aa1,ii1,bb2,jj2) 
               efact                            = efact/4.0 
               etemp                           *= efact  

               if ii1 > ii
                  etemp *= 2.0
               endif

               esum += etemp             
#
#              Compute singles 
#              --------------- 
               ######VFLCALL COMP_E5XS   
               tssxx(aa1,ii1,bb2,jj2)= 0.0 
               tss(aa,ii)            = 0.0 
               tssxx(aa1,ii,bb2,jj2) = 0.0 
               tss(aa,ii1)           = 0.0 
               tssxx(aa,ii1,bb2,jj2) = 0.0 
               tss(aa1,ii)           = 0.0 
               tssxx(aa,ii,bb2,jj2)  = 0.0 
               tss(aa1,ii1)          = 0.0 
               tssss(aa,ii,aa1,ii1)  = 0.0 
               txx(bb2,jj2)          = 0.0 
#
              ENDIF # ii <= ii1 
            ENDDO ii1 in i1 
               deallocate LT001aa(aa,ii,*,ii1)  
               deallocate LT002ab(aa,ii,*,jj2)  
               deallocate LQ002ab(aa,ii,bb2,*) 
               deallocate LX002ab(aa,ii,*,jj2)  
               deallocate LX001aa(aa,ii,*,ii1)  
               deallocate LT101aa(aa1,ii,*,ii1)  
            ENDDO ii in i 
               deallocate LVaabj(aa,*,bb2,jj2) 
               deallocate LV1aabj(aa1,*,bb2,jj2) 
               deallocate LV122ab(*,ii1,bb2,jj2) 
               deallocate LV022ab(*,ii,bb2,jj2) 
               deallocate LZ122ab(*,ii1,bb2,jj2)  
               deallocate LZ022ab(*,ii,bb2,jj2)  
               deallocate LT012ab(aa,ii1,*,jj2)  
               deallocate LT112ab(aa1,ii1,*,jj2)  
               deallocate LT102ab(aa1,ii,*,jj2)  
            ENDDO jj2 in j2 
               deallocate LV10bbai(bb2,*,aa1,ii) 
               deallocate LV00bbai(bb2,*,aa,ii) 
               deallocate LV01bbai(bb2,*,aa,ii1) 
               deallocate LV11bbai(bb2,*,aa1,ii1) 
            ENDDO bb2 in b2 
               deallocate LVS00aaai(aa1,*,aa,ii) 
               deallocate LVS01aaai(aa1,*,aa,ii1) 
               deallocate LX102ab(aa1,ii,*,jj2)  
               deallocate LX101aa(aa1,ii,*,ii1)  
               deallocate LY122ab(aa1,*,bb2,jj2) 
               deallocate LQ001aa(aa,ii,aa1,*) 
               deallocate LQ011aa(aa,ii1,aa1,*) 
               deallocate LX112ab(aa1,ii1,*,jj2) 
               deallocate LQ102ab(aa1,ii,bb2,*) 
               deallocate LQ112ab(aa1,ii1,bb2,*) 
               ENDIF # aa <= a1 
            ENDDO aa1 in a1 
               deallocate LQ012ab(aa,ii1,bb2,*) 
               deallocate LY022ab(aa,*,bb2,jj2) 
               deallocate LX012ab(aa,ii1,*,jj2)  
            ENDDO aa  in a 
#
      ENDPARDO j2, i, i1, a, a1, b2   
#
# ------------------------------------------------------------------------------------- 
# END LOOP1 
# ------------------------------------------------------------------------------------- 
#
      esuma = 0.0  
      esuma_S = 0.0  
      esumb = 0.0  
      esumb_S = 0.0  
      esum_S = 0.0  
#
      execute server_barrier 
      collective esum_aab += esum 
      collective esum_aaa += esum1  
#
      execute print_scalar esum_aab 
      execute print_scalar esum_aaa 
#
# Compute the single contribution
# -------------------------------
#        
      PARDO a, i1 
         GET t1aC(a,i1) 
         DO aa in a 
         DO ii1 in i1 
            GET           Sai(aa,ii1) 
            tss(aa,ii1) = t1aC(aa,ii1) 
            etemp       = tss(aa,ii1)*Sai(aa,ii1)
            esuma      += etemp  
         ENDDO ii1 in i1 
         ENDDO aa in a 
      ENDPARDO a, i1 
#        
      PARDO b, j1 
         GET t1aC(b,j1) 
         DO bb in b 
         DO jj1 in j1 
            GET           Sbj(bb,jj1) 
            txx(bb,jj1) = t1aC(bb,jj1) 
            etemp       = txx(bb,jj1)*Sbj(bb,jj1)
            esumb      += etemp  
         ENDDO jj1 in j1 
         ENDDO bb in b 
      ENDPARDO b, j1 
#        
      execute sip_barrier
      collective esuma_S += esuma 
      collective esumb_S += esumb 
      esum_S  = esuma_S  
      esum_S += esumb_S  
      execute server_barrier
#        
      esuma_S = esuma_S/4.0
      esumb_S = esumb_S/4.0
      esum_S = esum_S/4.0
      execute sip_barrier
      execute print_scalar esuma_S   
      execute print_scalar esumb_S   
      execute print_scalar esum_S   
#
      esum_aaa += esum_aab   
      esum_aaa += esum_S   
      esum_aaa *= 2.0 
      execute print_scalar esum_aaa   
      totenerg += esum_aaa 
#
      ENDPROC COMP_PT  
#     --------------- 
#
# ------------------------------------------------------------------------ 
#
# ------------------------------------------------------------------------ 
#                                                                        |
#                             MAIN PROGRAM                               |  
#                                                                        |
# ------------------------------------------------------------------------ 
#
      ecrit = cc_conv 
#
      create t1aC 
#
#   Read BLOCKDATA file.
#
      execute sip_barrier
      execute list_to_blocks                t1aC
      execute list_to_blocks                T2aaC
      execute list_to_blocks                T2abC
      execute read_list_to_blocks
      execute server_barrier
#
      execute server_barrier
#
# Perform PARTIAL 2-el integral transformation(No VVVV integrals) 
# --------------------------------------------------------------- 
#
      CALL TRAN_UHF 
#
# Compute perturbative triples (T) 
# -------------------------------- 
#
      create Sai 
      create Sbj 
      execute sip_barrier 
      execute server_barrier 
      CALL COMP_PT  
#
# ------------------------------------------------------------------------ 
#
#
                                   ENDSIAL CCSDtqUHF 
#
