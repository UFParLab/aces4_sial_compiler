#  Copyright (c) 2003-2010 University of Florida
import "aces_defs.sialx"
import "common.sialx"
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.

                           SIAL CCSD_RHF_SV1
#
#-------------------------------------------------------------------------------
#


#


#    ------------------------------------------------------------------------ 
#
     PROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                Vaaai
      execute list_to_blocks                Vpiqj
      execute read_list_to_blocks
      server_barrier
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
     PROC WRITE_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1) 
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                Vaaai
      execute blocks_to_list                Vpiqj(p,i,q,j) 
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC WRITE_2EL   
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#

#    ------------------------------------------------------------------------ 
#
      PROC TAUAA 
#     ----------
#
      PARDO a, i, a1, i1 
#
            REQUEST T2old_aa(a,i,a1,i1) i1  
            GET t1a_old(a1,i1) 
            GET t1a_old(a1,i) 
            GET t1a_old(a,i1) 
            GET t1a_old(a,i) 
# 
            tai(a1,i1)                 = t1a_old(a1,i1) 
            tmp1_aiai(a,i,a1,i1)       = t1a_old(a,i)^tai(a1,i1)  
            tai(a1,i)                  = t1a_old(a1,i) 
            tmp2_aiai(a,i,a1,i1)       = t1a_old(a,i1)^tai(a1,i)  
            tmp1_aiai(a,i,a1,i1)      -= tmp2_aiai(a,i,a1,i1)  
#
            tmp1_aiai(a,i,a1,i1)      *= 0.5  
            tmp1_aiai(a,i,a1,i1)      += T2old_aa(a,i,a1,i1) 
            PREPARE Taup_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC TAUAA 
#     ------------- 
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC TAUAB 
#     ----------
#
      PARDO a, i, b, j 
#
            REQUEST T2old_ab(a,i,b,j) j  
            GET t1a_old(a,i) 
            GET t1a_old(b,j) 
            tai(a,i) = t1a_old(a,i) 
#
            tmp1_aibj(a,i,b,j)       = tai(a,i)^t1a_old(b,j)  
            tmp2_aibj(a,i,b,j)       = tmp1_aibj(a,i,b,j)  
            tmp2_aibj(a,i,b,j)      *= 0.5  
#
            tmp1_aibj(a,i,b,j)      += T2old_ab(a,i,b,j) 
            tmp2_aibj(a,i,b,j)      += T2old_ab(a,i,b,j) 
            PREPARE Tau_ab(a,i,b,j)  = tmp1_aibj(a,i,b,j)  
            PREPARE Taup_ab(a,i,b,j) = tmp2_aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC TAUAB 
#     ------------- 
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC TAUPAA 
#     -----------
#
      PARDO a, i, a1, i1 
#
            REQUEST T2old_aa(a,i,a1,i1) i1  
            GET t1a_old(a1,i1) 
            GET t1a_old(a1,i) 
            GET t1a_old(a,i1) 
            GET t1a_old(a,i) 
#
            tai(a1,i1)                 = t1a_old(a1,i1) 
            tmp1_aiai(a,i,a1,i1)       = t1a_old(a,i)^tai(a1,i1)  
            tai(a1,i)                  = t1a_old(a1,i) 
            tmp2_aiai(a,i,a1,i1)       = t1a_old(a,i1)^tai(a1,i)  
            tmp1_aiai(a,i,a1,i1)      -= tmp2_aiai(a,i,a1,i1) 
            tmp1_aiai(a,i,a1,i1)      *= 0.5  
            tmp1_aiai(a,i,a1,i1)      += T2old_aa(a,i,a1,i1) 
            PREPARE Taup_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC TAUPAA 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAUPAB 
#     -----------
#
      PARDO a, i, b, j 
#
            REQUEST T2old_ab(a,i,b,j) j  
            GET t1a_old(a,i) 
            GET t1a_old(b,j) 
            tai(a,i) = t1a_old(a,i) 
# 
            tmp1_aibj(a,i,b,j)       = tai(a,i)^t1a_old(b,j)  
            tmp1_aibj(a,i,b,j)      *= 0.5  
            tmp1_aibj(a,i,b,j)      += T2old_ab(a,i,b,j) 
            PREPARE Taup_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC TAUPAB 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAU 
#
           CALL TAUAA 
           CALL TAUAB 
#
      ENDPROC TAU 
#
      PROC TAUP
#
           CALL TAUPAA 
           CALL TAUPAB 
#
      ENDPROC TAUP
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC FAEA
#     ----------
#
      PARDO a, a2, i
#     
               allocate LWiaai(*,a,a2,i)
#     
               DO a1
#     
                  REQUEST            Vaaai(a1,a,a2,i) i
                  REQUEST            Vaaai(a2,a,a1,i) i
                  GET                t1a_old(a2,i)
#     
                  taaai(a1,a,a2,i) = Vaaai(a1,a,a2,i)
                  t1aaai(a1,a,a2,i)= Vaaai(a2,a,a1,i)
                  taaai(a1,a,a2,i)-= t1aaai(a1,a,a2,i)
#     
                  Taa(a,a1)        = taaai(a1,a,a2,i)*t1a_old(a2,i)
                  PUT Fae_a(a,a1) += Taa(a,a1)
#     
                  DO i1
#
                     GET                  t1a_old(a1,i1)
                     tiaai(i1,a,a2,i)   = taaai(a1,a,a2,i)*t1a_old(a1,i1)
                     LWiaai(i1,a,a2,i) += tiaai(i1,a,a2,i)
#
                  ENDDO i1
#
               ENDDO a1
#
               DO i1
#
                  Taiai(a2,i,a,i1)          = LWiaai(i1,a,a2,i)
                  PREPARE e5aiai(a2,i,a,i1) = Taiai(a2,i,a,i1)
#
               ENDDO i1
#
               deallocate LWiaai(*,a,a2,i)
#
      ENDPARDO a, a2, i
#
      PARDO a, b, j
#
            allocate LWaibj(a,*,b,j)
#
            DO a1
#
               REQUEST            Vaaai(a1,a,b,j) j
               GET                t1a_old(b,j)
#
               DO i
#
                  GET                t1a_old(a1,i)
                  taibj(a,i,b,j)   = Vaaai(a1,a,b,j)*t1a_old(a1,i)
                  LWaibj(a,i,b,j) += taibj(a,i,b,j)
#
               ENDDO i
#
               Taa(a,a1)        = Vaaai(a1,a,b,j)*t1a_old(b,j)
               PUT Fae_a(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
            DO i
#
               Taibj(a,i,b,j)          = LWaibj(a,i,b,j)
               T1aibj(b,j,a,i)         = LWaibj(a,i,b,j)
               PREPARE e6aibj(a,i,b,j) = Taibj(a,i,b,j)
               PREPARE e5aibj(b,j,a,i) = T1aibj(b,j,a,i) 
#
            ENDDO i
#
            deallocate LWaibj(a,*,b,j)
#
      ENDPARDO a, b, j
#
      PARDO a1, i, b, j
#
           REQUEST Vpiqj(a1,i,b,j) j
#
           DO a
#
              REQUEST            Taup_ab(a,i,b,j) j
#
              Taa(a,a1)        = Taup_ab(a,i,b,j)*Vpiqj(a1,i,b,j)
              Taa(a,a1)       *= -1.0
#
              PUT Fae_a(a,a1) += Taa(a,a1)
#
           ENDDO a
#
      ENDPARDO a1, i, b, j
#
      PARDO a1, i, a2, i1
#
           REQUEST VSpipi(a1,i1,a2,i) i
#
           DO a
#
               REQUEST Taup_aa(a,i,a2,i1) i
#
               Taa(a,a1)        = Taup_aa(a,i,a2,i1)*VSpipi(a1,i1,a2,i)
               Taa(a,a1)       *= 0.5
#
               PUT Fae_a(a,a1) += Taa(a,a1)
#
            ENDDO a
#
      ENDPARDO a1, i, a2, i1
#
      ENDPROC FAEA
#     -------------
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC FAEB
#     ----------
#
      PARDO a, i, b
#
            allocate LWjbai(*,b,a,i)
#              
            DO b1
#           
               REQUEST Vaaai(b1,b,a,i) i
               GET     t1a_old(a,i) 
#
               DO j  
#
                  GET                t1a_old(b1,j)
                  tjbai(j,b,a,i)   = Vaaai(b1,b,a,i)*t1a_old(b1,j)
                  LWjbai(j,b,a,i) += tjbai(j,b,a,i)
#    
               ENDDO j
#    
            ENDDO b1
#     
            DO j
#        
               Taibj(a,i,b,j)          = LWjbai(j,b,a,i)
               PREPARE e5aibj(a,i,b,j) = Taibj(a,i,b,j)
#     
            ENDDO j
#    
            deallocate LWjbai(*,b,a,i)
#    
      ENDPARDO a, i, b
#
      ENDPROC FAEB
#     -------------
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC FAE
#     --------
         CALL FAEA 
        #CALL FAEB 
      ENDPROC FAE
#     ----------- 
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC FMEA
#     ----------
#
      PARDO i, a 
#
            Tme_a(i,a) = 0.0
# 
            DO i1 
            DO a1 
#
               REQUEST VSpipi(a,i,a1,i1) i1  
               GET     t1a_old(a1,i1) 
#
               Tia(i,a)    = VSpipi(a,i,a1,i1)*t1a_old(a1,i1) 
               Tme_a(i,a) += Tia(i,a) 
#
            ENDDO a1 
            ENDDO i1 
# 
            DO j 
            DO b 
#
               REQUEST Vpiqj(a,i,b,j) j  
               GET     t1a_old(b,j) 
#
               Tia(i,a)    = Vpiqj(a,i,b,j)*t1a_old(b,j) 
               Tme_a(i,a) += Tia(i,a) 
#
            ENDDO b 
            ENDDO j 
#
            PUT Fme_a(i,a) = Tme_a(i,a) 
#
      ENDPARDO i, a 
# 
      ENDPROC FMEA
#     -------------
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC FMIA
#     ----------
#
      PARDO i1, i, a, i2
#
            REQUEST VSpipi(a,i2,i,i1) i1  
            GET t1a_old(a,i2) 
#
            Tii(i1,i)        = VSpipi(a,i2,i,i1)*t1a_old(a,i2) 
            PUT Fmi_a(i1,i) += Tii(i1,i) 
#
      ENDPARDO i1, i, a, i2  
#
      PARDO a, a2, i2  
#
            allocate L3aiai(a2,*,a,i2) 
#
            DO i1 
#
               REQUEST VSpipi(a2,i1,a,i2) i2 
               L3aiai(a2,i1,a,i2) = VSpipi(a2,i1,a,i2) 
#
            ENDDO i1 
#
            DO i   
#
               REQUEST Taup_aa(a2,i,a,i2) i2 
# 
               DO i1    
#
                  Tii(i1,i)        = L3aiai(a2,i1,a,i2)*Taup_aa(a2,i,a,i2) 
                  Tii(i1,i)       *= 0.5 
                  PUT Fmi_a(i1,i) += Tii(i1,i) 
#
               ENDDO i1  
#
            ENDDO i   
#
            deallocate L3aiai(a2,*,a,i2) 
#
      ENDPARDO a, a2, i2  
#
      PARDO i1, i, b, j  
#
            REQUEST Vpiqj(i,i1,b,j) j  
            GET t1a_old(b,j) 
#
            Tii(i1,i)        = Vpiqj(i,i1,b,j)*t1a_old(b,j) 
            PUT Fmi_a(i1,i) += Tii(i1,i) 
#
      ENDPARDO i1, i, b, j  
#
      PARDO i1, i, b, j  
#
            DO a 
#
               REQUEST Vpiqj(a,i1,b,j)  j  
               REQUEST Taup_ab(a,i,b,j) j 
 
               Tii(i1,i)        = Taup_ab(a,i,b,j)*Vpiqj(a,i1,b,j) 
               PUT Fmi_a(i1,i) += Tii(i1,i) 
#
            ENDDO a 
#
      ENDPARDO i1, i, b, j  
#
      ENDPROC FMIA
#     -------------
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
# In the procedure T1ANEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1ANEW 
#     -----------
#
      PARDO a, i
#
            tai(a,i) = 0.0
#
            DO i1
#
               GET t1a_old(a,i1)
               GET Fmi_a(i1,i)
#
               t1ai(a,i) = t1a_old(a,i1)*Fmi_a(i1,i)
               tai(a,i) -= t1ai(a,i)
#
            ENDDO i1
#
            DO b
            DO j
#
               REQUEST T2old_ab(a,i,b,j) j
               REQUEST Viaai(i,a,b,j) j
               GET Fme_a(j,b)
               GET t1a_old(b,j)
#
               t1ai(a,i) = T2old_ab(a,i,b,j)*Fme_a(j,b)
               tai(a,i) += t1ai(a,i)
#
               t2ai(a,i)  = Viaai(i,a,b,j)*t1a_old(b,j)
               tai(a,i) += t2ai(a,i)
#
            ENDDO j
            ENDDO b
#
            DO a1
#
               GET t1a_old(a1,i)
               GET Fae_a(a,a1)
#
               t1ai(a,i) = t1a_old(a1,i)*Fae_a(a,a1)
               tai(a,i) += t1ai(a,i)
#
               DO i1
#
                  REQUEST T2old_aa(a,i,a1,i1) i1
                  REQUEST Vaaii(a,a1,i1,i) i
                  REQUEST Viaai(i1,a1,a,i) i
                  GET Fme_a(i1,a1)
                  GET t1a_old(a1,i1)
#
                  t1ai(a,i) = T2old_aa(a,i,a1,i1)*Fme_a(i1,a1)
                  tai(a,i) += t1ai(a,i)
#
                  Tpppp(i1,a1,a,i)  = Vaaii(a,a1,i1,i)
                  Tpppp(i1,a1,a,i) -= Viaai(i1,a1,a,i)
#
                  t2ai(a,i) = Tpppp(i1,a1,a,i)*t1a_old(a1,i1)
                  tai(a,i) -= t2ai(a,i)
#
               ENDDO i1
#
            ENDDO a1
#
            PUT t1a_new(a,i) += tai(a,i)
#
      ENDPARDO a, i
#
      PARDO a1, a2, i1
#
            allocate L4aiai(a1,*,a2,i1)
#
            DO i
#
               REQUEST T2old_aa(a1,i,a2,i1) i1
               L4aiai(a1,i,a2,i1) = T2old_aa(a1,i,a2,i1)
#
            ENDDO i
#
            DO a
#
               REQUEST Vaaai(a2,a,a1,i1)   i1
               REQUEST Vaaai(a1,a,a2,i1)   i1
               taaai(a2,a,a1,i1) = Vaaai(a2,a,a1,i1) 
               t1aaai(a2,a,a1,i1)= Vaaai(a1,a,a2,i1) 
               taaai(a2,a,a1,i1)-= t1aaai(a2,a,a1,i1) 
#
               DO i
#
                  tai(a,i)  = taaai(a2,a,a1,i1)*L4aiai(a1,i,a2,i1)
                  tai(a,i) *= -0.5
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L4aiai(a1,*,a2,i1)
#
      ENDPARDO a1, a2, i1
#
      PARDO a1, i1, i2
#
            allocate L1aiii(a1,i2,*,i1)
#
            DO i
#
               REQUEST VSpipi(a1,i2,i,i1) i1
               L1aiii(a1,i2,i,i1) = VSpipi(a1,i2,i,i1)
#
            ENDDO i
#
            DO a
#
               REQUEST T2old_aa(a,i1,a1,i2) i1
#
               DO i
#
                  tai(a,i)  = L1aiii(a1,i2,i,i1)*T2old_aa(a,i1,a1,i2)
                  tai(a,i) *= -0.5
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1aiii(a1,i2,*,i1)
#
      ENDPARDO a1, i1, i2
#
      PARDO a1, b, j
#
            allocate L1aibj(a1,*,b,j)
#
            DO i
#
               REQUEST T2old_ab(a1,i,b,j) j
               L1aibj(a1,i,b,j) = T2old_ab(a1,i,b,j)
#
            ENDDO i
#
            DO a
#
               REQUEST Vaaai(a1,a,b,j) j
#
               DO i
#
                  tai(a,i)  = Vaaai(a1,a,b,j)*L1aibj(a1,i,b,j)
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1aibj(a1,*,b,j)
#
      ENDPARDO a1, b, j
#
      PARDO b, j, i1
#
            allocate L1iibj(*,i1,b,j)
#
            DO i
#
               REQUEST Vpiqj(i,i1,b,j) j
               L1iibj(i,i1,b,j) = Vpiqj(i,i1,b,j)
#
            ENDDO i
#
            DO a
#
               REQUEST T2old_ab(a,i1,b,j) j
#
               DO i
#
                  tai(a,i)  = L1iibj(i,i1,b,j)*T2old_ab(a,i1,b,j)
                  tai(a,i) *= -1.0
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1iibj(*,i1,b,j)
#
      ENDPARDO b, j, i1
#
      ENDPROC T1ANEW 
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC WminjAB
#     ------------
#
      create Wminj_ab
      sip_barrier
      PARDO i, i1, j, j1
#
            REQUEST                    Vpiqj(i1,i,j1,j) j
            Tiijj(i1,i,j1,j)         = Vpiqj(i1,i,j1,j)
            PUT Wminj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)
#
      ENDPARDO i, i1, j, j1
#
      PARDO i,i1,b,j1
#
         REQUEST Vpiqj(i,i1,b,j1) j1

         DO j
#
            GET                        t1a_old(b,j)
            Tiijj(i1,i,j1,j)         = Vpiqj(i,i1,b,j1)*t1a_old(b,j)
            T1iijj(j1,j,i1,i)        = Tiijj(i1,i,j1,j)  
            PUT Wminj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)
            PUT Wminj_ab(j1,j,i1,i) += T1iijj(j1,j,i1,i)
#
         ENDDO j
#
      ENDPARDO i,i1,b,j1
#
      PARDO i1, j1, a, b
#
         REQUEST Vpiqj(a,i1,b,j1) j1
#
         DO j
         DO i
#
            REQUEST                    Tau_ab(a,i,b,j)  j
            Tiijj(i1,i,j1,j)         = Tau_ab(a,i,b,j)*Vpiqj(a,i1,b,j1)
            Tiijj(i1,i,j1,j)        *= 0.5
            PUT Wminj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)
#
         ENDDO i
         ENDDO j
#
      ENDPARDO i1, j1, a, b
      sip_barrier
#
      PARDO i1, j1, a, b
#
            REQUEST Tau_ab(a,i1,b,j1) j1
#
            DO i
            DO j
#
               GET                          Wminj_ab(i1,i,j1,j)
               T1aibj(a,i,b,j)            = Tau_ab(a,i1,b,j1)*Wminj_ab(i1,i,j1,j)
               PREPARE T2new_ab(a,i,b,j) += T1aibj(a,i,b,j)
#
            ENDDO j
            ENDDO i
#
      ENDPARDO i1, j1, a, b
      sip_barrier
      delete Wminj_ab
#
      ENDPROC WminjAB
#     --------------- 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMINJ 
#
           CALL WminjAB 
#
      ENDPROC WMINJ 
# 
# ----------------------------------------------------------------------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAB the new amplitudes T2new_ab are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
      PROC T2NEWAB    
#     ------------
#
      PARDO i, b, j 
#
            allocate Liibj(*,i,b,j) 
            allocate L1aibj(*,i,b,j)   
#
            DO i1 
#
               REQUEST           Vpiqj(i1,i,b,j) j 
               Liibj(i1,i,b,j) = Vpiqj(i1,i,b,j) 
#
            ENDDO i1 
#
            DO a1 
#
               REQUEST            T2old_ab(a1,i,b,j) j 
               L1aibj(a1,i,b,j) = T2old_ab(a1,i,b,j) 
#
            ENDDO a1 
#
            DO a 
#
               REQUEST          Vpiqj(a,i,b,j) j 
               Taibj(a,i,b,j) = Vpiqj(a,i,b,j)   
               Taibj(a,i,b,j)*= 0.5  
#
               DO i1 
#
                  GET t1a_old(a,i1) 
#
                  T1aibj(a,i,b,j) = Liibj(i1,i,b,j)*t1a_old(a,i1) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO i1 
#
               DO a1 
#
                  GET Fae_a(a,a1) 
                  tmp_aa(a,a1) = Fae_a(a,a1)    
#
                  DO i1 
#
                     GET t1a_old(a,i1) 
                     GET Fme_a(i1,a1) 
                     tmp1_aa(a,a1)  = t1a_old(a,i1)*Fme_a(i1,a1) 
                     tmp1_aa(a,a1) *= 0.5 
                     tmp_aa(a,a1)  -= tmp1_aa(a,a1)  
#
                  ENDDO i1 
#
                  T1aibj(a,i,b,j) = L1aibj(a1,i,b,j)*tmp_aa(a,a1)  
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
               ENDDO a1 
#
               T1aibj(b,j,a,i)            = Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(b,j,a,i) += T1aibj(b,j,a,i)  
#
            ENDDO a 
#
            deallocate Liibj(*,i,b,j) 
            deallocate L1aibj(*,i,b,j)   
#
      ENDPARDO i, b, j 
#
      PARDO a, b, j 
#
            allocate L3aibj(a,*,b,j) 
            allocate Laabj(a,*,b,j) 
#
            DO i1 
#
               REQUEST T2old_ab(a,i1,b,j) j 
               L3aibj(a,i1,b,j) = T2old_ab(a,i1,b,j) 
#
            ENDDO i1 
#
            DO a1 
#
               REQUEST Vaaai(a,a1,b,j) j  
               Laabj(a,a1,b,j) = Vaaai(a,a1,b,j)  
#
            ENDDO a1 
#
            DO i 
#
               Taibj(a,i,b,j) = 0.0  
#
               DO i1 
#
                  GET Fmi_a(i1,i) 
                  tmp_ii(i1,i) = Fmi_a(i1,i) 
#
                  DO a1 
#
                     GET t1a_old(a1,i) 
                     GET Fme_a(i1,a1) 
#
                     tmp1_ii(i1,i)  = t1a_old(a1,i)*Fme_a(i1,a1) 
                     tmp1_ii(i1,i) *= 0.5 
                     tmp_ii(i1,i)  += tmp1_ii(i1,i) 
#
                  ENDDO a1  
#
                  T1aibj(a,i,b,j) = L3aibj(a,i1,b,j)*tmp_ii(i1,i) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO i1 
#
               DO a1 
#
                  GET t1a_old(a1,i) 
#
                  T1aibj(a,i,b,j) = Laabj(a,a1,b,j)*t1a_old(a1,i)  
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
               ENDDO a1 
#
               T1aibj(b,j,a,i)            = Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(b,j,a,i) += T1aibj(b,j,a,i)  
#
            ENDDO i 
#
            deallocate L3aibj(a,*,b,j) 
            deallocate Laabj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
      ENDPROC T2NEWAB    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    First create and zero-out intermediate arrays
#    ---------------------------------------------
#
     PARDO mu, nu, i, j
           Txixj(mu,i,nu,j)           = 0.0
           PREPARE TAO_ab(mu,i,nu,j)  = Txixj(mu,i,nu,j)
           PREPARE T2AO_ab(mu,i,nu,j) = Txixj(mu,i,nu,j)
     ENDPARDO mu, nu, i, j
#
     server_barrier 
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
#    AB spin combination
#     -------------------
#
     PARDO b, a, j, i
#
           REQUEST Tau_ab(a,i,b,j) a
#
           DO mu
#
              Taixj(a,i,mu,j) = Tau_ab(a,i,b,j)*ca(mu,b)
#
              DO nu
#
                 Txixj(nu,i,mu,j)           = Taixj(a,i,mu,j)*ca(nu,a)
                 PREPARE TAO_ab(nu,i,mu,j) += Txixj(nu,i,mu,j)
#
              ENDDO nu
#
           ENDDO mu
#
      ENDPARDO b, a, j, i
#
     create t1a_ax 
     server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu, lambda, sigma
        WHERE mu < nu 
#
           execute compute_integrals aoint(lambda,mu,sigma,nu)
#
           DO i
           DO j
#
              REQUEST                       TAO_ab(lambda,i,sigma,j) j
              Yab(mu,i,nu,j)              = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,j)
              Y1ab(nu,j,mu,i)             = Yab(mu,i,nu,j)
#
              PREPARE T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
              PREPARE T2AO_ab(nu,j,mu,i) += Y1ab(nu,j,mu,i)
#
           ENDDO j
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
     PARDO mu, nu, lambda, sigma
        WHERE mu == nu 
#
           execute compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO i
           DO j
#
              REQUEST                       TAO_ab(lambda,i,sigma,j) j
              Yab(mu,i,nu,j)              = aoint(mu,lambda,nu,sigma)*TAO_ab(lambda,i,sigma,j)
              PREPARE T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
#
           ENDDO j
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
#    Half transform the t1 arrays. 
#    ----------------------------- 
#
     PARDO a, mu
#
           tpx(a,mu) = 0.0 
#
           DO i  
#
              GET          t1a_old(a,i) 
              t1px(a,mu) = t1a_old(a,i)*ca(mu,i) 
              tpx(a,mu) += t1px(a,mu) 
#
           ENDDO i  
#
           PUT t1a_ax(a,mu) = tpx(a,mu) 
#
     ENDPARDO a, mu
#
     server_barrier  
     sip_barrier  
#
#    Perform final transformation
#    ----------------------------
#
        PARDO nu, i, j
#
              allocate LDaixj(*,i,nu,j)
#
              DO mu
#
                 REQUEST T2AO_ab(mu,i,nu,j) j
#
                 DO a
                    Taixj(a,i,nu,j)   = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                    LDaixj(a,i,nu,j) += Taixj(a,i,nu,j)
                 ENDDO a
#
              ENDDO mu
#
              DO a
                 PREPARE TDaixj(a,i,nu,j) = LDaixj(a,i,nu,j)
              ENDDO a
#
              deallocate LDaixj(*,i,nu,j)
#
        ENDPARDO nu, i, j
        server_barrier
#
        PARDO a, i, j, nu
#
              REQUEST TDaixj(a,i,nu,j) a
#
              DO b
#
                 GET                          t1a_ax(b,nu)
#
                 Taibj(a,i,b,j)             = TDaixj(a,i,nu,j)*ca(nu,b)
                 T1aibj(a,i,b,j)            = TDaixj(a,i,nu,j)*t1a_ax(b,nu)
                 T1aibj(a,i,b,j)           *= -1.0
                 T2aibj(b,j,a,i)            = T1aibj(a,i,b,j)
#
                 PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
                 PREPARE T2new_ab(a,i,b,j) += T1aibj(a,i,b,j)
                 PREPARE T2new_ab(b,j,a,i) += T2aibj(b,j,a,i)
#
              ENDDO b
#
        ENDPARDO a, i, j, nu
#
        sip_barrier
#
     sip_barrier  
     delete t1a_ax 
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
# --------------------------------------------------------------------------- 
#
      PROC WAEBFAB 
#     ------------ 
#
# --------------------------------------------------------------------- 
# Comute contribution coming from:  
# 1/2 tau^{ab}_{mn} * [ 1/4 tau^{ef}_{ij} * (V^{mn}_{ef} - V^{mn}_{fe}]  
# --------------------------------------------------------------------- 
#
      create Wminj_ab 
      sip_barrier 
      PARDO i, j, a, b  
#
            REQUEST Tau_ab(a,i,b,j)  j  
#
            DO i1   
            DO j1  
#
               REQUEST                    Vpiqj(a,i1,b,j1) j1  
               Tiijj(i1,i,j1,j)         = Vpiqj(a,i1,b,j1)*Tau_ab(a,i,b,j) 
               PUT Wminj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j) 
#
            ENDDO j1  
            ENDDO i1   
#
      ENDPARDO i, j, a, b 
      sip_barrier 
#
      PARDO a, b, i1, j1  
#
            REQUEST Tau_ab(a,i1,b,j1) j1  
#
            DO i   
            DO j  
#
               GET                          Wminj_ab(i1,i,j1,j) 
               Taibj(a,i,b,j)             = Tau_ab(a,i1,b,j1)*Wminj_ab(i1,i,j1,j) 
               Taibj(a,i,b,j)            *= 0.5  
               PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO j  
            ENDDO i  
#
      ENDPARDO a, b, i1, j1  
      sip_barrier 
      delete Wminj_ab 
#
      ENDPROC WAEBFAB 
#     --------------- 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC WAEBF 
# 
           CALL WAEBFAB 
#
      ENDPROC WAEBF 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAA 
#     ------------
#
      PARDO a, a1, i, i1  
#
               REQUEST              Viaai(i1,a1,a,i) i  
               REQUEST              Vaaii(a,a1,i1,i) i  
               REQUEST              e5aiai(a1,i1,a,i) i 
#
               TYaiai(a1,i1,a,i) = 0.0 
#
               DO i2
#
                  REQUEST              VSpipi(a1,i1,i,i2) i2
                  GET                  t1a_old(a,i2)
#
                  T1aiai(a1,i1,a,i)  = VSpipi(a1,i1,i,i2)*t1a_old(a,i2)
                  TYaiai(a1,i1,a,i) -= T1aiai(a1,i1,a,i)
#
               ENDDO i2

               Taiai(a1,i1,a,i)           = Vaaii(a,a1,i1,i)
               TYaiai(a1,i1,a,i)         -= Taiai(a1,i1,a,i)
               Taiai(a1,i1,a,i)           = Viaai(i1,a1,a,i)
               TYaiai(a1,i1,a,i)         += Taiai(a1,i1,a,i)
               TYaiai(a1,i1,a,i)         += e5aiai(a1,i1,a,i)
               PREPARE TAUP_aa(a1,i1,a,i) = TYaiai(a1,i1,a,i) 
#
      ENDPARDO a, a1, i, i1  
      server_barrier 
#
      PARDO a, i, a2, i2
#
         REQUEST              T2old_aa(a2,i,a,i2) i2  
         GET                  t1a_old(a2,i) 
         GET                  t1a_old(a,i2) 
 
         tai(a,i2)          = t1a_old(a,i2) 
         T1aiai(a2,i2,a,i)  = t1a_old(a2,i)^tai(a,i2) 
         T2aiai(a2,i2,a,i)  = t2old_aa(a2,i,a,i2) 
         T2aiai(a2,i2,a,i) *= 0.5 
         T2aiai(a2,i2,a,i) += T1aiai(a2,i2,a,i) 

         DO i1
         DO a1 
#
            REQUEST                       VSpipi(a1,i1,a2,i2) i2  
            T3aiai(a1,i1,a,i)           = VSpipi(a1,i1,a2,i2)*T2aiai(a2,i2,a,i) 
            T3aiai(a1,i1,a,i)          *= -1.0  
            PREPARE TAUP_aa(a1,i1,a,i) += T3aiai(a1,i1,a,i)
#
         ENDDO a1
         ENDDO i1
#
      ENDPARDO a, i, a2, i2 

      PARDO a, i, b, j 
#
         REQUEST T2old_ab(a,i,b,j) j 
#
         DO i1
         DO a1 
#
            REQUEST                       Vpiqj(a1,i1,b,j) j 
            T1aiai(a1,i1,a,i)           = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
            T1aiai(a1,i1,a,i)          *= 0.5
            PREPARE TAUP_aa(a1,i1,a,i) += T1aiai(a1,i1,a,i)
#
         ENDDO a1
         ENDDO i1
#
      ENDPARDO a, i, b, j
      server_barrier
#
# Contributions to T2new_ab 
# ------------------------- 
#
      PARDO a, i, a1, i1 
#
            REQUEST TAUP_aa(a1,i1,a,i)  i 
#
            DO j  
            DO b
#
               REQUEST                      T2old_ab(a1,i1,b,j) j  
               R1aibj(a,i,b,j)            = TAUP_aa(a1,i1,a,i)*T2old_ab(a1,i1,b,j) 
               Taibj(b,j,a,i)             = R1aibj(a,i,b,j) 
               PREPARE T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
               PREPARE T2new_ab(b,j,a,i) += Taibj(b,j,a,i)
#
            ENDDO b  
            ENDDO j  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC WMEBJAA 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAB 
#     ------------
#
      PARDO j, b, i, a
#
               REQUEST           Viaai(i,a,b,j) j  
               REQUEST           e5aibj(a,i,b,j) a 
#
               Taibj(a,i,b,j) = 0.
#
               DO j1
#
                  REQUEST           Vpiqj(a,i,j,j1) j1  
                  GET               t1a_old(b,j1) 
                  T1aibj(a,i,b,j) = Vpiqj(a,i,j,j1)*t1a_old(b,j1) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO j1

               T1aibj(a,i,b,j)          = Viaai(i,a,b,j) 
               Taibj(a,i,b,j)          += T1aibj(a,i,b,j)
               Taibj(a,i,b,j)          += e5aibj(a,i,b,j) 
               PREPARE TAUP_ab(a,i,b,j) = Taibj(a,i,b,j) 
#
      ENDPARDO j, b, i, a
      server_barrier

      PARDO j, b, j1, b1
#
               REQUEST              T2old_aa(b1,j,b,j1) j1 
               GET                  t1a_old(b1,j) 
               GET                  t1a_old(b,j1) 
# 
               tbj(b,j1)          = t1a_old(b,j1) 
               T2bjbj(b1,j,b,j1)  = t1a_old(b1,j)^tbj(b,j1) 
               T1bjbj(b1,j,b,j1)  = 0.5*T2old_aa(b1,j,b,j1) 
               T1bjbj(b1,j,b,j1) += T2bjbj(b1,j,b,j1) 
#
               DO i  
               DO a 
#
                  REQUEST                     Vpiqj(a,i,b1,j1) j1  
                  Taibj(a,i,b,j)            = T1bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1) 
                  Taibj(a,i,b,j)           *= -1.0  
                  PREPARE TAUP_ab(a,i,b,j) += Taibj(a,i,b,j)
#   
               ENDDO a 
               ENDDO i  
#
      ENDPARDO j, b, j1, b1
#
      PARDO b, j, a1, i1
#
            REQUEST T2old_ab(a1,i1,b,j) j      
#
            DO a
            DO i
#
               REQUEST                     VSpipi(a1,i1,a,i) i
               T1aibj(a,i,b,j)           = T2old_ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               T1aibj(a,i,b,j)          *= 0.5
               PREPARE TAUP_ab(a,i,b,j) += T1aibj(a,i,b,j)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO b, j, a1, i1

      server_barrier 
#
# Contribution to T2new_ab 
# ------------------------ 
#
      PARDO i1, a1, a, i
#
            REQUEST T2old_aa(a1,i1,a,i) i 
#
            DO j 
            DO b 
#
               REQUEST                        TAUP_ab(a,i,b,j) j  
               R1aibj(a1,i1,b,j)            = T2old_aa(a1,i1,a,i)*TAUP_ab(a,i,b,j)  
               Taibj(b,j,a1,i1)             = R1aibj(a1,i1,b,j) 
               PREPARE T2new_ab(a1,i1,b,j) += R1aibj(a1,i1,b,j) 
               PREPARE T2new_ab(b,j,a1,i1) += Taibj(b,j,a1,i1) 
#
            ENDDO b 
            ENDDO j 
#
      ENDPARDO i1, a1, a, i
      server_barrier 
#
      ENDPROC WMEBJAB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# -------------------------------------------------------------------------------  
#
      PROC T2ABS2 
#     ----------- 
#
      PARDO i, j, i1, b  
#
           Tiibj(i1,i,b,j) = 0.0 
#
           DO a1 
# 
              REQUEST            Viaai(i1,a1,b,j) j  
              GET                t1a_old(a1,i) 
#
              T1iibj(i1,i,b,j) = Viaai(i1,a1,b,j)*t1a_old(a1,i) 
              Tiibj(i1,i,b,j) += T1iibj(i1,i,b,j) 
#
           ENDDO a1  
#
           DO b1 
#
              REQUEST            Vaaii(b,b1,i1,i) i  
              GET                t1a_old(b1,j) 
#
              T1iibj(i1,i,b,j) = Vaaii(b,b1,i1,i)*t1a_old(b1,j)  
              Tiibj(i1,i,b,j) += T1iibj(i1,i,b,j) 
#
          ENDDO b1  
#
          DO a 
#
             GET                          t1a_old(a,i1) 
             Taibj(a,i,b,j)             = Tiibj(i1,i,b,j)*t1a_old(a,i1) 
             Taibj(a,i,b,j)            *= -1.0 
             PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
          ENDDO a 
#
      ENDPARDO i, j, i1, b  
#
      PARDO i, j, j1, a 
#
            Tjjai(j1,j,a,i) = 0.0 
#
            DO a1 
#
               REQUEST            Vaaii(a,a1,j1,j) j  
               GET                t1a_old(a1,i) 
#
               T1jjai(j1,j,a,i) = Vaaii(a,a1,j1,j)*t1a_old(a1,i) 
               Tjjai(j1,j,a,i) += T1jjai(j1,j,a,i)
#
            ENDDO a1 
#
            DO b1 
# 
               REQUEST            Viaai(i,a,b1,j1) j1  
               GET                t1a_old(b1,j) 
#
               T1jjai(j1,j,a,i) = Viaai(i,a,b1,j1)*t1a_old(b1,j) 
               Tjjai(j1,j,a,i) += T1jjai(j1,j,a,i) 
#
            ENDDO b1  
#
            DO b 
#
               GET                          t1a_old(b,j1) 
               Taibj(a,i,b,j)             = Tjjai(j1,j,a,i)*t1a_old(b,j1) 
               Taibj(a,i,b,j)            *= -1.0 
               PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO b 
#
      ENDPARDO i, j, j1, a  
#
      ENDPROC T2ABS2 
#     -------------- 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions from 'Wmjbe'. 
#
      PROC WMJBEab
#     -------------
#
      PARDO b, i, b1, i1
#
            REQUEST            Vaaii(b,b1,i1,i) i
            Tiiqq(i1,i,b,b1) = Vaaii(b,b1,i1,i)
#
            DO j1
#
               REQUEST             Vpiqj(i,i1,b1,j1) j1
               GET                 t1a_old(b,j1)
#
               tbj(b,j1)         = t1a_old(b,j1)
               T1iiqq(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*tbj(b,j1)
               Tiiqq(i1,i,b,b1) -= T1iiqq(i1,i,b,b1)
#
            ENDDO j1
#
            PREPARE Wiibb(i1,i,b,b1) = Tiiqq(i1,i,b,b1)
#
      ENDPARDO b, i, b1, i1
      server_barrier

      PARDO a1, b, i1, b1
#
         REQUEST Vaaai(b1,b,a1,i1) i1
#
         DO i
#
            GET                          t1a_old(a1,i)
            T1iiqq(i1,i,b,b1)          = Vaaai(b1,b,a1,i1)*t1a_old(a1,i)
            PREPARE Wiibb(i1,i,b,b1)  += T1iiqq(i1,i,b,b1)
#
         ENDDO i
#
      ENDPARDO a1, b, i1, b1

      PARDO i, b, a1, j1
#
         REQUEST     T2old_ab(a1,i,b,j1) j1
         GET         t1a_old(a1,i)
         GET         t1a_old(b,j1)
         tai(a1,i) = t1a_old(a1,i) 

         Taibj(a1,i,b,j1)   = tai(a1,i)^t1a_old(b,j1)
         T1aibj(a1,i,b,j1)  = 0.5*T2old_ab(a1,i,b,j1)
         T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)
#
         DO i1
         DO b1
#
            REQUEST                     Vpiqj(a1,i1,b1,j1) j1
            Tiiqq(i1,i,b,b1)          = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1)
            Tiiqq(i1,i,b,b1)         *= -1.0  
            PREPARE Wiibb(i1,i,b,b1) += Tiiqq(i1,i,b,b1)
#
         ENDDO b1
         ENDDO i1
#
      ENDPARDO i, b, a1, j1
      server_barrier

#  Calculate contribution to the amplitudes
#  ----------------------------------------
#
      PARDO a, j, i1, b1
#
            REQUEST T2old_ab(a,i1,b1,j) j
#
            DO i
            DO b
#
               REQUEST                      Wiibb(i1,i,b,b1) i
#
               Taibj(a,i,b,j)             = T2old_ab(a,i1,b1,j)*Wiibb(i1,i,b,b1)
               Taibj(a,i,b,j)            *= -1.0  
#
               T2aibj(b,j,a,i)            = Taibj(a,i,b,j) 
               PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
               PREPARE T2new_ab(b,j,a,i) += T2aibj(b,j,a,i)
#
            ENDDO b
            ENDDO i
#
      ENDPARDO a, j, i1, b1
#
      ENDPROC WMJBEab
#     ---------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC WMEBJ 
# 
           CALL WMEBJAA
           CALL WMEBJAB
           CALL WMJBEab
           CALL T2ABS2
#
      ENDPROC WMEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     ecorrab = 0.0 
     esumab  = 0.0 
     sip_barrier 
     PARDO a, b, i, j 
#
           REQUEST Vpiqj(a,i,b,j) j  
           REQUEST Vpiqj(a,j,b,i) j  
#
           REQUEST T2old_ab(a,i,b,j) j  
           GET     t1a_old(a,i) 
           GET     t1a_old(b,j) 
           tai(a,i) = t1a_old(a,i) 
#
           Taibj(a,i,b,j)  = tai(a,i)^t1a_old(b,j) 
           Taibj(a,i,b,j) += T2old_ab(a,i,b,j)  
#
           T1aibj(a,i,b,j) = Vpiqj(a,i,b,j)  
           T2aibj(a,i,b,j) = Vpiqj(a,j,b,i)  
           T1aibj(a,i,b,j)*= 2.0  
           T1aibj(a,i,b,j)-= T2aibj(a,i,b,j)  
#
           etemp = Taibj(a,i,b,j)*T1aibj(a,i,b,j) 
           esumab += etemp 
#
     ENDPARDO a, b, i, j 

     sip_barrier 
#
     collective ecorrab += esumab
     print_scalar ecorrab 
#
    #ecorrT  = ecorraa + ecorrbb
     ecorrT = ecorrab 
     print_scalar ecorrT  
# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
# 
     PROC T2NEW_ZERO
#    --------------- 
#
#     Zero out new 1-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, i 
                tai(a,i) = 0.0 
                PUT t1a_new(a,i) = tai(a,i) 
          ENDPARDO a, i 
#
#     Zero out new 2-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, b, i, j 
                Taibj(a,i,b,j) = 0.0
                PREPARE T2new_ab(a,i,b,j) = Taibj(a,i,b,j) 
          ENDPARDO a, b, i, j 
# 
     ENDPROC T2NEW_ZERO
# 
#    ------------------------------------------------------------------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET2 
#     ------------- 
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab(b,j,a,i) b 
            REQUEST                    T2new_ab(b,j,a,i) b 
            Taibj(a,i,b,j)           = T2new_ab(b,j,a,i)
            T1aibj(a,i,b,j)          = T2old_ab(b,j,a,i)
#
            REQUEST                    T2old_ab(a,i,b,j) b 
            REQUEST                    T2new_ab(a,i,b,j) b 
            Taibj(a,i,b,j)          += T2new_ab(a,i,b,j)
            T1aibj(a,i,b,j)         += T2old_ab(a,i,b,j)

            execute energy_denominator Taibj
            T1aibj(a,i,b,j) -= Taibj(a,i,b,j)
            T1aibj(a,i,b,j) *= -0.5
#
            if kiter == 1
               PREPARE e1aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE e2aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE e3aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE e4aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE e5aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
      server_barrier 
#
      PARDO b, a, j, i
#
            REQUEST                    T2new_ab(a,i,b,j) a
            REQUEST                    T2new_ab(b,j,a,i) a
            Taibj(a,i,b,j)           = T2new_ab(b,j,a,i)
            Taibj(a,i,b,j)          += T2new_ab(a,i,b,j)
            Taibj(a,i,b,j)          *= 0.5  
            execute energy_denominator Taibj
            PREPARE T2old_ab(a,i,b,j)    = Taibj(a,i,b,j)
#
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATET2 
#     ----------------  
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET1 
#     ------------- 
#
      PARDO a, i 
#
            GET                t1a_new(a,i) 
            GET                t1a_old(a,i) 
            tai(a,i)         = t1a_new(a,i) 
            t1ai(a,i)        = t1a_old(a,i) 
            execute energy_denominator tai 
           #PUT t1a_old(a,i) = tai(a,i) 
            tai(a,i)        -= t1ai(a,i) 
#
            if kiter == 1 
               PUT e1ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 2 
               PUT e2ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 3 
               PUT e3ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 4 
               PUT e4ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter >= 5 
               PUT e5ai(a,i) = Tai(a,i) 
            endif 
#
      ENDPARDO a, i 
#
      sip_barrier 
#
      PARDO a, i 
#
            GET                t1a_new(a,i) 
            tai(a,i)         = t1a_new(a,i) 
            execute energy_denominator tai 
            PUT t1a_old(a,i) = tai(a,i) 
#
      ENDPARDO a, i 
#
      sip_barrier 
#
#
      ENDPROC UPDATET1 
#     ----------------  
#
      PROC MOVET2
#     ------------
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab(a,i,b,j) a 
            Taibj(a,i,b,j)           = T2old_ab(a,i,b,j)
#
            if kiter == 1
               PREPARE d1aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE d2aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE d3aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
#
      ENDPROC MOVET2
#     ----------------
#
      PROC MOVET1
#     ------------
#
      PARDO a, i 
#
            GET        t1a_old(a,i)
            tai(a,i) = t1a_old(a,i)
#
            if kiter == 1
               PUT d1ai(a,i) = tai(a,i)
            endif
#
            if kiter == 2
               PUT d2ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 3
               PUT d3ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 4
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
            if kiter >= 5
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
      ENDPARDO a, i
#
      ENDPROC MOVET1
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR  
#    ----------------- 
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       sip_barrier
#
     ENDPROC ZERO_DSCALAR  
#    -------------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS   
#    --------------- 
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       sip_barrier
#
     ENDPROC SETUP_DIIS   
#    ------------------ 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
           REQUEST e1aibj(a,j,b,i) a # kiter-1 amplitudes
           REQUEST e2aibj(a,j,b,i) a # kiter-0 amplitudes
#
           taibj(a,i,b,j)  = e1aibj(a,j,b,i) 
           t1aibj(a,i,b,j) = e1aibj(a,i,b,j) 
           t1aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e2aibj(a,j,b,i) 
           t2aibj(a,i,b,j) = e2aibj(a,i,b,j) 
           t2aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
#             b1x x=1,2
#             ---------
#
              etemp = t1aibj(a,i,b,j)*t1aibj(a,i,b,j)
              b11  += etemp
#
              etemp = t1aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = t2aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-1 amplitudes  
           GET e2ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
     sip_barrier
     server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
     server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
     server_barrier 
#
     execute compute_diis # --> New instruction  
     server_barrier 
#
     c1 = Tb11 
     c2 = Tb22 
     server_barrier 
     print_scalar c1 
     print_scalar c2 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-2 amplitudes  
           GET D1ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-1 amplitudes  
           GET e2ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
     sip_barrier 
     server_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
           REQUEST e1aibj(a,j,b,i) a # kiter-2 amplitudes
           REQUEST e2aibj(a,j,b,i) a # kiter-1 amplitudes
           REQUEST e3aibj(a,j,b,i) a # kiter-0 amplitudes
#
           taibj(a,i,b,j)  = e1aibj(a,j,b,i) 
           t1aibj(a,i,b,j) = e1aibj(a,i,b,j) 
           t1aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e2aibj(a,j,b,i) 
           t2aibj(a,i,b,j) = e2aibj(a,i,b,j) 
           t2aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e3aibj(a,j,b,i) 
           t3aibj(a,i,b,j) = e3aibj(a,i,b,j) 
           t3aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
#             b1x x=1,3
#             ---------
#
              etemp = t1aibj(a,i,b,j)*t1aibj(a,i,b,j)
              b11  += etemp
#
              etemp = t1aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b12  += etemp
#
              etemp = t1aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = t2aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b22  += etemp
#
              etemp = t2aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = t3aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-2 amplitudes  
           GET e2ai(a,i)    # kiter-1 amplitudes  
           GET e3ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
     sip_barrier
     server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
     server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
     server_barrier 
#
     execute compute_diis # --> New instruction  
     server_barrier 
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     server_barrier 
     print_scalar c1 
     print_scalar c2 
     print_scalar c3 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-3 amplitudes  
           GET D1ai(a,i)     # kiter-2 amplitudes  
           GET D2ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-2 amplitudes  
           GET e2ai(a,i)     # kiter-1 amplitudes  
           GET e3ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
     sip_barrier 
     server_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
           REQUEST e1aibj(a,j,b,i) a # kiter-3 amplitudes
           REQUEST e2aibj(a,j,b,i) a # kiter-2 amplitudes
           REQUEST e3aibj(a,j,b,i) a # kiter-1 amplitudes
           REQUEST e4aibj(a,j,b,i) a # kiter-0 amplitudes
#
           taibj(a,i,b,j)  = e1aibj(a,j,b,i) 
           t1aibj(a,i,b,j) = e1aibj(a,i,b,j) 
           t1aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e2aibj(a,j,b,i) 
           t2aibj(a,i,b,j) = e2aibj(a,i,b,j) 
           t2aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e3aibj(a,j,b,i) 
           t3aibj(a,i,b,j) = e3aibj(a,i,b,j) 
           t3aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e4aibj(a,j,b,i) 
           t4aibj(a,i,b,j) = e4aibj(a,i,b,j) 
           t4aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
#             b1x x=1,4
#             ---------
#
              etemp = t1aibj(a,i,b,j)*t1aibj(a,i,b,j)
              b11  += etemp
#
              etemp = t1aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b12  += etemp
#
              etemp = t1aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b13  += etemp
#
              etemp = t1aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = t2aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b22  += etemp
#
              etemp = t2aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b23  += etemp
#
              etemp = t2aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = t3aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b33  += etemp
#
              etemp = t3aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = t4aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-3 amplitudes  
           GET e2ai(a,i)    # kiter-2 amplitudes  
           GET e3ai(a,i)    # kiter-1 amplitudes  
           GET e4ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
     sip_barrier
     server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
     server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
     server_barrier 
#
     execute compute_diis # --> New instruction  
     server_barrier 
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     print_scalar c1 
     print_scalar c2 
     print_scalar c3 
     print_scalar c4 
     server_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-4 amplitudes  
           GET D1ai(a,i)     # kiter-3 amplitudes  
           GET D2ai(a,i)     # kiter-2 amplitudes  
           GET D3ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-3 amplitudes  
           GET e2ai(a,i)     # kiter-2 amplitudes  
           GET e3ai(a,i)     # kiter-1 amplitudes  
           GET e4ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
     sip_barrier 
     server_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
           REQUEST e1aibj(a,j,b,i) a # kiter-4 amplitudes
           REQUEST e2aibj(a,j,b,i) a # kiter-3 amplitudes
           REQUEST e3aibj(a,j,b,i) a # kiter-2 amplitudes
           REQUEST e4aibj(a,j,b,i) a # kiter-1 amplitudes
           REQUEST e5aibj(a,j,b,i) a # kiter-0 amplitudes
#
           taibj(a,i,b,j)  = e1aibj(a,j,b,i) 
           t1aibj(a,i,b,j) = e1aibj(a,i,b,j) 
           t1aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e2aibj(a,j,b,i) 
           t2aibj(a,i,b,j) = e2aibj(a,i,b,j) 
           t2aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e3aibj(a,j,b,i) 
           t3aibj(a,i,b,j) = e3aibj(a,i,b,j) 
           t3aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e4aibj(a,j,b,i) 
           t4aibj(a,i,b,j) = e4aibj(a,i,b,j) 
           t4aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
           taibj(a,i,b,j)  = e5aibj(a,j,b,i) 
           t5aibj(a,i,b,j) = e5aibj(a,i,b,j) 
           t5aibj(a,i,b,j)-= taibj(a,i,b,j) 
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
              etemp = e1aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
              etemp = e2aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
              etemp = e3aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
              etemp = e4aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b55  += etemp
#
#
#             b1x x=1,5
#             ---------
#
              etemp = t1aibj(a,i,b,j)*t1aibj(a,i,b,j)
              b11  += etemp
#
              etemp = t1aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b12  += etemp
#
              etemp = t1aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b13  += etemp
#
              etemp = t1aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b14  += etemp
#
              etemp = t1aibj(a,i,b,j)*t5aibj(a,i,b,j)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = t2aibj(a,i,b,j)*t2aibj(a,i,b,j)
              b22  += etemp
#
              etemp = t2aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b23  += etemp
#
              etemp = t2aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b24  += etemp
#
              etemp = t2aibj(a,i,b,j)*t5aibj(a,i,b,j)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = t3aibj(a,i,b,j)*t3aibj(a,i,b,j)
              b33  += etemp
#
              etemp = t3aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b34  += etemp
#
              etemp = t3aibj(a,i,b,j)*t5aibj(a,i,b,j)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = t4aibj(a,i,b,j)*t4aibj(a,i,b,j)
              b44  += etemp
#
              etemp = t4aibj(a,i,b,j)*t5aibj(a,i,b,j)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = t5aibj(a,i,b,j)*t5aibj(a,i,b,j)
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-4 amplitudes  
           GET e2ai(a,i)    # kiter-3 amplitudes  
           GET e3ai(a,i)    # kiter-2 amplitudes  
           GET e4ai(a,i)    # kiter-1 amplitudes  
           GET e5ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
     sip_barrier
     server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
     server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
     server_barrier 
#
     execute compute_diis # --> New instruction  
     server_barrier 
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     print_scalar c1 
     print_scalar c2 
     print_scalar c3 
     print_scalar c4 
     print_scalar c5 
     server_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-5 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D4aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e5aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c5
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-5 amplitudes  
           GET D1ai(a,i)     # kiter-4 amplitudes  
           GET D2ai(a,i)     # kiter-3 amplitudes  
           GET D3ai(a,i)     # kiter-2 amplitudes  
           GET D4ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-4 amplitudes  
           GET e2ai(a,i)     # kiter-3 amplitudes  
           GET e3ai(a,i)     # kiter-2 amplitudes  
           GET e4ai(a,i)     # kiter-1 amplitudes  
           GET e5ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d4ai(a,i) 
           t1ai(a,i)    += e5ai(a,i) 
           t1ai(a,i)    *= c5  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
     sip_barrier 
     server_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
     server_barrier
     sip_barrier
#
#    0 --> 1
#    ---------------------------------------------------
#
     execute array_copy d1aibj d0aibj
     server_barrier
#
#    2 --> 1
#    ---------------------------------------------------
#
     execute array_copy e2aibj e1aibj
     execute array_copy d2aibj d1aibj
     server_barrier
#
#    3 --> 2
#    ---------------------------------------------------
#
     execute array_copy e3aibj e2aibj
     execute array_copy d3aibj d2aibj
     server_barrier
#
#
#    4 --> 3
#    ---------------------------------------------------
#
     execute array_copy e4aibj e3aibj
     execute array_copy d4aibj d3aibj
     server_barrier
#
#    5 --> 4
#    ---------------------------------------------------
#
     execute array_copy e5aibj e4aibj
#
     sip_barrier
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i
#
     sip_barrier
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     sip_barrier
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     sip_barrier
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     sip_barrier
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     sip_barrier
     server_barrier
#
     ENDPROC MOVE4
#    -------------
#
#    proc do_checkpoint

#    execute checkpoint t2old_aa
#    execute checkpoint t2old_ab
#    execute checkpoint t1a_old
#    execute checkpoint E1aibj
#    execute checkpoint E2aibj
#    execute checkpoint E3aibj
#    execute checkpoint E4aibj
#    execute checkpoint E5aibj
#    execute checkpoint E1ai
#    execute checkpoint E2ai
#    execute checkpoint E3ai
#    execute checkpoint E4ai
#    execute checkpoint E5ai
#    execute checkpoint D0aibj
#    execute checkpoint D1aibj
#    execute checkpoint D2aibj
#    execute checkpoint D3aibj
#    execute checkpoint D4aibj
#    execute checkpoint D0ai
#    execute checkpoint D1ai
#    execute checkpoint D2ai
#    execute checkpoint D3ai
#    execute checkpoint D4ai
#    execute commit_checkpoint

#    execute get_restart_status restart
#    if restart == 1.0
#       CALL READ_2EL   # Restore data saved as BLOCKDATA 
#    endif

#    endproc do_checkpoint

# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
# 
# BEGIN MAIN PROGRAM 
# ------------------ 
#
      ecrit = cc_conv  
#
# Read transformed integrals from lists 
# ------------------------------------- 
#
      CALL READ_2EL 

      CREATE t1a_old 
      CREATE t1a_new 
#
      CREATE D0ai
      CREATE D1ai
      CREATE D2ai
      CREATE D3ai
      CREATE D4ai
      CREATE D5ai
#
      CREATE e1ai
      CREATE e2ai
      CREATE e3ai
      CREATE e4ai
      CREATE e5ai
#
      sip_barrier  
#
# Get initial second-order guess 
# ------------------------------ 
      CALL IGUESS_UHF
      sip_barrier  
      server_barrier  
#
      PARDO a, i, b, j 
            REQUEST                     T2old_ab(a,i,b,j) a 
            REQUEST                     T2old_ab(a,j,b,i) a 
            taiai(a,i,b,j)            = T2old_ab(a,i,b,j) 
            t1aiai(a,i,b,j)           = T2old_ab(a,j,b,i) 
            taiai(a,i,b,j)           -= t1aiai(a,i,b,j) 
            PREPARE T2old_aa(a,i,b,j) = taiai(a,i,b,j) 
      ENDPARDO a, i, b, j 
#
      server_barrier  
#
# Calculate the second-order energy 
# --------------------------------- 
      CALL ENERGY_NEW 
#
# Start iterations
# ---------------- 
      DO KITER 

      server_barrier  
#
      PARDO a, i, b, j 
            REQUEST                     T2old_ab(a,i,b,j) a 
            REQUEST                     T2old_ab(a,j,b,i) a 
            taiai(a,i,b,j)            = T2old_ab(a,i,b,j) 
            t1aiai(a,i,b,j)           = T2old_ab(a,j,b,i) 
            taiai(a,i,b,j)           -= t1aiai(a,i,b,j) 
            PREPARE T2old_aa(a,i,b,j) = taiai(a,i,b,j) 
      ENDPARDO a, i, b, j 
#
      server_barrier  
#
#        Form Tau and Taup 
#        ----------------- 
         CALL TAU  
#
#        Zero-out the new two-particle amplitude arrays
#        ---------------------------------------------- 
#
         CALL T2NEW_ZERO
#
#        Form one-particle intermediates 
#        ------------------------------- 
         CREATE Fae_a 
         CREATE Fme_a
         CREATE Fmi_a 
         sip_barrier  
         server_barrier  
# 
         CALL FAE 
         CALL FMIA 
         CALL FMEA
         sip_barrier 
         server_barrier  
#
#        Calculate new one-particle amplitudes 
#        ------------------------------------- 
#
         CALL T1ANEW 
#
#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL T2NEWAB  
#
         CALL WMINJ 
         CALL AOLADDER 
         CALL WAEBF  
         CALL WMEBJ 
#
#        Wait for all to finish 
#        ---------------------- 
         sip_barrier   
         server_barrier   
#
         DELETE Fae_a 
         DELETE Fme_a
         DELETE Fmi_a 
         CALL UPDATET1 
         CALL UPDATET2 
#
         sip_barrier   
         server_barrier   
         CALL ENERGY_NEW 
         sip_barrier  
         server_barrier   
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
         server_barrier  
#
         CALL MOVET1
         CALL MOVET2
#
         server_barrier  
         PARDO a, i, b, j 
               REQUEST                     T2old_ab(a,i,b,j) a 
               REQUEST                     T2old_ab(a,j,b,i) a 
               taiai(a,i,b,j)            = T2old_ab(a,i,b,j) 
               t1aiai(a,i,b,j)           = T2old_ab(a,j,b,i) 
               taiai(a,i,b,j)           -= t1aiai(a,i,b,j) 
               PREPARE T2old_aa(a,i,b,j) = taiai(a,i,b,j) 
         ENDPARDO a, i, b, j 
         server_barrier  
#
#        Check on convergence 
#        -------------------- 
#
         IF ecorrT < eold 
            ediff = eold - ecorrT 
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
         IF ecorrT > eold 
            ediff = ecorrT - eold  
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
#        Reset eold --> enew 
#        ------------------- 
#
         eold = ecorrT 

         #if kiter >= 5 
         #   call do_checkpoint
         #endif
#
      ENDDO KITER 
#
      sip_barrier 
      totenerg  = ecorrT  
      totenerg += scfeneg  
      print_scalar totenerg  
#
# Write amplitudes to file
# ------------------------
#
######CALL WRITE_2EL   
#
      sip_barrier
      execute blocks_to_list                t1a_old
     #execute blocks_to_list                T2old_aa
      execute blocks_to_list                T2old_ab
      execute write_blocks_to_list
      sip_barrier
#
                           ENDSIAL CCSD_RHF_SV1    
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
#
