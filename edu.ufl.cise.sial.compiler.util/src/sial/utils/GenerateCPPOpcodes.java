package sial.utils;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import sial.code_gen.Opcode;

public class GenerateCPPOpcodes {

	/**
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException {

		String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());

		StringBuilder sb = new StringBuilder();
		sb.append("/*\n * opcode.h\n\n This file was generated by edu.ufl.cise.sial.compiler.util.GenerateCPPOpcodes.java\n\n"
				+ timestamp + "\n\n" + "*\n*/\n\n#ifndef OPCODE_H_\n#define OPCODE_H_\n\n");
		sb.append("#include <string>\n#include \"sip.h\"\n\n");
		sb.append("namespace sip {\n//codes for where clauses\n");
		sb.append("enum where_code_t {\n");
		sb.append("	where_eq = 0,\n");
		sb.append("	where_geq = 1,\n");
		sb.append("	where_leq = 2,\n");
		sb.append("	where_gt = 3,\n");
		sb.append("	where_lt = 4,\n");
		sb.append("	where_neq = 5\n");
		sb.append("};\n");

		sb.append("/**opcodes and optable entry contents\n");
		sb.append(" *\n");
		sb.append(" * An optable entry contains the following fields\n");
		sb.append(" * opcode, op0, op1, op2, selector[MAX_RANK], line_number\n");
		sb.append(" *\n");
		sb.append("* Below, the contents of the entry for each opcode is indicated\n");
		sb.append(" * Unused slots are indicate with _\n");
		sb.append("*\n");
		sb.append("* X-Macros are used to define the opcodes as an enum and a enum-to-string function.\n");
		sb.append("*\n");
		sb.append("*/\n");
		sb.append("\n");

		sb.append(Opcode.generateCPPHeader());

		sb.append("\nenum opcode_t {\n");
		sb.append("#define SIPOP(e,n,t,p) e = n,\n");
		sb.append("				SIP_OPCODES\n");
		sb.append("#undef SIPOP\n");
		sb.append("				last_op\n");
		sb.append("			};\n\n");

		sb.append("			/**\n");
		sb.append("			 * Converts an opcode to it's string equivalent\n");
		sb.append("			 * @param\n");
		sb.append("			 * @return\n");
		sb.append("			 */\n");
		sb.append("			std::string opcodeToName(opcode_t);\n");

		sb.append("			/**\n");
		sb.append("			 * Converts an integer to an opcode\n");
		sb.append("			 * @param\n");
		sb.append("			 * @return\n");
		sb.append("			 */\n");
		sb.append("			opcode_t intToOpcode(int);\n");

		sb.append("			/**\n");
		sb.append("			 * Whether a certain opcode is printable\n");
		sb.append("			 * @param\n");
		sb.append("			 * @return\n");
		sb.append("			 */\n");
		sb.append("			bool printableOpcode(opcode_t);\n");

		sb.append("			} /* namespace sip */\n");

		sb.append("#endif /* OPCODE_H_ */\n");

		String header = sb.toString();

		Writer writer = new FileWriter("opcode.h");
		writer.write(header);
		writer.close();

	}

}
